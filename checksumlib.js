/*! For license information please see main.35fe01e8.js.LICENSE.txt */
!function(){var e={301:function(e){e.exports=function(e){return new Promise((function(t){return setTimeout(t,e)}))}},763:function(e,t,n){var r;e=n.nmd(e),function(){var i,o=200,a="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",s="Expected a function",u="Invalid `variable` option passed into `_.template`",c="__lodash_hash_undefined__",l=500,d="__lodash_placeholder__",f=1,h=2,p=4,v=1,m=2,g=1,y=2,b=4,w=8,I=16,C=32,S=64,k=128,E=256,x=512,A=30,M="...",T=800,N=16,_=1,R=2,O=1/0,D=9007199254740991,L=17976931348623157e292,F=NaN,V=4294967295,B=V-1,j=V>>>1,P=[["ary",k],["bind",g],["bindKey",y],["curry",w],["curryRight",I],["flip",x],["partial",C],["partialRight",S],["rearg",E]],W="[object Arguments]",U="[object Array]",G="[object AsyncFunction]",H="[object Boolean]",z="[object Date]",q="[object DOMException]",Z="[object Error]",Q="[object Function]",Y="[object GeneratorFunction]",K="[object Map]",X="[object Number]",J="[object Null]",$="[object Object]",ee="[object Promise]",te="[object Proxy]",ne="[object RegExp]",re="[object Set]",ie="[object String]",oe="[object Symbol]",ae="[object Undefined]",se="[object WeakMap]",ue="[object WeakSet]",ce="[object ArrayBuffer]",le="[object DataView]",de="[object Float32Array]",fe="[object Float64Array]",he="[object Int8Array]",pe="[object Int16Array]",ve="[object Int32Array]",me="[object Uint8Array]",ge="[object Uint8ClampedArray]",ye="[object Uint16Array]",be="[object Uint32Array]",we=/\b__p \+= '';/g,Ie=/\b(__p \+=) '' \+/g,Ce=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Se=/&(?:amp|lt|gt|quot|#39);/g,ke=/[&<>"']/g,Ee=RegExp(Se.source),xe=RegExp(ke.source),Ae=/<%-([\s\S]+?)%>/g,Me=/<%([\s\S]+?)%>/g,Te=/<%=([\s\S]+?)%>/g,Ne=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,_e=/^\w*$/,Re=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Oe=/[\\^$.*+?()[\]{}|]/g,De=RegExp(Oe.source),Le=/^\s+/,Fe=/\s/,Ve=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Be=/\{\n\/\* \[wrapped with (.+)\] \*/,je=/,? & /,Pe=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,We=/[()=,{}\[\]\/\s]/,Ue=/\\(\\)?/g,Ge=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,He=/\w*$/,ze=/^[-+]0x[0-9a-f]+$/i,qe=/^0b[01]+$/i,Ze=/^\[object .+?Constructor\]$/,Qe=/^0o[0-7]+$/i,Ye=/^(?:0|[1-9]\d*)$/,Ke=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Xe=/($^)/,Je=/['\n\r\u2028\u2029\\]/g,$e="\\ud800-\\udfff",et="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",tt="\\u2700-\\u27bf",nt="a-z\\xdf-\\xf6\\xf8-\\xff",rt="A-Z\\xc0-\\xd6\\xd8-\\xde",it="\\ufe0e\\ufe0f",ot="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",at="['\u2019]",st="["+$e+"]",ut="["+ot+"]",ct="["+et+"]",lt="\\d+",dt="["+tt+"]",ft="["+nt+"]",ht="[^"+$e+ot+lt+tt+nt+rt+"]",pt="\\ud83c[\\udffb-\\udfff]",vt="[^"+$e+"]",mt="(?:\\ud83c[\\udde6-\\uddff]){2}",gt="[\\ud800-\\udbff][\\udc00-\\udfff]",yt="["+rt+"]",bt="\\u200d",wt="(?:"+ft+"|"+ht+")",It="(?:"+yt+"|"+ht+")",Ct="(?:['\u2019](?:d|ll|m|re|s|t|ve))?",St="(?:['\u2019](?:D|LL|M|RE|S|T|VE))?",kt="(?:"+ct+"|"+pt+")"+"?",Et="["+it+"]?",xt=Et+kt+("(?:"+bt+"(?:"+[vt,mt,gt].join("|")+")"+Et+kt+")*"),At="(?:"+[dt,mt,gt].join("|")+")"+xt,Mt="(?:"+[vt+ct+"?",ct,mt,gt,st].join("|")+")",Tt=RegExp(at,"g"),Nt=RegExp(ct,"g"),_t=RegExp(pt+"(?="+pt+")|"+Mt+xt,"g"),Rt=RegExp([yt+"?"+ft+"+"+Ct+"(?="+[ut,yt,"$"].join("|")+")",It+"+"+St+"(?="+[ut,yt+wt,"$"].join("|")+")",yt+"?"+wt+"+"+Ct,yt+"+"+St,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",lt,At].join("|"),"g"),Ot=RegExp("["+bt+$e+et+it+"]"),Dt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Lt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Ft=-1,Vt={};Vt[de]=Vt[fe]=Vt[he]=Vt[pe]=Vt[ve]=Vt[me]=Vt[ge]=Vt[ye]=Vt[be]=!0,Vt[W]=Vt[U]=Vt[ce]=Vt[H]=Vt[le]=Vt[z]=Vt[Z]=Vt[Q]=Vt[K]=Vt[X]=Vt[$]=Vt[ne]=Vt[re]=Vt[ie]=Vt[se]=!1;var Bt={};Bt[W]=Bt[U]=Bt[ce]=Bt[le]=Bt[H]=Bt[z]=Bt[de]=Bt[fe]=Bt[he]=Bt[pe]=Bt[ve]=Bt[K]=Bt[X]=Bt[$]=Bt[ne]=Bt[re]=Bt[ie]=Bt[oe]=Bt[me]=Bt[ge]=Bt[ye]=Bt[be]=!0,Bt[Z]=Bt[Q]=Bt[se]=!1;var jt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Pt=parseFloat,Wt=parseInt,Ut="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,Gt="object"==typeof self&&self&&self.Object===Object&&self,Ht=Ut||Gt||Function("return this")(),zt=t&&!t.nodeType&&t,qt=zt&&e&&!e.nodeType&&e,Zt=qt&&qt.exports===zt,Qt=Zt&&Ut.process,Yt=function(){try{var e=qt&&qt.require&&qt.require("util").types;return e||Qt&&Qt.binding&&Qt.binding("util")}catch(t){}}(),Kt=Yt&&Yt.isArrayBuffer,Xt=Yt&&Yt.isDate,Jt=Yt&&Yt.isMap,$t=Yt&&Yt.isRegExp,en=Yt&&Yt.isSet,tn=Yt&&Yt.isTypedArray;function nn(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function rn(e,t,n,r){for(var i=-1,o=null==e?0:e.length;++i<o;){var a=e[i];t(r,a,n(a),e)}return r}function on(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function an(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function sn(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function un(e,t){for(var n=-1,r=null==e?0:e.length,i=0,o=[];++n<r;){var a=e[n];t(a,n,e)&&(o[i++]=a)}return o}function cn(e,t){return!!(null==e?0:e.length)&&bn(e,t,0)>-1}function ln(e,t,n){for(var r=-1,i=null==e?0:e.length;++r<i;)if(n(t,e[r]))return!0;return!1}function dn(e,t){for(var n=-1,r=null==e?0:e.length,i=Array(r);++n<r;)i[n]=t(e[n],n,e);return i}function fn(e,t){for(var n=-1,r=t.length,i=e.length;++n<r;)e[i+n]=t[n];return e}function hn(e,t,n,r){var i=-1,o=null==e?0:e.length;for(r&&o&&(n=e[++i]);++i<o;)n=t(n,e[i],i,e);return n}function pn(e,t,n,r){var i=null==e?0:e.length;for(r&&i&&(n=e[--i]);i--;)n=t(n,e[i],i,e);return n}function vn(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var mn=Sn("length");function gn(e,t,n){var r;return n(e,(function(e,n,i){if(t(e,n,i))return r=n,!1})),r}function yn(e,t,n,r){for(var i=e.length,o=n+(r?1:-1);r?o--:++o<i;)if(t(e[o],o,e))return o;return-1}function bn(e,t,n){return t===t?function(e,t,n){var r=n-1,i=e.length;for(;++r<i;)if(e[r]===t)return r;return-1}(e,t,n):yn(e,In,n)}function wn(e,t,n,r){for(var i=n-1,o=e.length;++i<o;)if(r(e[i],t))return i;return-1}function In(e){return e!==e}function Cn(e,t){var n=null==e?0:e.length;return n?xn(e,t)/n:F}function Sn(e){return function(t){return null==t?i:t[e]}}function kn(e){return function(t){return null==e?i:e[t]}}function En(e,t,n,r,i){return i(e,(function(e,i,o){n=r?(r=!1,e):t(n,e,i,o)})),n}function xn(e,t){for(var n,r=-1,o=e.length;++r<o;){var a=t(e[r]);a!==i&&(n=n===i?a:n+a)}return n}function An(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function Mn(e){return e?e.slice(0,zn(e)+1).replace(Le,""):e}function Tn(e){return function(t){return e(t)}}function Nn(e,t){return dn(t,(function(t){return e[t]}))}function _n(e,t){return e.has(t)}function Rn(e,t){for(var n=-1,r=e.length;++n<r&&bn(t,e[n],0)>-1;);return n}function On(e,t){for(var n=e.length;n--&&bn(t,e[n],0)>-1;);return n}var Dn=kn({"\xc0":"A","\xc1":"A","\xc2":"A","\xc3":"A","\xc4":"A","\xc5":"A","\xe0":"a","\xe1":"a","\xe2":"a","\xe3":"a","\xe4":"a","\xe5":"a","\xc7":"C","\xe7":"c","\xd0":"D","\xf0":"d","\xc8":"E","\xc9":"E","\xca":"E","\xcb":"E","\xe8":"e","\xe9":"e","\xea":"e","\xeb":"e","\xcc":"I","\xcd":"I","\xce":"I","\xcf":"I","\xec":"i","\xed":"i","\xee":"i","\xef":"i","\xd1":"N","\xf1":"n","\xd2":"O","\xd3":"O","\xd4":"O","\xd5":"O","\xd6":"O","\xd8":"O","\xf2":"o","\xf3":"o","\xf4":"o","\xf5":"o","\xf6":"o","\xf8":"o","\xd9":"U","\xda":"U","\xdb":"U","\xdc":"U","\xf9":"u","\xfa":"u","\xfb":"u","\xfc":"u","\xdd":"Y","\xfd":"y","\xff":"y","\xc6":"Ae","\xe6":"ae","\xde":"Th","\xfe":"th","\xdf":"ss","\u0100":"A","\u0102":"A","\u0104":"A","\u0101":"a","\u0103":"a","\u0105":"a","\u0106":"C","\u0108":"C","\u010a":"C","\u010c":"C","\u0107":"c","\u0109":"c","\u010b":"c","\u010d":"c","\u010e":"D","\u0110":"D","\u010f":"d","\u0111":"d","\u0112":"E","\u0114":"E","\u0116":"E","\u0118":"E","\u011a":"E","\u0113":"e","\u0115":"e","\u0117":"e","\u0119":"e","\u011b":"e","\u011c":"G","\u011e":"G","\u0120":"G","\u0122":"G","\u011d":"g","\u011f":"g","\u0121":"g","\u0123":"g","\u0124":"H","\u0126":"H","\u0125":"h","\u0127":"h","\u0128":"I","\u012a":"I","\u012c":"I","\u012e":"I","\u0130":"I","\u0129":"i","\u012b":"i","\u012d":"i","\u012f":"i","\u0131":"i","\u0134":"J","\u0135":"j","\u0136":"K","\u0137":"k","\u0138":"k","\u0139":"L","\u013b":"L","\u013d":"L","\u013f":"L","\u0141":"L","\u013a":"l","\u013c":"l","\u013e":"l","\u0140":"l","\u0142":"l","\u0143":"N","\u0145":"N","\u0147":"N","\u014a":"N","\u0144":"n","\u0146":"n","\u0148":"n","\u014b":"n","\u014c":"O","\u014e":"O","\u0150":"O","\u014d":"o","\u014f":"o","\u0151":"o","\u0154":"R","\u0156":"R","\u0158":"R","\u0155":"r","\u0157":"r","\u0159":"r","\u015a":"S","\u015c":"S","\u015e":"S","\u0160":"S","\u015b":"s","\u015d":"s","\u015f":"s","\u0161":"s","\u0162":"T","\u0164":"T","\u0166":"T","\u0163":"t","\u0165":"t","\u0167":"t","\u0168":"U","\u016a":"U","\u016c":"U","\u016e":"U","\u0170":"U","\u0172":"U","\u0169":"u","\u016b":"u","\u016d":"u","\u016f":"u","\u0171":"u","\u0173":"u","\u0174":"W","\u0175":"w","\u0176":"Y","\u0177":"y","\u0178":"Y","\u0179":"Z","\u017b":"Z","\u017d":"Z","\u017a":"z","\u017c":"z","\u017e":"z","\u0132":"IJ","\u0133":"ij","\u0152":"Oe","\u0153":"oe","\u0149":"'n","\u017f":"s"}),Ln=kn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Fn(e){return"\\"+jt[e]}function Vn(e){return Ot.test(e)}function Bn(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function jn(e,t){return function(n){return e(t(n))}}function Pn(e,t){for(var n=-1,r=e.length,i=0,o=[];++n<r;){var a=e[n];a!==t&&a!==d||(e[n]=d,o[i++]=n)}return o}function Wn(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}function Un(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=[e,e]})),n}function Gn(e){return Vn(e)?function(e){var t=_t.lastIndex=0;for(;_t.test(e);)++t;return t}(e):mn(e)}function Hn(e){return Vn(e)?function(e){return e.match(_t)||[]}(e):function(e){return e.split("")}(e)}function zn(e){for(var t=e.length;t--&&Fe.test(e.charAt(t)););return t}var qn=kn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Zn=function e(t){var n=(t=null==t?Ht:Zn.defaults(Ht.Object(),t,Zn.pick(Ht,Lt))).Array,r=t.Date,Fe=t.Error,$e=t.Function,et=t.Math,tt=t.Object,nt=t.RegExp,rt=t.String,it=t.TypeError,ot=n.prototype,at=$e.prototype,st=tt.prototype,ut=t["__core-js_shared__"],ct=at.toString,lt=st.hasOwnProperty,dt=0,ft=function(){var e=/[^.]+$/.exec(ut&&ut.keys&&ut.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),ht=st.toString,pt=ct.call(tt),vt=Ht._,mt=nt("^"+ct.call(lt).replace(Oe,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),gt=Zt?t.Buffer:i,yt=t.Symbol,bt=t.Uint8Array,wt=gt?gt.allocUnsafe:i,It=jn(tt.getPrototypeOf,tt),Ct=tt.create,St=st.propertyIsEnumerable,kt=ot.splice,Et=yt?yt.isConcatSpreadable:i,xt=yt?yt.iterator:i,At=yt?yt.toStringTag:i,Mt=function(){try{var e=Wo(tt,"defineProperty");return e({},"",{}),e}catch(t){}}(),_t=t.clearTimeout!==Ht.clearTimeout&&t.clearTimeout,Ot=r&&r.now!==Ht.Date.now&&r.now,jt=t.setTimeout!==Ht.setTimeout&&t.setTimeout,Ut=et.ceil,Gt=et.floor,zt=tt.getOwnPropertySymbols,qt=gt?gt.isBuffer:i,Qt=t.isFinite,Yt=ot.join,mn=jn(tt.keys,tt),kn=et.max,Qn=et.min,Yn=r.now,Kn=t.parseInt,Xn=et.random,Jn=ot.reverse,$n=Wo(t,"DataView"),er=Wo(t,"Map"),tr=Wo(t,"Promise"),nr=Wo(t,"Set"),rr=Wo(t,"WeakMap"),ir=Wo(tt,"create"),or=rr&&new rr,ar={},sr=ha($n),ur=ha(er),cr=ha(tr),lr=ha(nr),dr=ha(rr),fr=yt?yt.prototype:i,hr=fr?fr.valueOf:i,pr=fr?fr.toString:i;function vr(e){if(Ns(e)&&!bs(e)&&!(e instanceof br)){if(e instanceof yr)return e;if(lt.call(e,"__wrapped__"))return pa(e)}return new yr(e)}var mr=function(){function e(){}return function(t){if(!Ts(t))return{};if(Ct)return Ct(t);e.prototype=t;var n=new e;return e.prototype=i,n}}();function gr(){}function yr(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=i}function br(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=V,this.__views__=[]}function wr(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Ir(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Cr(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Sr(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new Cr;++t<n;)this.add(e[t])}function kr(e){var t=this.__data__=new Ir(e);this.size=t.size}function Er(e,t){var n=bs(e),r=!n&&ys(e),i=!n&&!r&&Ss(e),o=!n&&!r&&!i&&Bs(e),a=n||r||i||o,s=a?An(e.length,rt):[],u=s.length;for(var c in e)!t&&!lt.call(e,c)||a&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Qo(c,u))||s.push(c);return s}function xr(e){var t=e.length;return t?e[Si(0,t-1)]:i}function Ar(e,t){return la(io(e),Fr(t,0,e.length))}function Mr(e){return la(io(e))}function Tr(e,t,n){(n!==i&&!vs(e[t],n)||n===i&&!(t in e))&&Dr(e,t,n)}function Nr(e,t,n){var r=e[t];lt.call(e,t)&&vs(r,n)&&(n!==i||t in e)||Dr(e,t,n)}function _r(e,t){for(var n=e.length;n--;)if(vs(e[n][0],t))return n;return-1}function Rr(e,t,n,r){return Wr(e,(function(e,i,o){t(r,e,n(e),o)})),r}function Or(e,t){return e&&oo(t,au(t),e)}function Dr(e,t,n){"__proto__"==t&&Mt?Mt(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function Lr(e,t){for(var r=-1,o=t.length,a=n(o),s=null==e;++r<o;)a[r]=s?i:tu(e,t[r]);return a}function Fr(e,t,n){return e===e&&(n!==i&&(e=e<=n?e:n),t!==i&&(e=e>=t?e:t)),e}function Vr(e,t,n,r,o,a){var s,u=t&f,c=t&h,l=t&p;if(n&&(s=o?n(e,r,o,a):n(e)),s!==i)return s;if(!Ts(e))return e;var d=bs(e);if(d){if(s=function(e){var t=e.length,n=new e.constructor(t);t&&"string"==typeof e[0]&&lt.call(e,"index")&&(n.index=e.index,n.input=e.input);return n}(e),!u)return io(e,s)}else{var v=Ho(e),m=v==Q||v==Y;if(Ss(e))return Ji(e,u);if(v==$||v==W||m&&!o){if(s=c||m?{}:qo(e),!u)return c?function(e,t){return oo(e,Go(e),t)}(e,function(e,t){return e&&oo(t,su(t),e)}(s,e)):function(e,t){return oo(e,Uo(e),t)}(e,Or(s,e))}else{if(!Bt[v])return o?e:{};s=function(e,t,n){var r=e.constructor;switch(t){case ce:return $i(e);case H:case z:return new r(+e);case le:return function(e,t){var n=t?$i(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case de:case fe:case he:case pe:case ve:case me:case ge:case ye:case be:return eo(e,n);case K:return new r;case X:case ie:return new r(e);case ne:return function(e){var t=new e.constructor(e.source,He.exec(e));return t.lastIndex=e.lastIndex,t}(e);case re:return new r;case oe:return i=e,hr?tt(hr.call(i)):{}}var i}(e,v,u)}}a||(a=new kr);var g=a.get(e);if(g)return g;a.set(e,s),Ls(e)?e.forEach((function(r){s.add(Vr(r,t,n,r,e,a))})):_s(e)&&e.forEach((function(r,i){s.set(i,Vr(r,t,n,i,e,a))}));var y=d?i:(l?c?Do:Oo:c?su:au)(e);return on(y||e,(function(r,i){y&&(r=e[i=r]),Nr(s,i,Vr(r,t,n,i,e,a))})),s}function Br(e,t,n){var r=n.length;if(null==e)return!r;for(e=tt(e);r--;){var o=n[r],a=t[o],s=e[o];if(s===i&&!(o in e)||!a(s))return!1}return!0}function jr(e,t,n){if("function"!=typeof e)throw new it(s);return aa((function(){e.apply(i,n)}),t)}function Pr(e,t,n,r){var i=-1,a=cn,s=!0,u=e.length,c=[],l=t.length;if(!u)return c;n&&(t=dn(t,Tn(n))),r?(a=ln,s=!1):t.length>=o&&(a=_n,s=!1,t=new Sr(t));e:for(;++i<u;){var d=e[i],f=null==n?d:n(d);if(d=r||0!==d?d:0,s&&f===f){for(var h=l;h--;)if(t[h]===f)continue e;c.push(d)}else a(t,f,r)||c.push(d)}return c}vr.templateSettings={escape:Ae,evaluate:Me,interpolate:Te,variable:"",imports:{_:vr}},vr.prototype=gr.prototype,vr.prototype.constructor=vr,yr.prototype=mr(gr.prototype),yr.prototype.constructor=yr,br.prototype=mr(gr.prototype),br.prototype.constructor=br,wr.prototype.clear=function(){this.__data__=ir?ir(null):{},this.size=0},wr.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},wr.prototype.get=function(e){var t=this.__data__;if(ir){var n=t[e];return n===c?i:n}return lt.call(t,e)?t[e]:i},wr.prototype.has=function(e){var t=this.__data__;return ir?t[e]!==i:lt.call(t,e)},wr.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=ir&&t===i?c:t,this},Ir.prototype.clear=function(){this.__data__=[],this.size=0},Ir.prototype.delete=function(e){var t=this.__data__,n=_r(t,e);return!(n<0)&&(n==t.length-1?t.pop():kt.call(t,n,1),--this.size,!0)},Ir.prototype.get=function(e){var t=this.__data__,n=_r(t,e);return n<0?i:t[n][1]},Ir.prototype.has=function(e){return _r(this.__data__,e)>-1},Ir.prototype.set=function(e,t){var n=this.__data__,r=_r(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},Cr.prototype.clear=function(){this.size=0,this.__data__={hash:new wr,map:new(er||Ir),string:new wr}},Cr.prototype.delete=function(e){var t=jo(this,e).delete(e);return this.size-=t?1:0,t},Cr.prototype.get=function(e){return jo(this,e).get(e)},Cr.prototype.has=function(e){return jo(this,e).has(e)},Cr.prototype.set=function(e,t){var n=jo(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},Sr.prototype.add=Sr.prototype.push=function(e){return this.__data__.set(e,c),this},Sr.prototype.has=function(e){return this.__data__.has(e)},kr.prototype.clear=function(){this.__data__=new Ir,this.size=0},kr.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},kr.prototype.get=function(e){return this.__data__.get(e)},kr.prototype.has=function(e){return this.__data__.has(e)},kr.prototype.set=function(e,t){var n=this.__data__;if(n instanceof Ir){var r=n.__data__;if(!er||r.length<o-1)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new Cr(r)}return n.set(e,t),this.size=n.size,this};var Wr=uo(Yr),Ur=uo(Kr,!0);function Gr(e,t){var n=!0;return Wr(e,(function(e,r,i){return n=!!t(e,r,i)})),n}function Hr(e,t,n){for(var r=-1,o=e.length;++r<o;){var a=e[r],s=t(a);if(null!=s&&(u===i?s===s&&!Vs(s):n(s,u)))var u=s,c=a}return c}function zr(e,t){var n=[];return Wr(e,(function(e,r,i){t(e,r,i)&&n.push(e)})),n}function qr(e,t,n,r,i){var o=-1,a=e.length;for(n||(n=Zo),i||(i=[]);++o<a;){var s=e[o];t>0&&n(s)?t>1?qr(s,t-1,n,r,i):fn(i,s):r||(i[i.length]=s)}return i}var Zr=co(),Qr=co(!0);function Yr(e,t){return e&&Zr(e,t,au)}function Kr(e,t){return e&&Qr(e,t,au)}function Xr(e,t){return un(t,(function(t){return xs(e[t])}))}function Jr(e,t){for(var n=0,r=(t=Qi(t,e)).length;null!=e&&n<r;)e=e[fa(t[n++])];return n&&n==r?e:i}function $r(e,t,n){var r=t(e);return bs(e)?r:fn(r,n(e))}function ei(e){return null==e?e===i?ae:J:At&&At in tt(e)?function(e){var t=lt.call(e,At),n=e[At];try{e[At]=i;var r=!0}catch(a){}var o=ht.call(e);r&&(t?e[At]=n:delete e[At]);return o}(e):function(e){return ht.call(e)}(e)}function ti(e,t){return e>t}function ni(e,t){return null!=e&&lt.call(e,t)}function ri(e,t){return null!=e&&t in tt(e)}function ii(e,t,r){for(var o=r?ln:cn,a=e[0].length,s=e.length,u=s,c=n(s),l=1/0,d=[];u--;){var f=e[u];u&&t&&(f=dn(f,Tn(t))),l=Qn(f.length,l),c[u]=!r&&(t||a>=120&&f.length>=120)?new Sr(u&&f):i}f=e[0];var h=-1,p=c[0];e:for(;++h<a&&d.length<l;){var v=f[h],m=t?t(v):v;if(v=r||0!==v?v:0,!(p?_n(p,m):o(d,m,r))){for(u=s;--u;){var g=c[u];if(!(g?_n(g,m):o(e[u],m,r)))continue e}p&&p.push(m),d.push(v)}}return d}function oi(e,t,n){var r=null==(e=ra(e,t=Qi(t,e)))?e:e[fa(Ea(t))];return null==r?i:nn(r,e,n)}function ai(e){return Ns(e)&&ei(e)==W}function si(e,t,n,r,o){return e===t||(null==e||null==t||!Ns(e)&&!Ns(t)?e!==e&&t!==t:function(e,t,n,r,o,a){var s=bs(e),u=bs(t),c=s?U:Ho(e),l=u?U:Ho(t),d=(c=c==W?$:c)==$,f=(l=l==W?$:l)==$,h=c==l;if(h&&Ss(e)){if(!Ss(t))return!1;s=!0,d=!1}if(h&&!d)return a||(a=new kr),s||Bs(e)?_o(e,t,n,r,o,a):function(e,t,n,r,i,o,a){switch(n){case le:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case ce:return!(e.byteLength!=t.byteLength||!o(new bt(e),new bt(t)));case H:case z:case X:return vs(+e,+t);case Z:return e.name==t.name&&e.message==t.message;case ne:case ie:return e==t+"";case K:var s=Bn;case re:var u=r&v;if(s||(s=Wn),e.size!=t.size&&!u)return!1;var c=a.get(e);if(c)return c==t;r|=m,a.set(e,t);var l=_o(s(e),s(t),r,i,o,a);return a.delete(e),l;case oe:if(hr)return hr.call(e)==hr.call(t)}return!1}(e,t,c,n,r,o,a);if(!(n&v)){var p=d&&lt.call(e,"__wrapped__"),g=f&&lt.call(t,"__wrapped__");if(p||g){var y=p?e.value():e,b=g?t.value():t;return a||(a=new kr),o(y,b,n,r,a)}}if(!h)return!1;return a||(a=new kr),function(e,t,n,r,o,a){var s=n&v,u=Oo(e),c=u.length,l=Oo(t),d=l.length;if(c!=d&&!s)return!1;var f=c;for(;f--;){var h=u[f];if(!(s?h in t:lt.call(t,h)))return!1}var p=a.get(e),m=a.get(t);if(p&&m)return p==t&&m==e;var g=!0;a.set(e,t),a.set(t,e);var y=s;for(;++f<c;){var b=e[h=u[f]],w=t[h];if(r)var I=s?r(w,b,h,t,e,a):r(b,w,h,e,t,a);if(!(I===i?b===w||o(b,w,n,r,a):I)){g=!1;break}y||(y="constructor"==h)}if(g&&!y){var C=e.constructor,S=t.constructor;C==S||!("constructor"in e)||!("constructor"in t)||"function"==typeof C&&C instanceof C&&"function"==typeof S&&S instanceof S||(g=!1)}return a.delete(e),a.delete(t),g}(e,t,n,r,o,a)}(e,t,n,r,si,o))}function ui(e,t,n,r){var o=n.length,a=o,s=!r;if(null==e)return!a;for(e=tt(e);o--;){var u=n[o];if(s&&u[2]?u[1]!==e[u[0]]:!(u[0]in e))return!1}for(;++o<a;){var c=(u=n[o])[0],l=e[c],d=u[1];if(s&&u[2]){if(l===i&&!(c in e))return!1}else{var f=new kr;if(r)var h=r(l,d,c,e,t,f);if(!(h===i?si(d,l,v|m,r,f):h))return!1}}return!0}function ci(e){return!(!Ts(e)||(t=e,ft&&ft in t))&&(xs(e)?mt:Ze).test(ha(e));var t}function li(e){return"function"==typeof e?e:null==e?Ru:"object"==typeof e?bs(e)?mi(e[0],e[1]):vi(e):Wu(e)}function di(e){if(!$o(e))return mn(e);var t=[];for(var n in tt(e))lt.call(e,n)&&"constructor"!=n&&t.push(n);return t}function fi(e){if(!Ts(e))return function(e){var t=[];if(null!=e)for(var n in tt(e))t.push(n);return t}(e);var t=$o(e),n=[];for(var r in e)("constructor"!=r||!t&&lt.call(e,r))&&n.push(r);return n}function hi(e,t){return e<t}function pi(e,t){var r=-1,i=Is(e)?n(e.length):[];return Wr(e,(function(e,n,o){i[++r]=t(e,n,o)})),i}function vi(e){var t=Po(e);return 1==t.length&&t[0][2]?ta(t[0][0],t[0][1]):function(n){return n===e||ui(n,e,t)}}function mi(e,t){return Ko(e)&&ea(t)?ta(fa(e),t):function(n){var r=tu(n,e);return r===i&&r===t?nu(n,e):si(t,r,v|m)}}function gi(e,t,n,r,o){e!==t&&Zr(t,(function(a,s){if(o||(o=new kr),Ts(a))!function(e,t,n,r,o,a,s){var u=ia(e,n),c=ia(t,n),l=s.get(c);if(l)return void Tr(e,n,l);var d=a?a(u,c,n+"",e,t,s):i,f=d===i;if(f){var h=bs(c),p=!h&&Ss(c),v=!h&&!p&&Bs(c);d=c,h||p||v?bs(u)?d=u:Cs(u)?d=io(u):p?(f=!1,d=Ji(c,!0)):v?(f=!1,d=eo(c,!0)):d=[]:Os(c)||ys(c)?(d=u,ys(u)?d=qs(u):Ts(u)&&!xs(u)||(d=qo(c))):f=!1}f&&(s.set(c,d),o(d,c,r,a,s),s.delete(c));Tr(e,n,d)}(e,t,s,n,gi,r,o);else{var u=r?r(ia(e,s),a,s+"",e,t,o):i;u===i&&(u=a),Tr(e,s,u)}}),su)}function yi(e,t){var n=e.length;if(n)return Qo(t+=t<0?n:0,n)?e[t]:i}function bi(e,t,n){t=t.length?dn(t,(function(e){return bs(e)?function(t){return Jr(t,1===e.length?e[0]:e)}:e})):[Ru];var r=-1;t=dn(t,Tn(Bo()));var i=pi(e,(function(e,n,i){var o=dn(t,(function(t){return t(e)}));return{criteria:o,index:++r,value:e}}));return function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}(i,(function(e,t){return function(e,t,n){var r=-1,i=e.criteria,o=t.criteria,a=i.length,s=n.length;for(;++r<a;){var u=to(i[r],o[r]);if(u)return r>=s?u:u*("desc"==n[r]?-1:1)}return e.index-t.index}(e,t,n)}))}function wi(e,t,n){for(var r=-1,i=t.length,o={};++r<i;){var a=t[r],s=Jr(e,a);n(s,a)&&Mi(o,Qi(a,e),s)}return o}function Ii(e,t,n,r){var i=r?wn:bn,o=-1,a=t.length,s=e;for(e===t&&(t=io(t)),n&&(s=dn(e,Tn(n)));++o<a;)for(var u=0,c=t[o],l=n?n(c):c;(u=i(s,l,u,r))>-1;)s!==e&&kt.call(s,u,1),kt.call(e,u,1);return e}function Ci(e,t){for(var n=e?t.length:0,r=n-1;n--;){var i=t[n];if(n==r||i!==o){var o=i;Qo(i)?kt.call(e,i,1):Pi(e,i)}}return e}function Si(e,t){return e+Gt(Xn()*(t-e+1))}function ki(e,t){var n="";if(!e||t<1||t>D)return n;do{t%2&&(n+=e),(t=Gt(t/2))&&(e+=e)}while(t);return n}function Ei(e,t){return sa(na(e,t,Ru),e+"")}function xi(e){return xr(vu(e))}function Ai(e,t){var n=vu(e);return la(n,Fr(t,0,n.length))}function Mi(e,t,n,r){if(!Ts(e))return e;for(var o=-1,a=(t=Qi(t,e)).length,s=a-1,u=e;null!=u&&++o<a;){var c=fa(t[o]),l=n;if("__proto__"===c||"constructor"===c||"prototype"===c)return e;if(o!=s){var d=u[c];(l=r?r(d,c,u):i)===i&&(l=Ts(d)?d:Qo(t[o+1])?[]:{})}Nr(u,c,l),u=u[c]}return e}var Ti=or?function(e,t){return or.set(e,t),e}:Ru,Ni=Mt?function(e,t){return Mt(e,"toString",{configurable:!0,enumerable:!1,value:Tu(t),writable:!0})}:Ru;function _i(e){return la(vu(e))}function Ri(e,t,r){var i=-1,o=e.length;t<0&&(t=-t>o?0:o+t),(r=r>o?o:r)<0&&(r+=o),o=t>r?0:r-t>>>0,t>>>=0;for(var a=n(o);++i<o;)a[i]=e[i+t];return a}function Oi(e,t){var n;return Wr(e,(function(e,r,i){return!(n=t(e,r,i))})),!!n}function Di(e,t,n){var r=0,i=null==e?r:e.length;if("number"==typeof t&&t===t&&i<=j){for(;r<i;){var o=r+i>>>1,a=e[o];null!==a&&!Vs(a)&&(n?a<=t:a<t)?r=o+1:i=o}return i}return Li(e,t,Ru,n)}function Li(e,t,n,r){var o=0,a=null==e?0:e.length;if(0===a)return 0;for(var s=(t=n(t))!==t,u=null===t,c=Vs(t),l=t===i;o<a;){var d=Gt((o+a)/2),f=n(e[d]),h=f!==i,p=null===f,v=f===f,m=Vs(f);if(s)var g=r||v;else g=l?v&&(r||h):u?v&&h&&(r||!p):c?v&&h&&!p&&(r||!m):!p&&!m&&(r?f<=t:f<t);g?o=d+1:a=d}return Qn(a,B)}function Fi(e,t){for(var n=-1,r=e.length,i=0,o=[];++n<r;){var a=e[n],s=t?t(a):a;if(!n||!vs(s,u)){var u=s;o[i++]=0===a?0:a}}return o}function Vi(e){return"number"==typeof e?e:Vs(e)?F:+e}function Bi(e){if("string"==typeof e)return e;if(bs(e))return dn(e,Bi)+"";if(Vs(e))return pr?pr.call(e):"";var t=e+"";return"0"==t&&1/e==-O?"-0":t}function ji(e,t,n){var r=-1,i=cn,a=e.length,s=!0,u=[],c=u;if(n)s=!1,i=ln;else if(a>=o){var l=t?null:Eo(e);if(l)return Wn(l);s=!1,i=_n,c=new Sr}else c=t?[]:u;e:for(;++r<a;){var d=e[r],f=t?t(d):d;if(d=n||0!==d?d:0,s&&f===f){for(var h=c.length;h--;)if(c[h]===f)continue e;t&&c.push(f),u.push(d)}else i(c,f,n)||(c!==u&&c.push(f),u.push(d))}return u}function Pi(e,t){return null==(e=ra(e,t=Qi(t,e)))||delete e[fa(Ea(t))]}function Wi(e,t,n,r){return Mi(e,t,n(Jr(e,t)),r)}function Ui(e,t,n,r){for(var i=e.length,o=r?i:-1;(r?o--:++o<i)&&t(e[o],o,e););return n?Ri(e,r?0:o,r?o+1:i):Ri(e,r?o+1:0,r?i:o)}function Gi(e,t){var n=e;return n instanceof br&&(n=n.value()),hn(t,(function(e,t){return t.func.apply(t.thisArg,fn([e],t.args))}),n)}function Hi(e,t,r){var i=e.length;if(i<2)return i?ji(e[0]):[];for(var o=-1,a=n(i);++o<i;)for(var s=e[o],u=-1;++u<i;)u!=o&&(a[o]=Pr(a[o]||s,e[u],t,r));return ji(qr(a,1),t,r)}function zi(e,t,n){for(var r=-1,o=e.length,a=t.length,s={};++r<o;){var u=r<a?t[r]:i;n(s,e[r],u)}return s}function qi(e){return Cs(e)?e:[]}function Zi(e){return"function"==typeof e?e:Ru}function Qi(e,t){return bs(e)?e:Ko(e,t)?[e]:da(Zs(e))}var Yi=Ei;function Ki(e,t,n){var r=e.length;return n=n===i?r:n,!t&&n>=r?e:Ri(e,t,n)}var Xi=_t||function(e){return Ht.clearTimeout(e)};function Ji(e,t){if(t)return e.slice();var n=e.length,r=wt?wt(n):new e.constructor(n);return e.copy(r),r}function $i(e){var t=new e.constructor(e.byteLength);return new bt(t).set(new bt(e)),t}function eo(e,t){var n=t?$i(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function to(e,t){if(e!==t){var n=e!==i,r=null===e,o=e===e,a=Vs(e),s=t!==i,u=null===t,c=t===t,l=Vs(t);if(!u&&!l&&!a&&e>t||a&&s&&c&&!u&&!l||r&&s&&c||!n&&c||!o)return 1;if(!r&&!a&&!l&&e<t||l&&n&&o&&!r&&!a||u&&n&&o||!s&&o||!c)return-1}return 0}function no(e,t,r,i){for(var o=-1,a=e.length,s=r.length,u=-1,c=t.length,l=kn(a-s,0),d=n(c+l),f=!i;++u<c;)d[u]=t[u];for(;++o<s;)(f||o<a)&&(d[r[o]]=e[o]);for(;l--;)d[u++]=e[o++];return d}function ro(e,t,r,i){for(var o=-1,a=e.length,s=-1,u=r.length,c=-1,l=t.length,d=kn(a-u,0),f=n(d+l),h=!i;++o<d;)f[o]=e[o];for(var p=o;++c<l;)f[p+c]=t[c];for(;++s<u;)(h||o<a)&&(f[p+r[s]]=e[o++]);return f}function io(e,t){var r=-1,i=e.length;for(t||(t=n(i));++r<i;)t[r]=e[r];return t}function oo(e,t,n,r){var o=!n;n||(n={});for(var a=-1,s=t.length;++a<s;){var u=t[a],c=r?r(n[u],e[u],u,n,e):i;c===i&&(c=e[u]),o?Dr(n,u,c):Nr(n,u,c)}return n}function ao(e,t){return function(n,r){var i=bs(n)?rn:Rr,o=t?t():{};return i(n,e,Bo(r,2),o)}}function so(e){return Ei((function(t,n){var r=-1,o=n.length,a=o>1?n[o-1]:i,s=o>2?n[2]:i;for(a=e.length>3&&"function"==typeof a?(o--,a):i,s&&Yo(n[0],n[1],s)&&(a=o<3?i:a,o=1),t=tt(t);++r<o;){var u=n[r];u&&e(t,u,r,a)}return t}))}function uo(e,t){return function(n,r){if(null==n)return n;if(!Is(n))return e(n,r);for(var i=n.length,o=t?i:-1,a=tt(n);(t?o--:++o<i)&&!1!==r(a[o],o,a););return n}}function co(e){return function(t,n,r){for(var i=-1,o=tt(t),a=r(t),s=a.length;s--;){var u=a[e?s:++i];if(!1===n(o[u],u,o))break}return t}}function lo(e){return function(t){var n=Vn(t=Zs(t))?Hn(t):i,r=n?n[0]:t.charAt(0),o=n?Ki(n,1).join(""):t.slice(1);return r[e]()+o}}function fo(e){return function(t){return hn(xu(yu(t).replace(Tt,"")),e,"")}}function ho(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=mr(e.prototype),r=e.apply(n,t);return Ts(r)?r:n}}function po(e){return function(t,n,r){var o=tt(t);if(!Is(t)){var a=Bo(n,3);t=au(t),n=function(e){return a(o[e],e,o)}}var s=e(t,n,r);return s>-1?o[a?t[s]:s]:i}}function vo(e){return Ro((function(t){var n=t.length,r=n,o=yr.prototype.thru;for(e&&t.reverse();r--;){var a=t[r];if("function"!=typeof a)throw new it(s);if(o&&!u&&"wrapper"==Fo(a))var u=new yr([],!0)}for(r=u?r:n;++r<n;){var c=Fo(a=t[r]),l="wrapper"==c?Lo(a):i;u=l&&Xo(l[0])&&l[1]==(k|w|C|E)&&!l[4].length&&1==l[9]?u[Fo(l[0])].apply(u,l[3]):1==a.length&&Xo(a)?u[c]():u.thru(a)}return function(){var e=arguments,r=e[0];if(u&&1==e.length&&bs(r))return u.plant(r).value();for(var i=0,o=n?t[i].apply(this,e):r;++i<n;)o=t[i].call(this,o);return o}}))}function mo(e,t,r,o,a,s,u,c,l,d){var f=t&k,h=t&g,p=t&y,v=t&(w|I),m=t&x,b=p?i:ho(e);return function g(){for(var y=arguments.length,w=n(y),I=y;I--;)w[I]=arguments[I];if(v)var C=Vo(g),S=function(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}(w,C);if(o&&(w=no(w,o,a,v)),s&&(w=ro(w,s,u,v)),y-=S,v&&y<d){var k=Pn(w,C);return So(e,t,mo,g.placeholder,r,w,k,c,l,d-y)}var E=h?r:this,x=p?E[e]:e;return y=w.length,c?w=function(e,t){var n=e.length,r=Qn(t.length,n),o=io(e);for(;r--;){var a=t[r];e[r]=Qo(a,n)?o[a]:i}return e}(w,c):m&&y>1&&w.reverse(),f&&l<y&&(w.length=l),this&&this!==Ht&&this instanceof g&&(x=b||ho(x)),x.apply(E,w)}}function go(e,t){return function(n,r){return function(e,t,n,r){return Yr(e,(function(e,i,o){t(r,n(e),i,o)})),r}(n,e,t(r),{})}}function yo(e,t){return function(n,r){var o;if(n===i&&r===i)return t;if(n!==i&&(o=n),r!==i){if(o===i)return r;"string"==typeof n||"string"==typeof r?(n=Bi(n),r=Bi(r)):(n=Vi(n),r=Vi(r)),o=e(n,r)}return o}}function bo(e){return Ro((function(t){return t=dn(t,Tn(Bo())),Ei((function(n){var r=this;return e(t,(function(e){return nn(e,r,n)}))}))}))}function wo(e,t){var n=(t=t===i?" ":Bi(t)).length;if(n<2)return n?ki(t,e):t;var r=ki(t,Ut(e/Gn(t)));return Vn(t)?Ki(Hn(r),0,e).join(""):r.slice(0,e)}function Io(e){return function(t,r,o){return o&&"number"!=typeof o&&Yo(t,r,o)&&(r=o=i),t=Us(t),r===i?(r=t,t=0):r=Us(r),function(e,t,r,i){for(var o=-1,a=kn(Ut((t-e)/(r||1)),0),s=n(a);a--;)s[i?a:++o]=e,e+=r;return s}(t,r,o=o===i?t<r?1:-1:Us(o),e)}}function Co(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=zs(t),n=zs(n)),e(t,n)}}function So(e,t,n,r,o,a,s,u,c,l){var d=t&w;t|=d?C:S,(t&=~(d?S:C))&b||(t&=~(g|y));var f=[e,t,o,d?a:i,d?s:i,d?i:a,d?i:s,u,c,l],h=n.apply(i,f);return Xo(e)&&oa(h,f),h.placeholder=r,ua(h,e,t)}function ko(e){var t=et[e];return function(e,n){if(e=zs(e),(n=null==n?0:Qn(Gs(n),292))&&Qt(e)){var r=(Zs(e)+"e").split("e");return+((r=(Zs(t(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return t(e)}}var Eo=nr&&1/Wn(new nr([,-0]))[1]==O?function(e){return new nr(e)}:Vu;function xo(e){return function(t){var n=Ho(t);return n==K?Bn(t):n==re?Un(t):function(e,t){return dn(t,(function(t){return[t,e[t]]}))}(t,e(t))}}function Ao(e,t,r,o,a,u,c,l){var f=t&y;if(!f&&"function"!=typeof e)throw new it(s);var h=o?o.length:0;if(h||(t&=~(C|S),o=a=i),c=c===i?c:kn(Gs(c),0),l=l===i?l:Gs(l),h-=a?a.length:0,t&S){var p=o,v=a;o=a=i}var m=f?i:Lo(e),x=[e,t,r,o,a,p,v,u,c,l];if(m&&function(e,t){var n=e[1],r=t[1],i=n|r,o=i<(g|y|k),a=r==k&&n==w||r==k&&n==E&&e[7].length<=t[8]||r==(k|E)&&t[7].length<=t[8]&&n==w;if(!o&&!a)return e;r&g&&(e[2]=t[2],i|=n&g?0:b);var s=t[3];if(s){var u=e[3];e[3]=u?no(u,s,t[4]):s,e[4]=u?Pn(e[3],d):t[4]}(s=t[5])&&(u=e[5],e[5]=u?ro(u,s,t[6]):s,e[6]=u?Pn(e[5],d):t[6]);(s=t[7])&&(e[7]=s);r&k&&(e[8]=null==e[8]?t[8]:Qn(e[8],t[8]));null==e[9]&&(e[9]=t[9]);e[0]=t[0],e[1]=i}(x,m),e=x[0],t=x[1],r=x[2],o=x[3],a=x[4],!(l=x[9]=x[9]===i?f?0:e.length:kn(x[9]-h,0))&&t&(w|I)&&(t&=~(w|I)),t&&t!=g)A=t==w||t==I?function(e,t,r){var o=ho(e);return function a(){for(var s=arguments.length,u=n(s),c=s,l=Vo(a);c--;)u[c]=arguments[c];var d=s<3&&u[0]!==l&&u[s-1]!==l?[]:Pn(u,l);return(s-=d.length)<r?So(e,t,mo,a.placeholder,i,u,d,i,i,r-s):nn(this&&this!==Ht&&this instanceof a?o:e,this,u)}}(e,t,l):t!=C&&t!=(g|C)||a.length?mo.apply(i,x):function(e,t,r,i){var o=t&g,a=ho(e);return function t(){for(var s=-1,u=arguments.length,c=-1,l=i.length,d=n(l+u),f=this&&this!==Ht&&this instanceof t?a:e;++c<l;)d[c]=i[c];for(;u--;)d[c++]=arguments[++s];return nn(f,o?r:this,d)}}(e,t,r,o);else var A=function(e,t,n){var r=t&g,i=ho(e);return function t(){return(this&&this!==Ht&&this instanceof t?i:e).apply(r?n:this,arguments)}}(e,t,r);return ua((m?Ti:oa)(A,x),e,t)}function Mo(e,t,n,r){return e===i||vs(e,st[n])&&!lt.call(r,n)?t:e}function To(e,t,n,r,o,a){return Ts(e)&&Ts(t)&&(a.set(t,e),gi(e,t,i,To,a),a.delete(t)),e}function No(e){return Os(e)?i:e}function _o(e,t,n,r,o,a){var s=n&v,u=e.length,c=t.length;if(u!=c&&!(s&&c>u))return!1;var l=a.get(e),d=a.get(t);if(l&&d)return l==t&&d==e;var f=-1,h=!0,p=n&m?new Sr:i;for(a.set(e,t),a.set(t,e);++f<u;){var g=e[f],y=t[f];if(r)var b=s?r(y,g,f,t,e,a):r(g,y,f,e,t,a);if(b!==i){if(b)continue;h=!1;break}if(p){if(!vn(t,(function(e,t){if(!_n(p,t)&&(g===e||o(g,e,n,r,a)))return p.push(t)}))){h=!1;break}}else if(g!==y&&!o(g,y,n,r,a)){h=!1;break}}return a.delete(e),a.delete(t),h}function Ro(e){return sa(na(e,i,wa),e+"")}function Oo(e){return $r(e,au,Uo)}function Do(e){return $r(e,su,Go)}var Lo=or?function(e){return or.get(e)}:Vu;function Fo(e){for(var t=e.name+"",n=ar[t],r=lt.call(ar,t)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==e)return i.name}return t}function Vo(e){return(lt.call(vr,"placeholder")?vr:e).placeholder}function Bo(){var e=vr.iteratee||Ou;return e=e===Ou?li:e,arguments.length?e(arguments[0],arguments[1]):e}function jo(e,t){var n=e.__data__;return function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}(t)?n["string"==typeof t?"string":"hash"]:n.map}function Po(e){for(var t=au(e),n=t.length;n--;){var r=t[n],i=e[r];t[n]=[r,i,ea(i)]}return t}function Wo(e,t){var n=function(e,t){return null==e?i:e[t]}(e,t);return ci(n)?n:i}var Uo=zt?function(e){return null==e?[]:(e=tt(e),un(zt(e),(function(t){return St.call(e,t)})))}:Hu,Go=zt?function(e){for(var t=[];e;)fn(t,Uo(e)),e=It(e);return t}:Hu,Ho=ei;function zo(e,t,n){for(var r=-1,i=(t=Qi(t,e)).length,o=!1;++r<i;){var a=fa(t[r]);if(!(o=null!=e&&n(e,a)))break;e=e[a]}return o||++r!=i?o:!!(i=null==e?0:e.length)&&Ms(i)&&Qo(a,i)&&(bs(e)||ys(e))}function qo(e){return"function"!=typeof e.constructor||$o(e)?{}:mr(It(e))}function Zo(e){return bs(e)||ys(e)||!!(Et&&e&&e[Et])}function Qo(e,t){var n=typeof e;return!!(t=null==t?D:t)&&("number"==n||"symbol"!=n&&Ye.test(e))&&e>-1&&e%1==0&&e<t}function Yo(e,t,n){if(!Ts(n))return!1;var r=typeof t;return!!("number"==r?Is(n)&&Qo(t,n.length):"string"==r&&t in n)&&vs(n[t],e)}function Ko(e,t){if(bs(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!Vs(e))||(_e.test(e)||!Ne.test(e)||null!=t&&e in tt(t))}function Xo(e){var t=Fo(e),n=vr[t];if("function"!=typeof n||!(t in br.prototype))return!1;if(e===n)return!0;var r=Lo(n);return!!r&&e===r[0]}($n&&Ho(new $n(new ArrayBuffer(1)))!=le||er&&Ho(new er)!=K||tr&&Ho(tr.resolve())!=ee||nr&&Ho(new nr)!=re||rr&&Ho(new rr)!=se)&&(Ho=function(e){var t=ei(e),n=t==$?e.constructor:i,r=n?ha(n):"";if(r)switch(r){case sr:return le;case ur:return K;case cr:return ee;case lr:return re;case dr:return se}return t});var Jo=ut?xs:zu;function $o(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||st)}function ea(e){return e===e&&!Ts(e)}function ta(e,t){return function(n){return null!=n&&(n[e]===t&&(t!==i||e in tt(n)))}}function na(e,t,r){return t=kn(t===i?e.length-1:t,0),function(){for(var i=arguments,o=-1,a=kn(i.length-t,0),s=n(a);++o<a;)s[o]=i[t+o];o=-1;for(var u=n(t+1);++o<t;)u[o]=i[o];return u[t]=r(s),nn(e,this,u)}}function ra(e,t){return t.length<2?e:Jr(e,Ri(t,0,-1))}function ia(e,t){if(("constructor"!==t||"function"!==typeof e[t])&&"__proto__"!=t)return e[t]}var oa=ca(Ti),aa=jt||function(e,t){return Ht.setTimeout(e,t)},sa=ca(Ni);function ua(e,t,n){var r=t+"";return sa(e,function(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(n>1?"& ":"")+t[r],t=t.join(n>2?", ":" "),e.replace(Ve,"{\n/* [wrapped with "+t+"] */\n")}(r,function(e,t){return on(P,(function(n){var r="_."+n[0];t&n[1]&&!cn(e,r)&&e.push(r)})),e.sort()}(function(e){var t=e.match(Be);return t?t[1].split(je):[]}(r),n)))}function ca(e){var t=0,n=0;return function(){var r=Yn(),o=N-(r-n);if(n=r,o>0){if(++t>=T)return arguments[0]}else t=0;return e.apply(i,arguments)}}function la(e,t){var n=-1,r=e.length,o=r-1;for(t=t===i?r:t;++n<t;){var a=Si(n,o),s=e[a];e[a]=e[n],e[n]=s}return e.length=t,e}var da=function(e){var t=cs(e,(function(e){return n.size===l&&n.clear(),e})),n=t.cache;return t}((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(Re,(function(e,n,r,i){t.push(r?i.replace(Ue,"$1"):n||e)})),t}));function fa(e){if("string"==typeof e||Vs(e))return e;var t=e+"";return"0"==t&&1/e==-O?"-0":t}function ha(e){if(null!=e){try{return ct.call(e)}catch(t){}try{return e+""}catch(t){}}return""}function pa(e){if(e instanceof br)return e.clone();var t=new yr(e.__wrapped__,e.__chain__);return t.__actions__=io(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var va=Ei((function(e,t){return Cs(e)?Pr(e,qr(t,1,Cs,!0)):[]})),ma=Ei((function(e,t){var n=Ea(t);return Cs(n)&&(n=i),Cs(e)?Pr(e,qr(t,1,Cs,!0),Bo(n,2)):[]})),ga=Ei((function(e,t){var n=Ea(t);return Cs(n)&&(n=i),Cs(e)?Pr(e,qr(t,1,Cs,!0),i,n):[]}));function ya(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=null==n?0:Gs(n);return i<0&&(i=kn(r+i,0)),yn(e,Bo(t,3),i)}function ba(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r-1;return n!==i&&(o=Gs(n),o=n<0?kn(r+o,0):Qn(o,r-1)),yn(e,Bo(t,3),o,!0)}function wa(e){return(null==e?0:e.length)?qr(e,1):[]}function Ia(e){return e&&e.length?e[0]:i}var Ca=Ei((function(e){var t=dn(e,qi);return t.length&&t[0]===e[0]?ii(t):[]})),Sa=Ei((function(e){var t=Ea(e),n=dn(e,qi);return t===Ea(n)?t=i:n.pop(),n.length&&n[0]===e[0]?ii(n,Bo(t,2)):[]})),ka=Ei((function(e){var t=Ea(e),n=dn(e,qi);return(t="function"==typeof t?t:i)&&n.pop(),n.length&&n[0]===e[0]?ii(n,i,t):[]}));function Ea(e){var t=null==e?0:e.length;return t?e[t-1]:i}var xa=Ei(Aa);function Aa(e,t){return e&&e.length&&t&&t.length?Ii(e,t):e}var Ma=Ro((function(e,t){var n=null==e?0:e.length,r=Lr(e,t);return Ci(e,dn(t,(function(e){return Qo(e,n)?+e:e})).sort(to)),r}));function Ta(e){return null==e?e:Jn.call(e)}var Na=Ei((function(e){return ji(qr(e,1,Cs,!0))})),_a=Ei((function(e){var t=Ea(e);return Cs(t)&&(t=i),ji(qr(e,1,Cs,!0),Bo(t,2))})),Ra=Ei((function(e){var t=Ea(e);return t="function"==typeof t?t:i,ji(qr(e,1,Cs,!0),i,t)}));function Oa(e){if(!e||!e.length)return[];var t=0;return e=un(e,(function(e){if(Cs(e))return t=kn(e.length,t),!0})),An(t,(function(t){return dn(e,Sn(t))}))}function Da(e,t){if(!e||!e.length)return[];var n=Oa(e);return null==t?n:dn(n,(function(e){return nn(t,i,e)}))}var La=Ei((function(e,t){return Cs(e)?Pr(e,t):[]})),Fa=Ei((function(e){return Hi(un(e,Cs))})),Va=Ei((function(e){var t=Ea(e);return Cs(t)&&(t=i),Hi(un(e,Cs),Bo(t,2))})),Ba=Ei((function(e){var t=Ea(e);return t="function"==typeof t?t:i,Hi(un(e,Cs),i,t)})),ja=Ei(Oa);var Pa=Ei((function(e){var t=e.length,n=t>1?e[t-1]:i;return n="function"==typeof n?(e.pop(),n):i,Da(e,n)}));function Wa(e){var t=vr(e);return t.__chain__=!0,t}function Ua(e,t){return t(e)}var Ga=Ro((function(e){var t=e.length,n=t?e[0]:0,r=this.__wrapped__,o=function(t){return Lr(t,e)};return!(t>1||this.__actions__.length)&&r instanceof br&&Qo(n)?((r=r.slice(n,+n+(t?1:0))).__actions__.push({func:Ua,args:[o],thisArg:i}),new yr(r,this.__chain__).thru((function(e){return t&&!e.length&&e.push(i),e}))):this.thru(o)}));var Ha=ao((function(e,t,n){lt.call(e,n)?++e[n]:Dr(e,n,1)}));var za=po(ya),qa=po(ba);function Za(e,t){return(bs(e)?on:Wr)(e,Bo(t,3))}function Qa(e,t){return(bs(e)?an:Ur)(e,Bo(t,3))}var Ya=ao((function(e,t,n){lt.call(e,n)?e[n].push(t):Dr(e,n,[t])}));var Ka=Ei((function(e,t,r){var i=-1,o="function"==typeof t,a=Is(e)?n(e.length):[];return Wr(e,(function(e){a[++i]=o?nn(t,e,r):oi(e,t,r)})),a})),Xa=ao((function(e,t,n){Dr(e,n,t)}));function Ja(e,t){return(bs(e)?dn:pi)(e,Bo(t,3))}var $a=ao((function(e,t,n){e[n?0:1].push(t)}),(function(){return[[],[]]}));var es=Ei((function(e,t){if(null==e)return[];var n=t.length;return n>1&&Yo(e,t[0],t[1])?t=[]:n>2&&Yo(t[0],t[1],t[2])&&(t=[t[0]]),bi(e,qr(t,1),[])})),ts=Ot||function(){return Ht.Date.now()};function ns(e,t,n){return t=n?i:t,t=e&&null==t?e.length:t,Ao(e,k,i,i,i,i,t)}function rs(e,t){var n;if("function"!=typeof t)throw new it(s);return e=Gs(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=i),n}}var is=Ei((function(e,t,n){var r=g;if(n.length){var i=Pn(n,Vo(is));r|=C}return Ao(e,r,t,n,i)})),os=Ei((function(e,t,n){var r=g|y;if(n.length){var i=Pn(n,Vo(os));r|=C}return Ao(t,r,e,n,i)}));function as(e,t,n){var r,o,a,u,c,l,d=0,f=!1,h=!1,p=!0;if("function"!=typeof e)throw new it(s);function v(t){var n=r,a=o;return r=o=i,d=t,u=e.apply(a,n)}function m(e){var n=e-l;return l===i||n>=t||n<0||h&&e-d>=a}function g(){var e=ts();if(m(e))return y(e);c=aa(g,function(e){var n=t-(e-l);return h?Qn(n,a-(e-d)):n}(e))}function y(e){return c=i,p&&r?v(e):(r=o=i,u)}function b(){var e=ts(),n=m(e);if(r=arguments,o=this,l=e,n){if(c===i)return function(e){return d=e,c=aa(g,t),f?v(e):u}(l);if(h)return Xi(c),c=aa(g,t),v(l)}return c===i&&(c=aa(g,t)),u}return t=zs(t)||0,Ts(n)&&(f=!!n.leading,a=(h="maxWait"in n)?kn(zs(n.maxWait)||0,t):a,p="trailing"in n?!!n.trailing:p),b.cancel=function(){c!==i&&Xi(c),d=0,r=l=o=c=i},b.flush=function(){return c===i?u:y(ts())},b}var ss=Ei((function(e,t){return jr(e,1,t)})),us=Ei((function(e,t,n){return jr(e,zs(t)||0,n)}));function cs(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new it(s);var n=function n(){var r=arguments,i=t?t.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=e.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(cs.Cache||Cr),n}function ls(e){if("function"!=typeof e)throw new it(s);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}cs.Cache=Cr;var ds=Yi((function(e,t){var n=(t=1==t.length&&bs(t[0])?dn(t[0],Tn(Bo())):dn(qr(t,1),Tn(Bo()))).length;return Ei((function(r){for(var i=-1,o=Qn(r.length,n);++i<o;)r[i]=t[i].call(this,r[i]);return nn(e,this,r)}))})),fs=Ei((function(e,t){var n=Pn(t,Vo(fs));return Ao(e,C,i,t,n)})),hs=Ei((function(e,t){var n=Pn(t,Vo(hs));return Ao(e,S,i,t,n)})),ps=Ro((function(e,t){return Ao(e,E,i,i,i,t)}));function vs(e,t){return e===t||e!==e&&t!==t}var ms=Co(ti),gs=Co((function(e,t){return e>=t})),ys=ai(function(){return arguments}())?ai:function(e){return Ns(e)&&lt.call(e,"callee")&&!St.call(e,"callee")},bs=n.isArray,ws=Kt?Tn(Kt):function(e){return Ns(e)&&ei(e)==ce};function Is(e){return null!=e&&Ms(e.length)&&!xs(e)}function Cs(e){return Ns(e)&&Is(e)}var Ss=qt||zu,ks=Xt?Tn(Xt):function(e){return Ns(e)&&ei(e)==z};function Es(e){if(!Ns(e))return!1;var t=ei(e);return t==Z||t==q||"string"==typeof e.message&&"string"==typeof e.name&&!Os(e)}function xs(e){if(!Ts(e))return!1;var t=ei(e);return t==Q||t==Y||t==G||t==te}function As(e){return"number"==typeof e&&e==Gs(e)}function Ms(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=D}function Ts(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Ns(e){return null!=e&&"object"==typeof e}var _s=Jt?Tn(Jt):function(e){return Ns(e)&&Ho(e)==K};function Rs(e){return"number"==typeof e||Ns(e)&&ei(e)==X}function Os(e){if(!Ns(e)||ei(e)!=$)return!1;var t=It(e);if(null===t)return!0;var n=lt.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&ct.call(n)==pt}var Ds=$t?Tn($t):function(e){return Ns(e)&&ei(e)==ne};var Ls=en?Tn(en):function(e){return Ns(e)&&Ho(e)==re};function Fs(e){return"string"==typeof e||!bs(e)&&Ns(e)&&ei(e)==ie}function Vs(e){return"symbol"==typeof e||Ns(e)&&ei(e)==oe}var Bs=tn?Tn(tn):function(e){return Ns(e)&&Ms(e.length)&&!!Vt[ei(e)]};var js=Co(hi),Ps=Co((function(e,t){return e<=t}));function Ws(e){if(!e)return[];if(Is(e))return Fs(e)?Hn(e):io(e);if(xt&&e[xt])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[xt]());var t=Ho(e);return(t==K?Bn:t==re?Wn:vu)(e)}function Us(e){return e?(e=zs(e))===O||e===-O?(e<0?-1:1)*L:e===e?e:0:0===e?e:0}function Gs(e){var t=Us(e),n=t%1;return t===t?n?t-n:t:0}function Hs(e){return e?Fr(Gs(e),0,V):0}function zs(e){if("number"==typeof e)return e;if(Vs(e))return F;if(Ts(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Ts(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=Mn(e);var n=qe.test(e);return n||Qe.test(e)?Wt(e.slice(2),n?2:8):ze.test(e)?F:+e}function qs(e){return oo(e,su(e))}function Zs(e){return null==e?"":Bi(e)}var Qs=so((function(e,t){if($o(t)||Is(t))oo(t,au(t),e);else for(var n in t)lt.call(t,n)&&Nr(e,n,t[n])})),Ys=so((function(e,t){oo(t,su(t),e)})),Ks=so((function(e,t,n,r){oo(t,su(t),e,r)})),Xs=so((function(e,t,n,r){oo(t,au(t),e,r)})),Js=Ro(Lr);var $s=Ei((function(e,t){e=tt(e);var n=-1,r=t.length,o=r>2?t[2]:i;for(o&&Yo(t[0],t[1],o)&&(r=1);++n<r;)for(var a=t[n],s=su(a),u=-1,c=s.length;++u<c;){var l=s[u],d=e[l];(d===i||vs(d,st[l])&&!lt.call(e,l))&&(e[l]=a[l])}return e})),eu=Ei((function(e){return e.push(i,To),nn(cu,i,e)}));function tu(e,t,n){var r=null==e?i:Jr(e,t);return r===i?n:r}function nu(e,t){return null!=e&&zo(e,t,ri)}var ru=go((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=ht.call(t)),e[t]=n}),Tu(Ru)),iu=go((function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=ht.call(t)),lt.call(e,t)?e[t].push(n):e[t]=[n]}),Bo),ou=Ei(oi);function au(e){return Is(e)?Er(e):di(e)}function su(e){return Is(e)?Er(e,!0):fi(e)}var uu=so((function(e,t,n){gi(e,t,n)})),cu=so((function(e,t,n,r){gi(e,t,n,r)})),lu=Ro((function(e,t){var n={};if(null==e)return n;var r=!1;t=dn(t,(function(t){return t=Qi(t,e),r||(r=t.length>1),t})),oo(e,Do(e),n),r&&(n=Vr(n,f|h|p,No));for(var i=t.length;i--;)Pi(n,t[i]);return n}));var du=Ro((function(e,t){return null==e?{}:function(e,t){return wi(e,t,(function(t,n){return nu(e,n)}))}(e,t)}));function fu(e,t){if(null==e)return{};var n=dn(Do(e),(function(e){return[e]}));return t=Bo(t),wi(e,n,(function(e,n){return t(e,n[0])}))}var hu=xo(au),pu=xo(su);function vu(e){return null==e?[]:Nn(e,au(e))}var mu=fo((function(e,t,n){return t=t.toLowerCase(),e+(n?gu(t):t)}));function gu(e){return Eu(Zs(e).toLowerCase())}function yu(e){return(e=Zs(e))&&e.replace(Ke,Dn).replace(Nt,"")}var bu=fo((function(e,t,n){return e+(n?"-":"")+t.toLowerCase()})),wu=fo((function(e,t,n){return e+(n?" ":"")+t.toLowerCase()})),Iu=lo("toLowerCase");var Cu=fo((function(e,t,n){return e+(n?"_":"")+t.toLowerCase()}));var Su=fo((function(e,t,n){return e+(n?" ":"")+Eu(t)}));var ku=fo((function(e,t,n){return e+(n?" ":"")+t.toUpperCase()})),Eu=lo("toUpperCase");function xu(e,t,n){return e=Zs(e),(t=n?i:t)===i?function(e){return Dt.test(e)}(e)?function(e){return e.match(Rt)||[]}(e):function(e){return e.match(Pe)||[]}(e):e.match(t)||[]}var Au=Ei((function(e,t){try{return nn(e,i,t)}catch(n){return Es(n)?n:new Fe(n)}})),Mu=Ro((function(e,t){return on(t,(function(t){t=fa(t),Dr(e,t,is(e[t],e))})),e}));function Tu(e){return function(){return e}}var Nu=vo(),_u=vo(!0);function Ru(e){return e}function Ou(e){return li("function"==typeof e?e:Vr(e,f))}var Du=Ei((function(e,t){return function(n){return oi(n,e,t)}})),Lu=Ei((function(e,t){return function(n){return oi(e,n,t)}}));function Fu(e,t,n){var r=au(t),i=Xr(t,r);null!=n||Ts(t)&&(i.length||!r.length)||(n=t,t=e,e=this,i=Xr(t,au(t)));var o=!(Ts(n)&&"chain"in n)||!!n.chain,a=xs(e);return on(i,(function(n){var r=t[n];e[n]=r,a&&(e.prototype[n]=function(){var t=this.__chain__;if(o||t){var n=e(this.__wrapped__);return(n.__actions__=io(this.__actions__)).push({func:r,args:arguments,thisArg:e}),n.__chain__=t,n}return r.apply(e,fn([this.value()],arguments))})})),e}function Vu(){}var Bu=bo(dn),ju=bo(sn),Pu=bo(vn);function Wu(e){return Ko(e)?Sn(fa(e)):function(e){return function(t){return Jr(t,e)}}(e)}var Uu=Io(),Gu=Io(!0);function Hu(){return[]}function zu(){return!1}var qu=yo((function(e,t){return e+t}),0),Zu=ko("ceil"),Qu=yo((function(e,t){return e/t}),1),Yu=ko("floor");var Ku=yo((function(e,t){return e*t}),1),Xu=ko("round"),Ju=yo((function(e,t){return e-t}),0);return vr.after=function(e,t){if("function"!=typeof t)throw new it(s);return e=Gs(e),function(){if(--e<1)return t.apply(this,arguments)}},vr.ary=ns,vr.assign=Qs,vr.assignIn=Ys,vr.assignInWith=Ks,vr.assignWith=Xs,vr.at=Js,vr.before=rs,vr.bind=is,vr.bindAll=Mu,vr.bindKey=os,vr.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return bs(e)?e:[e]},vr.chain=Wa,vr.chunk=function(e,t,r){t=(r?Yo(e,t,r):t===i)?1:kn(Gs(t),0);var o=null==e?0:e.length;if(!o||t<1)return[];for(var a=0,s=0,u=n(Ut(o/t));a<o;)u[s++]=Ri(e,a,a+=t);return u},vr.compact=function(e){for(var t=-1,n=null==e?0:e.length,r=0,i=[];++t<n;){var o=e[t];o&&(i[r++]=o)}return i},vr.concat=function(){var e=arguments.length;if(!e)return[];for(var t=n(e-1),r=arguments[0],i=e;i--;)t[i-1]=arguments[i];return fn(bs(r)?io(r):[r],qr(t,1))},vr.cond=function(e){var t=null==e?0:e.length,n=Bo();return e=t?dn(e,(function(e){if("function"!=typeof e[1])throw new it(s);return[n(e[0]),e[1]]})):[],Ei((function(n){for(var r=-1;++r<t;){var i=e[r];if(nn(i[0],this,n))return nn(i[1],this,n)}}))},vr.conforms=function(e){return function(e){var t=au(e);return function(n){return Br(n,e,t)}}(Vr(e,f))},vr.constant=Tu,vr.countBy=Ha,vr.create=function(e,t){var n=mr(e);return null==t?n:Or(n,t)},vr.curry=function e(t,n,r){var o=Ao(t,w,i,i,i,i,i,n=r?i:n);return o.placeholder=e.placeholder,o},vr.curryRight=function e(t,n,r){var o=Ao(t,I,i,i,i,i,i,n=r?i:n);return o.placeholder=e.placeholder,o},vr.debounce=as,vr.defaults=$s,vr.defaultsDeep=eu,vr.defer=ss,vr.delay=us,vr.difference=va,vr.differenceBy=ma,vr.differenceWith=ga,vr.drop=function(e,t,n){var r=null==e?0:e.length;return r?Ri(e,(t=n||t===i?1:Gs(t))<0?0:t,r):[]},vr.dropRight=function(e,t,n){var r=null==e?0:e.length;return r?Ri(e,0,(t=r-(t=n||t===i?1:Gs(t)))<0?0:t):[]},vr.dropRightWhile=function(e,t){return e&&e.length?Ui(e,Bo(t,3),!0,!0):[]},vr.dropWhile=function(e,t){return e&&e.length?Ui(e,Bo(t,3),!0):[]},vr.fill=function(e,t,n,r){var o=null==e?0:e.length;return o?(n&&"number"!=typeof n&&Yo(e,t,n)&&(n=0,r=o),function(e,t,n,r){var o=e.length;for((n=Gs(n))<0&&(n=-n>o?0:o+n),(r=r===i||r>o?o:Gs(r))<0&&(r+=o),r=n>r?0:Hs(r);n<r;)e[n++]=t;return e}(e,t,n,r)):[]},vr.filter=function(e,t){return(bs(e)?un:zr)(e,Bo(t,3))},vr.flatMap=function(e,t){return qr(Ja(e,t),1)},vr.flatMapDeep=function(e,t){return qr(Ja(e,t),O)},vr.flatMapDepth=function(e,t,n){return n=n===i?1:Gs(n),qr(Ja(e,t),n)},vr.flatten=wa,vr.flattenDeep=function(e){return(null==e?0:e.length)?qr(e,O):[]},vr.flattenDepth=function(e,t){return(null==e?0:e.length)?qr(e,t=t===i?1:Gs(t)):[]},vr.flip=function(e){return Ao(e,x)},vr.flow=Nu,vr.flowRight=_u,vr.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var i=e[t];r[i[0]]=i[1]}return r},vr.functions=function(e){return null==e?[]:Xr(e,au(e))},vr.functionsIn=function(e){return null==e?[]:Xr(e,su(e))},vr.groupBy=Ya,vr.initial=function(e){return(null==e?0:e.length)?Ri(e,0,-1):[]},vr.intersection=Ca,vr.intersectionBy=Sa,vr.intersectionWith=ka,vr.invert=ru,vr.invertBy=iu,vr.invokeMap=Ka,vr.iteratee=Ou,vr.keyBy=Xa,vr.keys=au,vr.keysIn=su,vr.map=Ja,vr.mapKeys=function(e,t){var n={};return t=Bo(t,3),Yr(e,(function(e,r,i){Dr(n,t(e,r,i),e)})),n},vr.mapValues=function(e,t){var n={};return t=Bo(t,3),Yr(e,(function(e,r,i){Dr(n,r,t(e,r,i))})),n},vr.matches=function(e){return vi(Vr(e,f))},vr.matchesProperty=function(e,t){return mi(e,Vr(t,f))},vr.memoize=cs,vr.merge=uu,vr.mergeWith=cu,vr.method=Du,vr.methodOf=Lu,vr.mixin=Fu,vr.negate=ls,vr.nthArg=function(e){return e=Gs(e),Ei((function(t){return yi(t,e)}))},vr.omit=lu,vr.omitBy=function(e,t){return fu(e,ls(Bo(t)))},vr.once=function(e){return rs(2,e)},vr.orderBy=function(e,t,n,r){return null==e?[]:(bs(t)||(t=null==t?[]:[t]),bs(n=r?i:n)||(n=null==n?[]:[n]),bi(e,t,n))},vr.over=Bu,vr.overArgs=ds,vr.overEvery=ju,vr.overSome=Pu,vr.partial=fs,vr.partialRight=hs,vr.partition=$a,vr.pick=du,vr.pickBy=fu,vr.property=Wu,vr.propertyOf=function(e){return function(t){return null==e?i:Jr(e,t)}},vr.pull=xa,vr.pullAll=Aa,vr.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?Ii(e,t,Bo(n,2)):e},vr.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?Ii(e,t,i,n):e},vr.pullAt=Ma,vr.range=Uu,vr.rangeRight=Gu,vr.rearg=ps,vr.reject=function(e,t){return(bs(e)?un:zr)(e,ls(Bo(t,3)))},vr.remove=function(e,t){var n=[];if(!e||!e.length)return n;var r=-1,i=[],o=e.length;for(t=Bo(t,3);++r<o;){var a=e[r];t(a,r,e)&&(n.push(a),i.push(r))}return Ci(e,i),n},vr.rest=function(e,t){if("function"!=typeof e)throw new it(s);return Ei(e,t=t===i?t:Gs(t))},vr.reverse=Ta,vr.sampleSize=function(e,t,n){return t=(n?Yo(e,t,n):t===i)?1:Gs(t),(bs(e)?Ar:Ai)(e,t)},vr.set=function(e,t,n){return null==e?e:Mi(e,t,n)},vr.setWith=function(e,t,n,r){return r="function"==typeof r?r:i,null==e?e:Mi(e,t,n,r)},vr.shuffle=function(e){return(bs(e)?Mr:_i)(e)},vr.slice=function(e,t,n){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&Yo(e,t,n)?(t=0,n=r):(t=null==t?0:Gs(t),n=n===i?r:Gs(n)),Ri(e,t,n)):[]},vr.sortBy=es,vr.sortedUniq=function(e){return e&&e.length?Fi(e):[]},vr.sortedUniqBy=function(e,t){return e&&e.length?Fi(e,Bo(t,2)):[]},vr.split=function(e,t,n){return n&&"number"!=typeof n&&Yo(e,t,n)&&(t=n=i),(n=n===i?V:n>>>0)?(e=Zs(e))&&("string"==typeof t||null!=t&&!Ds(t))&&!(t=Bi(t))&&Vn(e)?Ki(Hn(e),0,n):e.split(t,n):[]},vr.spread=function(e,t){if("function"!=typeof e)throw new it(s);return t=null==t?0:kn(Gs(t),0),Ei((function(n){var r=n[t],i=Ki(n,0,t);return r&&fn(i,r),nn(e,this,i)}))},vr.tail=function(e){var t=null==e?0:e.length;return t?Ri(e,1,t):[]},vr.take=function(e,t,n){return e&&e.length?Ri(e,0,(t=n||t===i?1:Gs(t))<0?0:t):[]},vr.takeRight=function(e,t,n){var r=null==e?0:e.length;return r?Ri(e,(t=r-(t=n||t===i?1:Gs(t)))<0?0:t,r):[]},vr.takeRightWhile=function(e,t){return e&&e.length?Ui(e,Bo(t,3),!1,!0):[]},vr.takeWhile=function(e,t){return e&&e.length?Ui(e,Bo(t,3)):[]},vr.tap=function(e,t){return t(e),e},vr.throttle=function(e,t,n){var r=!0,i=!0;if("function"!=typeof e)throw new it(s);return Ts(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),as(e,t,{leading:r,maxWait:t,trailing:i})},vr.thru=Ua,vr.toArray=Ws,vr.toPairs=hu,vr.toPairsIn=pu,vr.toPath=function(e){return bs(e)?dn(e,fa):Vs(e)?[e]:io(da(Zs(e)))},vr.toPlainObject=qs,vr.transform=function(e,t,n){var r=bs(e),i=r||Ss(e)||Bs(e);if(t=Bo(t,4),null==n){var o=e&&e.constructor;n=i?r?new o:[]:Ts(e)&&xs(o)?mr(It(e)):{}}return(i?on:Yr)(e,(function(e,r,i){return t(n,e,r,i)})),n},vr.unary=function(e){return ns(e,1)},vr.union=Na,vr.unionBy=_a,vr.unionWith=Ra,vr.uniq=function(e){return e&&e.length?ji(e):[]},vr.uniqBy=function(e,t){return e&&e.length?ji(e,Bo(t,2)):[]},vr.uniqWith=function(e,t){return t="function"==typeof t?t:i,e&&e.length?ji(e,i,t):[]},vr.unset=function(e,t){return null==e||Pi(e,t)},vr.unzip=Oa,vr.unzipWith=Da,vr.update=function(e,t,n){return null==e?e:Wi(e,t,Zi(n))},vr.updateWith=function(e,t,n,r){return r="function"==typeof r?r:i,null==e?e:Wi(e,t,Zi(n),r)},vr.values=vu,vr.valuesIn=function(e){return null==e?[]:Nn(e,su(e))},vr.without=La,vr.words=xu,vr.wrap=function(e,t){return fs(Zi(t),e)},vr.xor=Fa,vr.xorBy=Va,vr.xorWith=Ba,vr.zip=ja,vr.zipObject=function(e,t){return zi(e||[],t||[],Nr)},vr.zipObjectDeep=function(e,t){return zi(e||[],t||[],Mi)},vr.zipWith=Pa,vr.entries=hu,vr.entriesIn=pu,vr.extend=Ys,vr.extendWith=Ks,Fu(vr,vr),vr.add=qu,vr.attempt=Au,vr.camelCase=mu,vr.capitalize=gu,vr.ceil=Zu,vr.clamp=function(e,t,n){return n===i&&(n=t,t=i),n!==i&&(n=(n=zs(n))===n?n:0),t!==i&&(t=(t=zs(t))===t?t:0),Fr(zs(e),t,n)},vr.clone=function(e){return Vr(e,p)},vr.cloneDeep=function(e){return Vr(e,f|p)},vr.cloneDeepWith=function(e,t){return Vr(e,f|p,t="function"==typeof t?t:i)},vr.cloneWith=function(e,t){return Vr(e,p,t="function"==typeof t?t:i)},vr.conformsTo=function(e,t){return null==t||Br(e,t,au(t))},vr.deburr=yu,vr.defaultTo=function(e,t){return null==e||e!==e?t:e},vr.divide=Qu,vr.endsWith=function(e,t,n){e=Zs(e),t=Bi(t);var r=e.length,o=n=n===i?r:Fr(Gs(n),0,r);return(n-=t.length)>=0&&e.slice(n,o)==t},vr.eq=vs,vr.escape=function(e){return(e=Zs(e))&&xe.test(e)?e.replace(ke,Ln):e},vr.escapeRegExp=function(e){return(e=Zs(e))&&De.test(e)?e.replace(Oe,"\\$&"):e},vr.every=function(e,t,n){var r=bs(e)?sn:Gr;return n&&Yo(e,t,n)&&(t=i),r(e,Bo(t,3))},vr.find=za,vr.findIndex=ya,vr.findKey=function(e,t){return gn(e,Bo(t,3),Yr)},vr.findLast=qa,vr.findLastIndex=ba,vr.findLastKey=function(e,t){return gn(e,Bo(t,3),Kr)},vr.floor=Yu,vr.forEach=Za,vr.forEachRight=Qa,vr.forIn=function(e,t){return null==e?e:Zr(e,Bo(t,3),su)},vr.forInRight=function(e,t){return null==e?e:Qr(e,Bo(t,3),su)},vr.forOwn=function(e,t){return e&&Yr(e,Bo(t,3))},vr.forOwnRight=function(e,t){return e&&Kr(e,Bo(t,3))},vr.get=tu,vr.gt=ms,vr.gte=gs,vr.has=function(e,t){return null!=e&&zo(e,t,ni)},vr.hasIn=nu,vr.head=Ia,vr.identity=Ru,vr.includes=function(e,t,n,r){e=Is(e)?e:vu(e),n=n&&!r?Gs(n):0;var i=e.length;return n<0&&(n=kn(i+n,0)),Fs(e)?n<=i&&e.indexOf(t,n)>-1:!!i&&bn(e,t,n)>-1},vr.indexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var i=null==n?0:Gs(n);return i<0&&(i=kn(r+i,0)),bn(e,t,i)},vr.inRange=function(e,t,n){return t=Us(t),n===i?(n=t,t=0):n=Us(n),function(e,t,n){return e>=Qn(t,n)&&e<kn(t,n)}(e=zs(e),t,n)},vr.invoke=ou,vr.isArguments=ys,vr.isArray=bs,vr.isArrayBuffer=ws,vr.isArrayLike=Is,vr.isArrayLikeObject=Cs,vr.isBoolean=function(e){return!0===e||!1===e||Ns(e)&&ei(e)==H},vr.isBuffer=Ss,vr.isDate=ks,vr.isElement=function(e){return Ns(e)&&1===e.nodeType&&!Os(e)},vr.isEmpty=function(e){if(null==e)return!0;if(Is(e)&&(bs(e)||"string"==typeof e||"function"==typeof e.splice||Ss(e)||Bs(e)||ys(e)))return!e.length;var t=Ho(e);if(t==K||t==re)return!e.size;if($o(e))return!di(e).length;for(var n in e)if(lt.call(e,n))return!1;return!0},vr.isEqual=function(e,t){return si(e,t)},vr.isEqualWith=function(e,t,n){var r=(n="function"==typeof n?n:i)?n(e,t):i;return r===i?si(e,t,i,n):!!r},vr.isError=Es,vr.isFinite=function(e){return"number"==typeof e&&Qt(e)},vr.isFunction=xs,vr.isInteger=As,vr.isLength=Ms,vr.isMap=_s,vr.isMatch=function(e,t){return e===t||ui(e,t,Po(t))},vr.isMatchWith=function(e,t,n){return n="function"==typeof n?n:i,ui(e,t,Po(t),n)},vr.isNaN=function(e){return Rs(e)&&e!=+e},vr.isNative=function(e){if(Jo(e))throw new Fe(a);return ci(e)},vr.isNil=function(e){return null==e},vr.isNull=function(e){return null===e},vr.isNumber=Rs,vr.isObject=Ts,vr.isObjectLike=Ns,vr.isPlainObject=Os,vr.isRegExp=Ds,vr.isSafeInteger=function(e){return As(e)&&e>=-D&&e<=D},vr.isSet=Ls,vr.isString=Fs,vr.isSymbol=Vs,vr.isTypedArray=Bs,vr.isUndefined=function(e){return e===i},vr.isWeakMap=function(e){return Ns(e)&&Ho(e)==se},vr.isWeakSet=function(e){return Ns(e)&&ei(e)==ue},vr.join=function(e,t){return null==e?"":Yt.call(e,t)},vr.kebabCase=bu,vr.last=Ea,vr.lastIndexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r;return n!==i&&(o=(o=Gs(n))<0?kn(r+o,0):Qn(o,r-1)),t===t?function(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}(e,t,o):yn(e,In,o,!0)},vr.lowerCase=wu,vr.lowerFirst=Iu,vr.lt=js,vr.lte=Ps,vr.max=function(e){return e&&e.length?Hr(e,Ru,ti):i},vr.maxBy=function(e,t){return e&&e.length?Hr(e,Bo(t,2),ti):i},vr.mean=function(e){return Cn(e,Ru)},vr.meanBy=function(e,t){return Cn(e,Bo(t,2))},vr.min=function(e){return e&&e.length?Hr(e,Ru,hi):i},vr.minBy=function(e,t){return e&&e.length?Hr(e,Bo(t,2),hi):i},vr.stubArray=Hu,vr.stubFalse=zu,vr.stubObject=function(){return{}},vr.stubString=function(){return""},vr.stubTrue=function(){return!0},vr.multiply=Ku,vr.nth=function(e,t){return e&&e.length?yi(e,Gs(t)):i},vr.noConflict=function(){return Ht._===this&&(Ht._=vt),this},vr.noop=Vu,vr.now=ts,vr.pad=function(e,t,n){e=Zs(e);var r=(t=Gs(t))?Gn(e):0;if(!t||r>=t)return e;var i=(t-r)/2;return wo(Gt(i),n)+e+wo(Ut(i),n)},vr.padEnd=function(e,t,n){e=Zs(e);var r=(t=Gs(t))?Gn(e):0;return t&&r<t?e+wo(t-r,n):e},vr.padStart=function(e,t,n){e=Zs(e);var r=(t=Gs(t))?Gn(e):0;return t&&r<t?wo(t-r,n)+e:e},vr.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),Kn(Zs(e).replace(Le,""),t||0)},vr.random=function(e,t,n){if(n&&"boolean"!=typeof n&&Yo(e,t,n)&&(t=n=i),n===i&&("boolean"==typeof t?(n=t,t=i):"boolean"==typeof e&&(n=e,e=i)),e===i&&t===i?(e=0,t=1):(e=Us(e),t===i?(t=e,e=0):t=Us(t)),e>t){var r=e;e=t,t=r}if(n||e%1||t%1){var o=Xn();return Qn(e+o*(t-e+Pt("1e-"+((o+"").length-1))),t)}return Si(e,t)},vr.reduce=function(e,t,n){var r=bs(e)?hn:En,i=arguments.length<3;return r(e,Bo(t,4),n,i,Wr)},vr.reduceRight=function(e,t,n){var r=bs(e)?pn:En,i=arguments.length<3;return r(e,Bo(t,4),n,i,Ur)},vr.repeat=function(e,t,n){return t=(n?Yo(e,t,n):t===i)?1:Gs(t),ki(Zs(e),t)},vr.replace=function(){var e=arguments,t=Zs(e[0]);return e.length<3?t:t.replace(e[1],e[2])},vr.result=function(e,t,n){var r=-1,o=(t=Qi(t,e)).length;for(o||(o=1,e=i);++r<o;){var a=null==e?i:e[fa(t[r])];a===i&&(r=o,a=n),e=xs(a)?a.call(e):a}return e},vr.round=Xu,vr.runInContext=e,vr.sample=function(e){return(bs(e)?xr:xi)(e)},vr.size=function(e){if(null==e)return 0;if(Is(e))return Fs(e)?Gn(e):e.length;var t=Ho(e);return t==K||t==re?e.size:di(e).length},vr.snakeCase=Cu,vr.some=function(e,t,n){var r=bs(e)?vn:Oi;return n&&Yo(e,t,n)&&(t=i),r(e,Bo(t,3))},vr.sortedIndex=function(e,t){return Di(e,t)},vr.sortedIndexBy=function(e,t,n){return Li(e,t,Bo(n,2))},vr.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var r=Di(e,t);if(r<n&&vs(e[r],t))return r}return-1},vr.sortedLastIndex=function(e,t){return Di(e,t,!0)},vr.sortedLastIndexBy=function(e,t,n){return Li(e,t,Bo(n,2),!0)},vr.sortedLastIndexOf=function(e,t){if(null==e?0:e.length){var n=Di(e,t,!0)-1;if(vs(e[n],t))return n}return-1},vr.startCase=Su,vr.startsWith=function(e,t,n){return e=Zs(e),n=null==n?0:Fr(Gs(n),0,e.length),t=Bi(t),e.slice(n,n+t.length)==t},vr.subtract=Ju,vr.sum=function(e){return e&&e.length?xn(e,Ru):0},vr.sumBy=function(e,t){return e&&e.length?xn(e,Bo(t,2)):0},vr.template=function(e,t,n){var r=vr.templateSettings;n&&Yo(e,t,n)&&(t=i),e=Zs(e),t=Ks({},t,r,Mo);var o,a,s=Ks({},t.imports,r.imports,Mo),c=au(s),l=Nn(s,c),d=0,f=t.interpolate||Xe,h="__p += '",p=nt((t.escape||Xe).source+"|"+f.source+"|"+(f===Te?Ge:Xe).source+"|"+(t.evaluate||Xe).source+"|$","g"),v="//# sourceURL="+(lt.call(t,"sourceURL")?(t.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Ft+"]")+"\n";e.replace(p,(function(t,n,r,i,s,u){return r||(r=i),h+=e.slice(d,u).replace(Je,Fn),n&&(o=!0,h+="' +\n__e("+n+") +\n'"),s&&(a=!0,h+="';\n"+s+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),d=u+t.length,t})),h+="';\n";var m=lt.call(t,"variable")&&t.variable;if(m){if(We.test(m))throw new Fe(u)}else h="with (obj) {\n"+h+"\n}\n";h=(a?h.replace(we,""):h).replace(Ie,"$1").replace(Ce,"$1;"),h="function("+(m||"obj")+") {\n"+(m?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var g=Au((function(){return $e(c,v+"return "+h).apply(i,l)}));if(g.source=h,Es(g))throw g;return g},vr.times=function(e,t){if((e=Gs(e))<1||e>D)return[];var n=V,r=Qn(e,V);t=Bo(t),e-=V;for(var i=An(r,t);++n<e;)t(n);return i},vr.toFinite=Us,vr.toInteger=Gs,vr.toLength=Hs,vr.toLower=function(e){return Zs(e).toLowerCase()},vr.toNumber=zs,vr.toSafeInteger=function(e){return e?Fr(Gs(e),-D,D):0===e?e:0},vr.toString=Zs,vr.toUpper=function(e){return Zs(e).toUpperCase()},vr.trim=function(e,t,n){if((e=Zs(e))&&(n||t===i))return Mn(e);if(!e||!(t=Bi(t)))return e;var r=Hn(e),o=Hn(t);return Ki(r,Rn(r,o),On(r,o)+1).join("")},vr.trimEnd=function(e,t,n){if((e=Zs(e))&&(n||t===i))return e.slice(0,zn(e)+1);if(!e||!(t=Bi(t)))return e;var r=Hn(e);return Ki(r,0,On(r,Hn(t))+1).join("")},vr.trimStart=function(e,t,n){if((e=Zs(e))&&(n||t===i))return e.replace(Le,"");if(!e||!(t=Bi(t)))return e;var r=Hn(e);return Ki(r,Rn(r,Hn(t))).join("")},vr.truncate=function(e,t){var n=A,r=M;if(Ts(t)){var o="separator"in t?t.separator:o;n="length"in t?Gs(t.length):n,r="omission"in t?Bi(t.omission):r}var a=(e=Zs(e)).length;if(Vn(e)){var s=Hn(e);a=s.length}if(n>=a)return e;var u=n-Gn(r);if(u<1)return r;var c=s?Ki(s,0,u).join(""):e.slice(0,u);if(o===i)return c+r;if(s&&(u+=c.length-u),Ds(o)){if(e.slice(u).search(o)){var l,d=c;for(o.global||(o=nt(o.source,Zs(He.exec(o))+"g")),o.lastIndex=0;l=o.exec(d);)var f=l.index;c=c.slice(0,f===i?u:f)}}else if(e.indexOf(Bi(o),u)!=u){var h=c.lastIndexOf(o);h>-1&&(c=c.slice(0,h))}return c+r},vr.unescape=function(e){return(e=Zs(e))&&Ee.test(e)?e.replace(Se,qn):e},vr.uniqueId=function(e){var t=++dt;return Zs(e)+t},vr.upperCase=ku,vr.upperFirst=Eu,vr.each=Za,vr.eachRight=Qa,vr.first=Ia,Fu(vr,function(){var e={};return Yr(vr,(function(t,n){lt.call(vr.prototype,n)||(e[n]=t)})),e}(),{chain:!1}),vr.VERSION="4.17.21",on(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(e){vr[e].placeholder=vr})),on(["drop","take"],(function(e,t){br.prototype[e]=function(n){n=n===i?1:kn(Gs(n),0);var r=this.__filtered__&&!t?new br(this):this.clone();return r.__filtered__?r.__takeCount__=Qn(n,r.__takeCount__):r.__views__.push({size:Qn(n,V),type:e+(r.__dir__<0?"Right":"")}),r},br.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}})),on(["filter","map","takeWhile"],(function(e,t){var n=t+1,r=n==_||3==n;br.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:Bo(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}})),on(["head","last"],(function(e,t){var n="take"+(t?"Right":"");br.prototype[e]=function(){return this[n](1).value()[0]}})),on(["initial","tail"],(function(e,t){var n="drop"+(t?"":"Right");br.prototype[e]=function(){return this.__filtered__?new br(this):this[n](1)}})),br.prototype.compact=function(){return this.filter(Ru)},br.prototype.find=function(e){return this.filter(e).head()},br.prototype.findLast=function(e){return this.reverse().find(e)},br.prototype.invokeMap=Ei((function(e,t){return"function"==typeof e?new br(this):this.map((function(n){return oi(n,e,t)}))})),br.prototype.reject=function(e){return this.filter(ls(Bo(e)))},br.prototype.slice=function(e,t){e=Gs(e);var n=this;return n.__filtered__&&(e>0||t<0)?new br(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==i&&(n=(t=Gs(t))<0?n.dropRight(-t):n.take(t-e)),n)},br.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},br.prototype.toArray=function(){return this.take(V)},Yr(br.prototype,(function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),o=vr[r?"take"+("last"==t?"Right":""):t],a=r||/^find/.test(t);o&&(vr.prototype[t]=function(){var t=this.__wrapped__,s=r?[1]:arguments,u=t instanceof br,c=s[0],l=u||bs(t),d=function(e){var t=o.apply(vr,fn([e],s));return r&&f?t[0]:t};l&&n&&"function"==typeof c&&1!=c.length&&(u=l=!1);var f=this.__chain__,h=!!this.__actions__.length,p=a&&!f,v=u&&!h;if(!a&&l){t=v?t:new br(this);var m=e.apply(t,s);return m.__actions__.push({func:Ua,args:[d],thisArg:i}),new yr(m,f)}return p&&v?e.apply(this,s):(m=this.thru(d),p?r?m.value()[0]:m.value():m)})})),on(["pop","push","shift","sort","splice","unshift"],(function(e){var t=ot[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);vr.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var i=this.value();return t.apply(bs(i)?i:[],e)}return this[n]((function(n){return t.apply(bs(n)?n:[],e)}))}})),Yr(br.prototype,(function(e,t){var n=vr[t];if(n){var r=n.name+"";lt.call(ar,r)||(ar[r]=[]),ar[r].push({name:t,func:n})}})),ar[mo(i,y).name]=[{name:"wrapper",func:i}],br.prototype.clone=function(){var e=new br(this.__wrapped__);return e.__actions__=io(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=io(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=io(this.__views__),e},br.prototype.reverse=function(){if(this.__filtered__){var e=new br(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},br.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=bs(e),r=t<0,i=n?e.length:0,o=function(e,t,n){var r=-1,i=n.length;for(;++r<i;){var o=n[r],a=o.size;switch(o.type){case"drop":e+=a;break;case"dropRight":t-=a;break;case"take":t=Qn(t,e+a);break;case"takeRight":e=kn(e,t-a)}}return{start:e,end:t}}(0,i,this.__views__),a=o.start,s=o.end,u=s-a,c=r?s:a-1,l=this.__iteratees__,d=l.length,f=0,h=Qn(u,this.__takeCount__);if(!n||!r&&i==u&&h==u)return Gi(e,this.__actions__);var p=[];e:for(;u--&&f<h;){for(var v=-1,m=e[c+=t];++v<d;){var g=l[v],y=g.iteratee,b=g.type,w=y(m);if(b==R)m=w;else if(!w){if(b==_)continue e;break e}}p[f++]=m}return p},vr.prototype.at=Ga,vr.prototype.chain=function(){return Wa(this)},vr.prototype.commit=function(){return new yr(this.value(),this.__chain__)},vr.prototype.next=function(){this.__values__===i&&(this.__values__=Ws(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?i:this.__values__[this.__index__++]}},vr.prototype.plant=function(e){for(var t,n=this;n instanceof gr;){var r=pa(n);r.__index__=0,r.__values__=i,t?o.__wrapped__=r:t=r;var o=r;n=n.__wrapped__}return o.__wrapped__=e,t},vr.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof br){var t=e;return this.__actions__.length&&(t=new br(this)),(t=t.reverse()).__actions__.push({func:Ua,args:[Ta],thisArg:i}),new yr(t,this.__chain__)}return this.thru(Ta)},vr.prototype.toJSON=vr.prototype.valueOf=vr.prototype.value=function(){return Gi(this.__wrapped__,this.__actions__)},vr.prototype.first=vr.prototype.head,xt&&(vr.prototype[xt]=function(){return this}),vr}();Ht._=Zn,(r=function(){return Zn}.call(t,n,t,e))===i||(e.exports=r)}.call(this)},352:function(e){window,e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=16)}([function(e,t,n){"use strict";n.d(t,"a",(function(){return w})),n.d(t,"d",(function(){return k})),n.d(t,"b",(function(){return E})),n.d(t,"c",(function(){return x}));var r=n(1),i=n.n(r),o=n(14),a=n.n(o),s=n(2),u=n.n(s),c=n(15),l=n.n(c);function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var f=Array.isArray,h=Object.keys;function p(e){return"function"==typeof e}function v(e){return e instanceof HTMLElement||e instanceof Text}function m(e){return"object"===u()(e)&&!f(e)}function g(e){if(!e||"string"==typeof e)return e;var t=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){a()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e);return delete t.children,t}function y(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return!(!f(e)||!f(t))&&(n?e.length===t.length&&!e.find((function(e){return!t.includes(e)})):e.some((function(e){return t.includes(e)})))}function b(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=[];if(!h(e).length)return!0;if(null===t||!h(t).length)return!1;if(n)return l()(e,t);var i=h(e).filter((function(e){return h(t).includes(e)}));return i.forEach((function(n){m(e[n])&&m(t[n])&&(r=r.concat(b(e[n],t[n]))),(e[n]===t[n]||y(e[n],t[n]))&&r.push(t)})),r.length>0&&r.filter((function(e){return e})).length===i.length}function w(e){var t,n={children:[]};if(!e)return n;n.name=p(t=e.type)?t.displayName||t.name:t,n.props=g(e.memoizedProps),n.state=function(e){if(e)return e.baseState||e}(e.memoizedState);var r=e.child;if(r)for(n.children.push(r);r.sibling;)n.children.push(r.sibling),r=r.sibling;return n.children=n.children.map((function(e){return w(e)})),p(e.type)&&function(e){return e.children.length>1}(n)?(n.node=function(e){return e.children.map((function(e){return e.node})).filter((function(e){return!!e}))}(n),n.isFragment=!0):n.node=function(e){return v(e.stateNode)?e.stateNode:e.child&&v(e.child.stateNode)?e.child.stateNode:null}(e),n}function I(e){for(;e.length;){var t=e.shift();if(t.node)return t.node;t.children&&Array.isArray(t.children)&&e.push.apply(e,i()(t.children))}}function C(e,t){for(var n=[];e.length;){var r=e.shift().children;r&&Array.isArray(r)&&r.forEach((function(r){t(r)&&(!r.node&&Array.isArray(r.children)&&(r.node=I(r.children.concat([]))),n.push(r)),e.push(r)}))}return n}function S(e,t){var n=function(e){if(e){var t=e.split("(");return 1===t.length?e:t.find((function(e){return e.includes(")")})).replace(/\)*/g,"")}}(t);return new RegExp("^"+e.split("*").map((function(e){return e.replace(/([.*+?^=!:${}()|[\]/\\])/g,"\\$1")})).join(".+")+"$").test(n)}function k(e,t){var n=arguments.length>3?arguments[3]:void 0;return e.reduce((function(e,t){return e.concat(C(e,n&&"function"==typeof n?n:function(e){return"string"==typeof e.name?S(t,e.name):null!==e.name&&"object"===u()(e.name)&&S(t,e.name.displayName)}))}),[t])}function E(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return p(n)?(console.warn("Functions are not supported as filter matchers"),[]):e.filter((function(e){return m(n)&&b(n,e[t],r)||f(n)&&y(n,e[t],r)||e[t]===n}))}function x(e){if(e.hasOwnProperty("_reactRootContainer"))return e._reactRootContainer._internalRoot.current;var t=Object.keys(e).find((function(e){return e.startsWith("__reactInternalInstance")||e.startsWith("__reactFiber")||e.startsWith("__reactContainer")}));return t?e[t]:void 0}},function(e,t,n){var r=n(17),i=n(18),o=n(19),a=n(20);e.exports=function(e){return r(e)||i(e)||o(e)||a()},e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t){function n(t){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?(e.exports=n=function(e){return typeof e},e.exports.default=e.exports,e.exports.__esModule=!0):(e.exports=n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.default=e.exports,e.exports.__esModule=!0),n(t)}e.exports=n,e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t){function n(t){return e.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},e.exports.default=e.exports,e.exports.__esModule=!0,n(t)}e.exports=n,e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e},e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t){function n(t,r){return e.exports=n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},e.exports.default=e.exports,e.exports.__esModule=!0,n(t,r)}e.exports=n,e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t,n){var r=n(6);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&r(e,t)},e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t,n){var r=n(3),i=n(6),o=n(22),a=n(23);function s(t){var n="function"==typeof Map?new Map:void 0;return e.exports=s=function(e){if(null===e||!o(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(e))return n.get(e);n.set(e,t)}function t(){return a(e,arguments,r(this).constructor)}return t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),i(t,e)},e.exports.default=e.exports,e.exports.__esModule=!0,s(t)}e.exports=s,e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r},e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return i}));var r=n(0);function i(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:5e3,n=arguments.length>1?arguments[1]:void 0;if(e.isReactLoaded)return Promise.resolve("React already loaded");var i=function(){var e=document.createTreeWalker(document);if(n)return document.querySelector(n);for(;e.nextNode();)if(e.currentNode.hasOwnProperty("_reactRootContainer"))return e.currentNode};return new Promise((function(n,o){var a=!1,s=null;!function t(){var o=i();if(o&&(e.isReactLoaded=!0,e.rootReactElement=Object(r.c)(o),e.rootReactElement))return clearTimeout(s),n();a||setTimeout(t,200)}(),s=setTimeout((function(){a=!0,o("Timed out")}),t)}))}}).call(this,n(9))},function(e,t,n){"use strict";n.d(t,"a",(function(){return I}));var r=n(1),i=n.n(r),o=n(4),a=n.n(o),s=n(5),u=n.n(s),c=n(7),l=n.n(c),d=n(13),f=n.n(d),h=n(3),p=n.n(h),v=n(8),m=n.n(v),g=n(0);function y(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=p()(e);if(t){var i=p()(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return f()(this,n)}}var b=function(e){l()(n,e);var t=y(n);function n(e){return a()(this,n),e||(e=[]),t.call.apply(t,[this].concat(i()(e)))}return u()(n,[{key:"byProps",value:function(e){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{exact:!1}).exact;return new n(Object(g.b)(this,"props",e,t))}},{key:"byState",value:function(e){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{exact:!1}).exact;return new n(Object(g.b)(this,"state",e,t))}}]),n}(m()(Array)),w=function(e){l()(n,e);var t=y(n);function n(e,r){var i;for(var o in a()(this,n),(i=t.call(this,e))._nodes=r,e)i[o]=e[o];return i}return u()(n,[{key:"byProps",value:function(e){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{exact:!1}).exact;return new n(Object(g.b)(this._nodes,"props",e,t)[0],this._nodes)}},{key:"byState",value:function(e){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{exact:!1}).exact;return new n(Object(g.b)(this._nodes,"state",e,t)[0],this._nodes)}}]),n}(m()(Object)),I=function(){function e(t,n){a()(this,e),this.selectors=t.split(" ").filter((function(e){return!!e})).map((function(e){return e.trim()})),this.rootComponent=n,this.tree=Object(g.a)(this.rootComponent)}return u()(e,[{key:"find",value:function(){return this.nodes=new b(Object(g.d)(this.selectors,this.tree,!0)),new w(this.nodes[0],this.nodes)}},{key:"findAll",value:function(){return new b(Object(g.d)(this.selectors,this.tree))}}]),e}()},function(e,t,n){var r=n(2).default,i=n(21);e.exports=function(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?i(e):t},e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t,n){"use strict";var r=Array.isArray,i=Object.keys,o=Object.prototype.hasOwnProperty;e.exports=function e(t,n){if(t===n)return!0;if(t&&n&&"object"==typeof t&&"object"==typeof n){var a,s,u,c=r(t),l=r(n);if(c&&l){if((s=t.length)!=n.length)return!1;for(a=s;0!=a--;)if(!e(t[a],n[a]))return!1;return!0}if(c!=l)return!1;var d=t instanceof Date,f=n instanceof Date;if(d!=f)return!1;if(d&&f)return t.getTime()==n.getTime();var h=t instanceof RegExp,p=n instanceof RegExp;if(h!=p)return!1;if(h&&p)return t.toString()==n.toString();var v=i(t);if((s=v.length)!==i(n).length)return!1;for(a=s;0!=a--;)if(!o.call(n,v[a]))return!1;for(a=s;0!=a--;)if(!e(t[u=v[a]],n[u]))return!1;return!0}return t!=t&&n!=n}},function(e,t,n){"use strict";n.r(t),function(e){n.d(t,"resq$",(function(){return s})),n.d(t,"resq$$",(function(){return u}));var r=n(12),i=n(11);n.d(t,"waitToLoadReact",(function(){return i.a}));var o=n(0);function a(t,n,i){if(!i&&!e.isReactLoaded)throw new Error("Could not find the root element of your application");var a=e.rootReactElement;if(i instanceof HTMLElement&&(a=Object(o.c)(i)),!a)throw new Error("Could not find instance of React in given element");return new r.a(t,a)[n]()}function s(e,t){return a(e,"find",t)}function u(e,t){return a(e,"findAll",t)}}.call(this,n(9))},function(e,t,n){var r=n(10);e.exports=function(e){if(Array.isArray(e))return r(e)},e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t){e.exports=function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)},e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t,n){var r=n(10);e.exports=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}},e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e},e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t){e.exports=function(e){return-1!==Function.toString.call(e).indexOf("[native code]")},e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t,n){var r=n(6),i=n(24);function o(t,n,a){return i()?(e.exports=o=Reflect.construct,e.exports.default=e.exports,e.exports.__esModule=!0):(e.exports=o=function(e,t,n){var i=[null];i.push.apply(i,t);var o=new(Function.bind.apply(e,i));return n&&r(o,n.prototype),o},e.exports.default=e.exports,e.exports.__esModule=!0),o.apply(null,arguments)}e.exports=o,e.exports.default=e.exports,e.exports.__esModule=!0},function(e,t){e.exports=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}},e.exports.default=e.exports,e.exports.__esModule=!0}])},573:function(e,t,n){var r=n(763);function i(e){return e.reduce((function(e,t,n,r){return e+t}))}function o(e){if(r.isArray(e))return e;if("string"===typeof e)return e.split("");throw Error("Parameter must be a string or array.")}t.$m=function(e,t){return e=o(e),t=o(t),r.intersection(e,t).length/r.union(e,t).length}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}(),n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=function(e){return e.paths=[],e.children||(e.children=[]),e},function(){"use strict";var e={};function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function r(){r=function(){return e};var e={},n=Object.prototype,i=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},s=a.iterator||"@@iterator",u=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function l(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(N){l=function(e,t,n){return e[t]=n}}function d(e,t,n,r){var i=t&&t.prototype instanceof p?t:p,a=Object.create(i.prototype),s=new A(r||[]);return o(a,"_invoke",{value:S(e,n,s)}),a}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(N){return{type:"throw",arg:N}}}e.wrap=d;var h={};function p(){}function v(){}function m(){}var g={};l(g,s,(function(){return this}));var y=Object.getPrototypeOf,b=y&&y(y(M([])));b&&b!==n&&i.call(b,s)&&(g=b);var w=m.prototype=p.prototype=Object.create(g);function I(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,n){function r(o,a,s,u){var c=f(e[o],e,a);if("throw"!==c.type){var l=c.arg,d=l.value;return d&&"object"==t(d)&&i.call(d,"__await")?n.resolve(d.__await).then((function(e){r("next",e,s,u)}),(function(e){r("throw",e,s,u)})):n.resolve(d).then((function(e){l.value=e,s(l)}),(function(e){return r("throw",e,s,u)}))}u(c.arg)}var a;o(this,"_invoke",{value:function(e,t){function i(){return new n((function(n,i){r(e,t,n,i)}))}return a=a?a.then(i,i):i()}})}function S(e,t,n){var r="suspendedStart";return function(i,o){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===i)throw o;return T()}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var s=k(a,n);if(s){if(s===h)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=f(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===h)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function k(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,k(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),h;var i=f(r,e.iterator,t.arg);if("throw"===i.type)return t.method="throw",t.arg=i.arg,t.delegate=null,h;var o=i.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,h):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,h)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function x(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function A(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function M(e){if(e){var t=e[s];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,r=function t(){for(;++n<e.length;)if(i.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=void 0,t.done=!0,t};return r.next=r}}return{next:T}}function T(){return{value:void 0,done:!0}}return v.prototype=m,o(w,"constructor",{value:m,configurable:!0}),o(m,"constructor",{value:v,configurable:!0}),v.displayName=l(m,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,m):(e.__proto__=m,l(e,c,"GeneratorFunction")),e.prototype=Object.create(w),e},e.awrap=function(e){return{__await:e}},I(C.prototype),l(C.prototype,u,(function(){return this})),e.AsyncIterator=C,e.async=function(t,n,r,i,o){void 0===o&&(o=Promise);var a=new C(d(t,n,r,i),o);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},I(w),l(w,c,"Generator"),l(w,s,(function(){return this})),l(w,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=M,A.prototype={constructor:A,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!e)for(var t in this)"t"===t.charAt(0)&&i.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function n(n,r){return a.type="throw",a.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r],a=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var s=i.call(o,"catchLoc"),u=i.call(o,"finallyLoc");if(s&&u){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=e,a.arg=t,o?(this.method="next",this.next=o.finallyLoc,h):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),x(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var i=r.arg;x(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:M(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),h}},e}function i(e,t,n,r,i,o,a){try{var s=e[o](a),u=s.value}catch(c){return void n(c)}s.done?t(u):Promise.resolve(u).then(r,i)}function o(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function s(e){i(a,r,o,s,u,"next",e)}function u(e){i(a,r,o,s,u,"throw",e)}s(void 0)}))}}n.r(e),n.d(e,{default:function(){return Mn}});var a,s,u={queryParams:void 0},c=function(){return u.queryParams||(u.queryParams=Object.fromEntries(new URLSearchParams(window.location.search).entries())),u.queryParams};!function(e){e.Script="script",e.App="app"}(a||(a={})),function(e){e.TodoListApp="todo",e.ReplayerApp="replayer",e.SessionGraphApp="sessiongraph"}(s||(s={}));var l={appType:"script",testAppName:"todo"};function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e){var n=function(e,n){if("object"!==t(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var i=r.call(e,n||"default");if("object"!==t(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===n?String:Number)(e)}(e,"string");return"symbol"===t(n)?n:String(n)}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,f(r.key),r)}}function p(e,t,n){return t&&h(e.prototype,t),n&&h(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var v,m,g,y=function(){function e(t){if(d(this,e),this.structuralVicinity=void 0,this.visualVicinity=void 0,this.serializedElement=void 0,this.attributes={},this.classes={},this.innerText=void 0,this.tag=void 0,this.style=void 0,this.innerFeatures=void 0,this.staticCandidates=void 0,this.positioning=void 0,this.svgs=void 0,"object"===typeof t)for(var n in t)this[n]=t[n];else if("string"===typeof t){var r=JSON.parse(t);for(var i in r)this[i]=r[i]}}return p(e,[{key:"serialize",value:function(){return JSON.stringify(this)}}]),e}(),b={attributesToExtract:["class","src","placeholder","href","checked","disabled","contenteditable","draggable","hidden","inputmode","role","title","name","type","readonly","size","required","multiple","min","max","step","maxlength","alt","loop","controls","poster"],structuralVicinity:{type:"fixed",value:6,useDecayingLimit:!0},visualVicinity:{radius:50,scanStep:10},vicinityFeatureElementsOnly:!0,react:{}};function w(e,t,n){return(t=f(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function I(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function C(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?I(Object(n),!0).forEach((function(t){w(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):I(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}!function(e){e[e.Media=0]="Media",e[e.NoData=1]="NoData",e[e.Anchor=2]="Anchor",e[e.Button=3]="Button",e[e.Input=4]="Input",e[e.Text=5]="Text",e[e.SVG=6]="SVG"}(v||(v={})),function(e){e.Element="element",e.Parent="parent",e.Child="child",e.LeftSibling="left-sibling",e.RightSibling="right-sibling"}(m||(m={})),function(e){e.Center="center",e.Top="top",e.Bottom="bottom",e.Left="left",e.Right="right",e.TopRight="top-right",e.TopLeft="top-left",e.BottomRight="bottom-right",e.BottomLeft="bottom-left"}(g||(g={}));var S=function(){function e(t){var n=this;d(this,e),this.document=t,this.attributesByTagName={rect:["width","height"],circle:["cx","cy","r"],ellipse:["cx","cy","rx","ry"],line:["x1","y1","x2","y2"],polygon:["points"],polyline:["points"],path:["d"],text:["x","y"]},this.limit=5,this.extractSVG=function(e){return Array.from(e.children).map((function(e){var t=n.attributesByTagName[e.tagName.toLowerCase()];if(!t)return null;var r=t.reduce((function(t,n){var r=e.getAttribute(n);return C(C({},t),{},w({},n,r))}),{});return{tagName:e.tagName.toLowerCase(),attributes:r}})).filter((function(e){return!!e}))}}return p(e,[{key:"extract",value:function(e){var t=e.matches("svg")?[e]:e.querySelectorAll("svg");if(t.length&&!(t.length>this.limit))return Array.from(t).map(this.extractSVG)}}]),e}(),k=function(e,t){var n=e.tagName.toLowerCase();switch(n){case"img":case"video":case"audio":return{type:v.Media,tag:n,src:e.getAttribute("src"),size:{width:e.clientWidth,height:e.clientHeight},screenSize:{width:window.innerWidth,height:window.innerHeight},isRoot:t};case"svg":return{type:v.SVG,tag:n,components:new S(document).extract(e)[0],isRoot:t};case"a":return{type:v.Anchor,tag:n,href:e.getAttribute("href"),text:e.innerText,isRoot:t};case"button":return{type:v.Button,tag:n,text:e.innerText,buttonType:e.getAttribute("type")||"button",isRoot:t};case"input":return{type:v.Input,tag:n,inputType:e.getAttribute("type"),placeholder:e.getAttribute("placeholder"),isRoot:t};case"table":case"form":case"textarea":case"iframe":case"select":return{type:v.NoData,tag:n,isRoot:t}}if(e.innerHTML.trim()===e.innerText&&e.innerHTML.length)return{type:v.Text,tag:n,text:E(e.innerHTML),isRoot:t}},E=function(e){return e.length>256?e.substring(0,256)+"...":e};function x(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function A(e,t){if(e){if("string"===typeof e)return x(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?x(e,t):void 0}}function M(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o,a,s=[],u=!0,c=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);u=!0);}catch(l){c=!0,i=l}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw i}}return s}}(e,t)||A(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function T(e){return function(e){if(Array.isArray(e))return x(e)}(e)||function(e){if("undefined"!==typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||A(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function N(e,t){var n="undefined"!==typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=A(e))||t&&e&&"number"===typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){s=!0,o=e},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}var _=function(){function e(t){d(this,e),this.element=void 0,this.elRect=void 0,this.initialScrollPositions=void 0,this.element=t,this.elRect=this.element.getBoundingClientRect()}return p(e,[{key:"scrollIntoView",value:function(){if(this.getScrollableParentsPositions(this.element),this.element.scrollIntoView({block:"center",inline:"center"}),!function(e){var t=e.getBoundingClientRect();return t.top<=window.innerHeight&&t.left<=window.innerWidth&&t.bottom>=0&&t.right>=0}(this.element)){var e,t=N(this.initialScrollPositions);try{for(t.s();!(e=t.n()).done;){var n=e.value,r=n.element.getBoundingClientRect();if(this.elRect.top<r.top||this.elRect.bottom>r.bottom){var i=this.elRect.top-r.top+n.element.scrollTop;n.element.scrollTop=i}}}catch(o){t.e(o)}finally{t.f()}}return this}},{key:"restore",value:function(){this.initialScrollPositions.forEach((function(e){var t=e.element,n=e.top,r=e.left;try{t.scroll(r,n)}catch(Dn){console.warn("[ScrollHelper/restore] couldn't restore initial scroll for",{element:t,top:n,left:r},Dn)}}))}},{key:"getScrollableParentsPositions",value:function(e){this.initialScrollPositions=[];for(var t=U(e);null!=t;)(t.scrollHeight>t.clientHeight||t.scrollWidth>t.clientWidth)&&this.initialScrollPositions.push({element:t,top:t.scrollTop,left:t.scrollLeft}),t=U(t)}}]),e}(),R=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=n.target,i=void 0===r?document:r,o=n.disabled,a=void 0!==o&&o,s=n.log,u=void 0===s||s,c=n.name,l=n.monitorInput,f=void 0!==l&&l;d(this,e),this.target=void 0,this.name=void 0,this.disabled=void 0,this.logActivity=void 0,this.monitorInput=void 0,this.cache=void 0,this.observer=void 0,this.ignoreMutationsWithAttributes=["checksum-data-visible","checksum-data-interactive","checksum-target-node","checksumid"],this.ignoreMutationsWithAttributeRegexPatterns=["checksum-radial-traverse-.+"],this.ignoreElementsWithClasses=["checksum-dom-cache-ignore"],this.inputEnabledSelectors=["input","textarea","[contenteditable=true]"].join(","),this.shouldIgnoreMutationRecord=function(e){try{if("attributes"===e.type&&t.ignoreMutationsWithAttributes.includes(e.attributeName))return!0;if("attributes"===e.type&&t.ignoreMutationsWithAttributeRegexPatterns.some((function(t){return new RegExp("^".concat(t,"$")).test(e.attributeName)})))return!0;if("attributes"===e.type&&"class"===e.attributeName){var n=function(e){return e.split(" ").filter((function(e){return![":hover","rrweb-paused"].includes(e)})).sort().join(" ")};return n(e.oldValue)===n(e.target.className)}var r=function(e){return t.ignoreElementsWithClasses.some((function(t){return e.classList.contains(t)}))};if("childList"===e.type&&Array.from(e.addedNodes).every((function(e){return r(e)}))&&Array.from(e.removedNodes).every((function(e){return r(e)})))return!0}catch(Dn){}return!1},this.monitoredTextElements=[],this.monitorInputEnabledElement=function(e){e.addEventListener("input",(function(e){t.invalidate()}))},this.target=i,this.name=c,this.disabled=a,this.logActivity=u,this.monitorInput=f,this.startObserver()}return p(e,[{key:"startObserver",value:function(){var e=this;this.observer=new MutationObserver((function(t){t.every(e.shouldIgnoreMutationRecord)||(e.invalidate(),e.monitorInput&&t.forEach((function(t){t.addedNodes.forEach((function(t){if(t.nodeType===Node.ELEMENT_NODE){var n=t;(n.matches(e.inputEnabledSelectors)||n.isContentEditable)&&e.monitorInputEnabledElement(n)}}))})))})),this.observer.observe(this.target,{childList:!0,subtree:!0,attributes:!0,characterData:!0,attributeOldValue:!0,characterDataOldValue:!0}),this.monitorInput&&this.startInputMonitoring()}},{key:"startInputMonitoring",value:function(){this.monitoredTextElements=j(this.inputEnabledSelectors),this.monitoredTextElements.forEach(this.monitorInputEnabledElement)}},{key:"get",value:function(){return this.log("get","has cache:",!!this.cache),this.cache}},{key:"set",value:function(e){this.disabled||(this.cache=e)}},{key:"hasCache",value:function(){return this.log("hasCache",!!this.cache),!!this.cache}},{key:"invalidate",value:function(){this.set(void 0)}},{key:"log",value:function(){var e;if(this.logActivity){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];(e=console).log.apply(e,["[DOMMutationDependentCache] ".concat(this.name?"[".concat(this.name,"]"):"",":")].concat(n))}}}],[{key:"getInstance",value:function(t,n){var r,i=this.makeNameForCache(t,null===n||void 0===n?void 0:n.flags);e.instances[i]||(e.instances[i]=new e(C(C({},n),{},{name:null!==(r=null===n||void 0===n?void 0:n.name)&&void 0!==r?r:t})),null!==n&&void 0!==n&&n.initialValue&&e.instances[i].set(null===n||void 0===n?void 0:n.initialValue));var o=e.instances[i];return null!==n&&void 0!==n&&n.invalidate&&o.invalidate(),o}},{key:"invalidateAll",value:function(){Object.values(e.instances).forEach((function(e){return e.invalidate()}))}},{key:"makeNameForCache",value:function(e,t){return"".concat(e).concat(t?JSON.stringify(t):"")}}]),e}();R.instances={},window.DOMMutationDependentCache=R;var O=function(e){},D=function(e){},L=["button","select","input","textarea","option","a","[role=button]","[role=checkbox]","[role=radio]","[role=link]","[type=button]"],F=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=n.allowDisabled,i=void 0!==r&&r,o=n.useDataVisibleAttribute,a=void 0===o||o,s=R.getInstance("getAllInteractableHTMLElements",{target:e}),u=Date.now(),c=function(e){var t=e.reduce((function(e,t){return!i&&t.state.disabled?e:[].concat(T(e),[t.element])}),[]);return console.log("[getAllInteractableHTMLElements] done, took",Date.now()-u,"ms"),t};if(s.hasCache())return c(s.get());var l=["pointer","text","vertical-text","zoom-in","zoom-out","help"],d=j("*",e,{excludeCrossOriginIframes:!0});O("[getAllInteractableHTMLElements] items");var f=d.reduce((function(e,n){var r="disabled"in n&&n.disabled;return n.matches(L.concat(t).join(","))||!!n.onclick||l.includes(window.getComputedStyle(n).cursor)||n.isContentEditable?[].concat(T(e),[{element:n,disabled:r}]):e}),[]);D("[getAllInteractableHTMLElements] items"),O("[getAllInteractableHTMLElements] getCompoundInteractableRootElement");var h=f.reduce((function(e,n){var r=V(n.element,t),i=e.find((function(e){return e.element===r}));return i?!n.disabled&&i.state.disabled&&(i.state.disabled=!1):e.push({element:r,state:{disabled:n.disabled}}),e}),[]);D("[getAllInteractableHTMLElements] getCompoundInteractableRootElement"),O("[getAllInteractableHTMLElements] isElementHidden");var p=h.filter((function(e){var t=e.element;if(a){var n=t.getAttribute("checksum-data-visible");if(n)return"true"===n}return!G(t).isHidden}));return D("[getAllInteractableHTMLElements] isElementHidden"),s.set(p),c(p)},V=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];if(!e)return e;try{if("isContentEditable"in e&&e.isContentEditable)return e;if("closest"in e){var n=B(e,L.concat(t).join(","));if(n)return n}var r=window.getComputedStyle(e).cursor;if(["auto","default","context-menu","help","progress","wait"].includes(r))return e;for(var i=e;i;){var o=i.parentElement;if(!o||(o.nodeType!==Node.ELEMENT_NODE||window.getComputedStyle(o).cursor)!==r)return i;i=i.parentNode}return e}catch(Dn){return console.error("getCompoundInteractableRootElement",e,Dn),e}};var B=function e(t,n){if(t.matches(n))return t;var r=t.slot;if(r){for(var i=t.parentElement;i;){if(i.shadowRoot){var o=i.shadowRoot.querySelector('slot[name="'.concat(r,'"]'));if(o)return e(o,n)}i=i.parentElement}return null}var a=t.closest(n);if(a)return a;var s=t.getRootNode();return s.nodeType===Node.DOCUMENT_FRAGMENT_NODE?e(s.host,n):null},j=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=n.excludeCrossOriginIframes,i=void 0!==r&&r,o=n.includeHTML,a=void 0!==o&&o,s=[];return function t(n){!function(t){t.querySelectorAll(e).forEach((function(e){return s.push(e)}))}(n);var r=[];!function e(t){t.shadowRoot&&r.push(t.shadowRoot),t.childNodes.forEach((function(t){return e(t)}))}(n),r.forEach((function(e){return t(e)})),n.querySelectorAll("iframe").forEach((function(e){if(!i||!function(e){return!e.src||window.location.origin!==new URL(e.src).origin}(e))try{var n=e.contentDocument;n&&t(n)}catch(Dn){return}}))}(t),a&&t.documentElement.matches(e)&&s.push(t.documentElement),s};function P(e){var t=e.getRootNode();return t.nodeType===Node.DOCUMENT_FRAGMENT_NODE?function(e,t){var n=e.querySelectorAll("slot");if(!n.length)return e.innerText;var r=e.cloneNode(!0),i=r.querySelectorAll("slot");return n.forEach((function(e,t){var n=e.assignedNodes();i[t].innerText=n.map((function(e){switch(e.nodeType){case Node.TEXT_NODE:return e.textContent;case Node.ELEMENT_NODE:return e.innerText}})).filter((function(e){return!!e})).join("\n")})),r.innerText.trim()}(e):e.innerText}var W=function(e){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).flattenShadowRootChildren,n=void 0!==t&&t,r=Array.from(e.childNodes);if(e.nodeType===Node.ELEMENT_NODE){var i,o=e;if(o.shadowRoot&&(r=r.filter((function(e){return!e.assignedSlot})),n?r=r.concat(Array.from(o.shadowRoot.childNodes)):r.push(o.shadowRoot)),"slot"===o.tagName.toLowerCase())(i=r).push.apply(i,T(o.assignedNodes()))}return r},U=function(e){var t=e.parentElement;if(t)return t;switch(e.nodeType){case Node.ELEMENT_NODE:var n=e;if(n.assignedSlot)return n.assignedSlot;break;case Node.DOCUMENT_FRAGMENT_NODE:return e.host}var r=e.parentNode;return r&&r.nodeType===Node.DOCUMENT_FRAGMENT_NODE?r.host:null};function G(e){if(!function(e){var t=window.getComputedStyle(e);return"hidden"!==t.visibility&&"none"!==t.display&&"0"!==t.opacity}(e))return{isHidden:!0};if(function(e){var t=e.parentElement,n=window.getComputedStyle(e);if("absolute"===n.position||"fixed"===n.position)return!1;var r=new _(e).scrollIntoView(),i=function(e){return r.restore(),e};for(;t;){if(!(t instanceof Element))return i(!1);var o=window.getComputedStyle(t);if("absolute"===o.position||"fixed"===o.position)return i(!1);if(("hidden"===o.overflowX||"hidden"===o.overflowY)&&!H(t,e))return i(!0);t=t.parentElement}return i(!1)}(e))return{isHidden:!0};try{var t=new _(e).scrollIntoView(),n=function(e){var t=e.getBoundingClientRect(),n={top:0,left:0,right:window.innerWidth||document.documentElement.clientWidth,bottom:window.innerHeight||document.documentElement.clientHeight},r={top:Math.max(t.top,n.top),left:Math.max(t.left,n.left),right:Math.min(t.right,n.right),bottom:Math.min(t.bottom,n.bottom)};return r.width=r.right-r.left,r.height=r.bottom-r.top,r.width>0&&r.height>0?r:null}(e);if(!n)return t.restore(),{isHidden:!0};var r,i=[[n.width/2,n.height/2,!0],[Math.max(.01*n.width,1),Math.max(.01*n.height,1)],[Math.min(.99*n.width,n.width-1),Math.max(.01*n.height,1)],[Math.max(.01*n.width,1),Math.min(.99*n.height,n.height-1)],[Math.min(.99*n.width,n.width-1),Math.min(.99*n.height,n.height-1)]],o=e.ownerDocument;if(e.id&&e.type&&["checkbox","radio"].includes(e.type)){var a=j('label[for="'.concat(e.id,'"]'),o);a.length&&(r=a[0])}for(var s=0,u=i;s<u.length;s++){var c=M(u[s],3),l=c[0],d=c[1],f=c[2],h=o.elementFromPoint(n.left+l>=0&&n.left+l<=window.innerWidth?n.left+l:l,n.top+d>=0&&n.top+d<=window.innerHeight?n.top+d:d);if(h===e)return t.restore(),{isHidden:!1,clickOffset:f?void 0:{x:l,y:d}};if(h){if(!0===f&&h.shadowRoot)return t.restore(),G(h);for(var p=h;p;){if(p===e||r&&r===p)return t.restore(),{isHidden:!1,clickOffset:f?void 0:{x:l,y:d}};p=U(p)}}}return t.restore(),r?G(r):{isHidden:!0}}catch(Dn){throw Dn}}function H(e,t){var n=e.getBoundingClientRect(),r=t.getBoundingClientRect();return n.left<r.right&&n.right>r.left&&n.top<r.bottom&&n.bottom>r.top}var z,q=function(e){return Object.keys(e||{}).reduce((function(t,n){var r=e[n];return r&&(t[n]=r),t}),{})},Z=function(e){var t=q(e);return!(!t||!Object.keys(t).length)},Q=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=n.contains,i=void 0!==r&&r,o=n.matchWholeWord;return i?void 0!==o&&o?"[".concat(e,'="').concat(t,'"],[').concat(e,'*="').concat(t,' "],[').concat(e,'*=" ').concat(t,' "],[').concat(e,'*=" ').concat(t,'"]'):"[".concat(e,'*="').concat(t,'"]'):"[".concat(e,'="').concat(t,'"]')},Y=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=n.contains,i=void 0!==r&&r,o=n.matchWholeWord;return i?void 0!==o&&o?e===t||e.startsWith(t)||e.includes(" ".concat(t," "))||e.endsWith(t):e.includes(t):e===t},K=function(){function e(t){d(this,e),this.document=t,this.elementsByQueryCache={}}return p(e,[{key:"getElementsByQuery",value:function(e){return this.elementsByQueryCache[e]||(this.elementsByQueryCache[e]=j(e,this.document)),this.elementsByQueryCache[e]}},{key:"extract",value:function(e){for(var t=this,n=e.element,r=e.setClass,i=e.setAttribute,o=e.getElementsInStructuralVicinity,a=e.getElementsInVisualVicinity,s=function(){var e=n.attributes[u],s=e.name,c=e.value;return b.attributesToExtract.includes(s)?"string"!==typeof c?"continue":"class"===s?(c.split(" ").forEach((function(e){e.length&&r(e,t.processAttribute({element:n,getElementsInStructuralVicinity:o,getElementsInVisualVicinity:a},s,e,{contains:!0,matchWholeWord:!0}))})),"continue"):void i(s,t.processAttribute({element:n,getElementsInStructuralVicinity:o,getElementsInVisualVicinity:a},s,c)):"continue"},u=0;u<n.attributes.length;++u)s()}},{key:"processAttribute",value:function(e,t,n){var r=e.element,i=e.getElementsInStructuralVicinity,o=e.getElementsInVisualVicinity,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},s=this.getElementsByQuery("*"),u=Q(t,n,a),c=this.getElementsByQuery(u),l=this.getElementsByQuery("".concat(r.tagName.toLowerCase())),d=c.filter((function(e){return e.tagName===r.tagName})),f=i?i():[],h=f.filter((function(e){return e.element.attributes[t]&&Y(e.element.attributes[t].value,n,a)})),p=o?o():[],v=p.filter((function(e){return e.element.attributes[t]&&Y(e.element.attributes[t].value,n,a)}));return{value:n,globalUniqueness:1-c.length/s.length,tagUniqueness:1-d.length/l.length,structuralVicinityUniqueness:i?1-h.length/f.length:void 0,visualVicinityUniqueness:o?1-v.length/p.length:void 0}}}]),e}(),X=function(){function e(t){var n=this;d(this,e),this.el=null,this.structuralVicinityData=void 0,this.visualVicinityData=void 0,this.serializedElement="",this.attributes={},this.classes={},this.innerText=void 0,this.tag=void 0,this.style=void 0,this.react=void 0,this.innerFeatures=void 0,this.positioning=void 0,this.svgs=void 0,this.attributesExtractor=void 0,this.getElementsInStructuralVicinity=function(){return n.structuralVicinityData.elementsInStructuralVicinity},this.setElementStructuralVicinityData=function(e){n.structuralVicinityData=e},this.setElementVisualVicinityData=function(e){n.visualVicinityData=e},this.getElementsInVisualVicinity=function(){return n.visualVicinityData},this.setSerializedElement=function(e){n.serializedElement=e},this.setAttribute=function(e,t){n.attributes[e]=t},this.setClass=function(e,t){n.classes[e]=t},this.setInnerText=function(e){n.innerText=e},this.setStyle=function(e){n.style=e},this.setTag=function(e){n.tag=e},this.setReact=function(e){n.react=e},this.setInnerFeatures=function(e){n.innerFeatures=e},this.setPositioning=function(e){n.positioning=e},this.setSVGs=function(e){n.svgs=e},this.el=t,this.attributesExtractor=new K(this.el.ownerDocument)}return p(e,[{key:"serialize",value:function(){}},{key:"getSerializedElement",value:function(){return this.serializedElement}},{key:"element",get:function(){return this.el}},{key:"getAttributes",value:function(){return this.attributes}},{key:"getClasses",value:function(){return this.classes}},{key:"getStyle",value:function(){return this.style}},{key:"getInlineStyle",value:function(){return this.style.inline}},{key:"getComputedStyle",value:function(){return this.style.computed}},{key:"getTag",value:function(){return this.tag}},{key:"getInnerFeatures",value:function(){return this.innerFeatures}},{key:"getInnerText",value:function(){return this.innerText}},{key:"getSVGs",value:function(){return this.svgs}},{key:"toMetadata",value:function(){return{structuralVicinity:this.makeStructuralVicinityMetadata(),visualVicinity:this.makeVisualVicinityMetadata(),serializedElement:this.getSerializedElement(),attributes:this.getAttributes(),classes:this.getClasses(),innerText:this.getInnerText(),tag:this.getTag(),style:this.getStyle(),innerFeatures:this.getInnerFeatures(),staticCandidates:this.extractStaticCandidates(),positioning:this.positioning,svgs:this.getSVGs()}}},{key:"extractStaticCandidates",value:function(){return q({text:this.extractStaticTextCandidate(),labeled:this.extractLabeled(),labeling:this.extractLabeling(),svgTitle:this.extractSVGTitle()})}},{key:"makeVicinityMetadata",value:function(e,t){var n=this;return e.reduce((function(e,r){var i=n.isVicinityQualifiedElement(r.element),o=i.qualified,a=i.feature;if(!o)return e;var s={},u={};n.attributesExtractor.extract({element:r.element,setClass:function(e,t){return s[e]=t},setAttribute:function(e,t){return u[e]=t}});var c=C({tag:r.element.tagName.toLowerCase(),classes:s,attributes:u,text:n.extractTextForMetadata(r.element),feature:a,relativePosition:n.element.compareDocumentPosition(r.element)},t(r));return e.push(c),e}),[])}},{key:"makeStructuralVicinityMetadata",value:function(){return this.makeVicinityMetadata(this.getElementsInStructuralVicinity(),(function(e){return{position:e.position}}))}},{key:"makeVisualVicinityMetadata",value:function(){return this.makeVicinityMetadata(this.getElementsInVisualVicinity(),(function(e){return{position:[e.position],distance:e.distance}}))}},{key:"isVicinityQualifiedElement",value:function(e){if(e===this.element)return{qualified:!1};if(!b.vicinityFeatureElementsOnly)return{qualified:!0};var t=k(e);return{qualified:!!t,feature:t}}},{key:"extractTextForMetadata",value:function(e){if(e.innerHTML===e.innerText){var t=e.innerHTML;return t.length>256?t.substring(0,256)+"...":t}}},{key:"extractStaticTextCandidate",value:function(){var e,t,n;switch(this.tag){case"input":case"textarea":return null===(e=this.attributes)||void 0===e||null===(t=e.placeholder)||void 0===t?void 0:t.value;default:return null===(n=this.innerText)||void 0===n?void 0:n.content}}},{key:"extractLabeling",value:function(){if("label"===this.element.tagName.toLowerCase())return P(this.element);var e=B(this.element,"label");if(e&&this.attributeExists(e.getAttribute("for")))return P(e);try{if(this.element.id&&this.element.id.length)if(j('[aria-labelledby="'.concat(this.element.id,'"]')).length)return P(this.element)}catch(Dn){console.error("extractLabeling error",Dn)}}},{key:"extractLabeled",value:function(){var e=this.element.getAttribute("aria-label");if(this.attributeExists(e))return e;var t=B(this.element,"label");if(t&&!this.attributeExists(t.getAttribute("for")))return P(t);if(this.element.id&&this.element.id.length)try{var n=j("label[for=".concat(this.element.id,"]"));if(n.length)return P(n[0])}catch(Dn){return}var r=this.element.getAttribute("aria-labelledby");if(this.attributeExists(r)){var i=j(r.split(" ").map((function(e){return"#".concat(e)})).join(","));if(i.length)return P(i[0])}}},{key:"extractSVGTitle",value:function(){try{if("svg"!==this.element.tagName.toLowerCase())return;var e=this.element.querySelector("title");if(!e)return;return P(e)}catch(Dn){console.error("extractSVGTitle error",Dn)}}},{key:"attributeExists",value:function(e){return e&&e.length>0}}]),e}(),J=function(){function e(t,n){d(this,e),this.element=void 0,this.config=void 0,this.structuralVicinityData={elementsInStructuralVicinity:[],html:""},this.element=t,this.config=n}return p(e,[{key:"getInitialLimit",value:function(){switch(this.config.type){case"ratio":return document.querySelectorAll("*").length*this.config.value;case"fixed":return this.config.value}}},{key:"calculate",value:function(){var e=Date.now().toString();return this.structuralVicinityData.html=this.populateStructuralVicinity(this.element,[m.Element],{runId:e,step:0,limit:this.getInitialLimit()}),this.structuralVicinityData.elementsInStructuralVicinity.forEach((function(t){return t.element.attributes.removeNamedItem("checksum-radial-traverse-".concat(e))})),this.structuralVicinityData}},{key:"populateStructuralVicinity",value:function(e,t,n){var r=this,i=n.runId,o=n.step,a=n.limit;if(!e||o>a)return"";if(void 0!==e.attributes["checksum-radial-traverse-".concat(i)])return"";this.structuralVicinityData.elementsInStructuralVicinity.push({element:e,position:t}),e.setAttribute("checksum-radial-traverse-".concat(i),o.toString());var s={runId:i,step:o+1,limit:this.config.useDecayingLimit?a-1:a},u=this.populateStructuralVicinity(U(e),[].concat(T(t),[m.Parent]),s),c=this.populateStructuralVicinity(e.previousElementSibling,[].concat(T(t),[m.LeftSibling]),s),l=this.populateStructuralVicinity(e.nextElementSibling,[].concat(T(t),[m.RightSibling]),s),d=[];(function(e){var t,n,r=Array.from(e.children);return e.shadowRoot&&(t=r=r.filter((function(e){return!e.assignedSlot}))).push.apply(t,T(Array.from(e.shadowRoot.children))),"slot"===e.tagName.toLowerCase()&&(n=r).push.apply(n,T(e.assignedElements())),r})(e).map((function(e,n){return d.push(r.populateStructuralVicinity(e,[].concat(T(t),[m.Child]),s))}));var f=c+e.outerHTML.replace(e.innerHTML,d.join(""))+l;return u&&!u.includes(e.outerHTML)?u.replace("></",">".concat(f,"</")):u?u.replace(e.outerHTML,f):f}}]),e}();!function(e){e[e.New=0]="New",e[e.Covered=1]="Covered",e[e.ElementTooBig=2]="ElementTooBig",e[e.Self=3]="Self"}(z||(z={}));var $=function(){function e(t,n){var r;d(this,e),this.document=t,this.config=n,this.debug=!1,this.sampleBoxColors=(w(r={},z.New,"green"),w(r,z.Covered,"orange"),w(r,z.ElementTooBig,"red"),w(r,z.Self,"blue"),r)}return p(e,[{key:"calculate",value:function(e){for(var t=this,n=[],r=this.config.radius,i=this.config.scanStep,o=e.getBoundingClientRect(),a=o.left-r;a<o.left+o.width+r;a+=i)for(var s=function(){var e=a+i/2,s=u+i/2;if(t.doesRectContain(o,{left:a,top:u,right:a+i,bottom:u+i}))return t.addTrace(e,s,i,z.Self),"continue";var c=t.document.elementFromPoint(e,s);if(!c)return"continue";var l=c.getBoundingClientRect();if(l.width>2*r&&l.height>2*r||t.doesRectContain(l,o))return t.addTrace(e,s,i,z.ElementTooBig),"continue";if(!!n.find((function(e){return e.element===c})))return t.addTrace(e,s,i,z.Covered),"continue";var d=t.getPosition(o,l),f=d.position,h=d.distance;n.push({element:c,position:f,distance:h}),t.addTrace(e,s,i,z.New)},u=o.top-r;u<o.top+o.height+r;u+=i)s();return n}},{key:"getPosition",value:function(e,t){var n=this.getCenter(t),r=n.x,i=n.y,o=this.getCenter(e),a=o.x,s=o.y;return{distance:Number(Math.sqrt(Math.pow(a-r,2)+Math.pow(s-i,2)).toFixed(2)),position:function(){var e=r-a,t=i-s;return e<0&&t<0?g.TopLeft:e>0&&t<0?g.TopRight:e<0&&t>0?g.BottomLeft:e>0&&t>0?g.BottomRight:0===e&&t<0?g.Top:0===e&&t>0?g.Bottom:e<0&&0===t?g.Left:e>0&&0===t?g.Right:g.Center}()}}},{key:"getCenter",value:function(e){return{x:e.width/2+e.left,y:e.height/2+e.top}}},{key:"addTrace",value:function(e,t,n,r){if(this.debug){var i=this.document.createElement("xdiv");i.setAttribute("style","position: absolute; width: ".concat(n,"px; height: ").concat(n,"px; top: ").concat(t,"px; left: ").concat(e,"px; background: ").concat(this.sampleBoxColors[r],"; z-index: 999999999999;opacity:0.4")),this.document.getElementsByTagName("body")[0].prepend(i)}}},{key:"doesRectContain",value:function(e,t){return t.left>=e.left&&t.right<=e.right&&t.top>=e.top&&t.bottom<=e.bottom}},{key:"doRectsOverlap",value:function(e,t){var n=e.right<t.left,r=e.left>t.right,i=e.top>t.bottom,o=e.top<t.top;return!(n||r||i||o)}}]),e}();window.vve=new $({radius:50,scanStep:10});var ee=n(352);window.resq$=ee.resq$,window.resq$$=ee.resq$$;var te=function(){function e(){d(this,e)}return p(e,[{key:"extract",value:function(e){var t=this.findParentComponent(e,{ignoreBaseElement:!0});return{component:t,parentComponent:this.findParentComponent(t.node)}}},{key:"findParentComponent",value:function(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.ignoreBaseElement,i=void 0!==r&&r,o=n.baseElement,a=void 0===o?void 0:o,s=(0,ee.resq$$)("*",e.parentElement).find((function(t){return 1===t.children.length&&t.children[0].node===e}));return a=null!==(t=a)&&void 0!==t?t:e,s&&(i||s.node!==a)?this.parseRESQresult(s):this.findParentComponent(e.parentElement,{baseElement:a,ignoreBaseElement:i})}},{key:"parseRESQresult",value:function(e){if(e){return{name:e.name,node:e.node,isFragment:e.isFragment,stateTokens:function e(t){switch(typeof t){case"string":return[t];case"object":return Array.isArray(t)?t.map(e):Object.keys(t)}}(e.state),propsNames:Object.keys(e.props),hasChildren:!!e.children.length}}}}]),e}(),ne=new te,re=function(){function e(){d(this,e)}return p(e,[{key:"extract",value:function(e){return{component:void 0,parentComponent:void 0}}}]),e}(),ie=(new re,function(){function e(t,n){d(this,e),this.element=void 0,this.config=void 0,this.provider=ne,this.element=t,this.config=n}return p(e,[{key:"extract",value:function(){return this.provider.extract(this.element)}}]),e}()),oe=function(){function e(t){d(this,e),this.document=t,this.tagBaseComputedStyle={}}return p(e,[{key:"extract",value:function(e){var t=e.element,n=e.setStyle,r=t.tagName.toLowerCase();if(!this.tagBaseComputedStyle[r]){var i=this.document.createElement(r);this.document.getElementsByTagName("body")[0].prepend(i),this.tagBaseComputedStyle[r]=this.sanitzieStyle(window.getComputedStyle(i)),i.remove()}n({inline:this.sanitzieStyle(t.style,{acceptEmptyValue:!1}),computed:this.diffComputedStyle(this.tagBaseComputedStyle[r],this.sanitzieStyle(window.getComputedStyle(t)))})}},{key:"diffComputedStyle",value:function(e,t){var n,r;return n=e,r=t,Object.keys(r).reduce((function(e,t){return n[t]===r[t]?e:C(C({},e),{},w({},t,r[t]))}),{})}},{key:"sanitzieStyle",value:function(e){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).acceptEmptyValue,n=void 0===t||t;return Object.keys(e).reduce((function(t,r){if(!isNaN(r))return t;var i=e[r];return n||i?(t[r]=i,t):t}),{})}}]),e}(),ae=function(){function e(t){d(this,e),this.document=t,this.makeFeatureNode=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0,n=e.nodeType===Node.ELEMENT_NODE;return{type:e.nodeType,tag:n?e.tagName.toLowerCase():void 0,feature:n?k(e,t):void 0,children:[],isRoot:t}},this.includeRootElements=!0,this.rootElementsTypeExceptions=[v.Text]}return p(e,[{key:"extract",value:function(e){var t=[],n=this.makeFeatureNode(e,!0);return this.walk(e,n,t),t}},{key:"walk",value:function(e,t,n){var r=this,i=!1;W(e).forEach((function(e){var o=r.makeFeatureNode(e),a=r.walk(e,o,n);a&&t.children.push(o),i||(i=a)}));var o=!!t.feature;return!o||t.isRoot&&!this.shouldIncludeRootNode(t)||n.push(t.feature),o||i}},{key:"shouldIncludeRootNode",value:function(e){return!!this.includeRootElements&&!this.rootElementsTypeExceptions.includes(e.type)}}]),e}();window.inner_features_extractor=new ae;var se=new(function(){function e(){d(this,e),this.weightsSum=0,this.config={attributes:{qualification:{globalUniquenessThreshold:.99,tagUniquenessThreshold:.99},decisionWeight:this.makeWeight(.4)},classes:{qualification:{globalUniquenessThreshold:.99,tagUniquenessThreshold:.99},decisionWeight:this.makeWeight(.4)},tagName:{decisionWeight:this.makeWeight(.6)},style:{inlineWeight:.6,computedWeight:.4,decisionWeight:this.makeWeight(.4)},innerText:{decisionWeight:this.makeWeight(.6),qualification:{exactMatchMax:20,containsMatchMax:10,maxLength:256,minLength:1},ignoreSimilarityScoreBelow:.6},innerFeatures:{decisionWeight:this.makeWeight(.8)},visualVicinity:{decisionWeight:this.makeWeight(.2)},structuralVicinity:{decisionWeight:this.makeWeight(.2)}}}return p(e,[{key:"makeWeight",value:function(e){return this.weightsSum+=e,e}},{key:"get",value:function(){return this.config}},{key:"weight",value:function(e){return e/this.weightsSum}}]),e}()),ue=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.exact,r=void 0!==n&&n,i=t.tag;return j(void 0===i?"*":i).filter((function(t){return r?t.textContent.trim()===e.trim():t.textContent.includes(e)}))},ce=function(){function e(t){d(this,e),this.document=t}return p(e,[{key:"extract",value:function(e){var t=P(e);if(t){var n=se.get().innerText.qualification.maxLength;if(t.length>n)return{content:t,exactMatches:1,containsMatches:1,indexInOrderedSearch:1};var r=ue(t,{exact:!0}),i=ue(t);return{content:t,exactMatches:r.length,containsMatches:i.length,indexInOrderedSearch:r.indexOf(e)}}}}]),e}(),le=function(){function e(t){d(this,e),this.document=t}return p(e,[{key:"extract",value:function(e){var t=e.getBoundingClientRect(),n=t.top,r=t.bottom,i=t.left,o=t.right,a=document.documentElement.scrollHeight,s=document.documentElement.scrollWidth;return{viewport:{size:{height:window.innerHeight,width:window.innerWidth},element:{top:this.normalize(n,window.innerHeight),bottom:this.normalize(r,window.innerHeight),left:this.normalize(i,window.innerWidth),right:this.normalize(o,window.innerWidth)}},document:{size:{height:a,width:s},element:{top:this.normalize(n+window.scrollY,a),bottom:this.normalize(r+window.scrollY,a),left:this.normalize(i+window.scrollX,s),right:this.normalize(o+window.scrollX,s)}}}}},{key:"normalize",value:function(e,t){return e/t}}]),e}(),de=function(){function e(t,n){d(this,e),this.xmlSerializer=void 0,this.document=void 0,this.config=void 0,this.visualVicinityExtractor=void 0,this.styleExtractor=void 0,this.innerFeaturesExtractor=void 0,this.innerTextExtractor=void 0,this.positioningExtractor=void 0,this.xmlSerializer=new XMLSerializer,this.document=t,this.config=null!==n&&void 0!==n?n:b,this.visualVicinityExtractor=new $(this.document,this.config.visualVicinity),this.styleExtractor=new oe(this.document),this.innerFeaturesExtractor=new ae(this.document),this.innerTextExtractor=new ce(this.document),this.positioningExtractor=new le(this.document)}return p(e,[{key:"isSameDocument",value:function(e){return this.document===e}},{key:"extract",value:function(e){var t=new _(e).scrollIntoView(),n=new X(e);return this.serializeElement(n),this.populateElementsInStructuralVicinity(n),this.populateElementsInVisualVicinity(n),this.extractAttributes(n),this.extractInnerText(n),this.extractStyle(n),this.extractTag(n),this.extractInnerFeatures(n),this.extractPositioning(n),this.extractSVGComponents(n),t.restore(),n}},{key:"extractReact",value:function(e){var t=e.element;(0,e.setReact)(new ie(t,this.config.react).extract())}},{key:"extractTag",value:function(e){var t=e.element;(0,e.setTag)(t.tagName.toLowerCase())}},{key:"extractPositioning",value:function(e){var t=e.element;(0,e.setPositioning)(this.positioningExtractor.extract(t))}},{key:"extractSVGComponents",value:function(e){var t=e.element;(0,e.setSVGs)(new S(this.document).extract(t))}},{key:"serializeElement",value:function(e){e.element,e.setSerializedElement}},{key:"extractAttributes",value:function(e){var t=e.element,n=e.setClass,r=e.setAttribute,i=e.getElementsInStructuralVicinity,o=e.getElementsInVisualVicinity;return new K(this.document).extract({element:t,setClass:n,setAttribute:r,getElementsInStructuralVicinity:i,getElementsInVisualVicinity:o})}},{key:"populateElementsInStructuralVicinity",value:function(e){var t=e.element;(0,e.setElementStructuralVicinityData)(new J(t,this.config.structuralVicinity).calculate())}},{key:"populateElementsInVisualVicinity",value:function(e){var t=e.element;(0,e.setElementVisualVicinityData)(this.visualVicinityExtractor.calculate(t))}},{key:"extractInnerText",value:function(e){var t=e.element;(0,e.setInnerText)(this.innerTextExtractor.extract(t))}},{key:"extractStyle",value:function(e){var t=e.element,n=e.setStyle;return this.styleExtractor.extract({element:t,setStyle:n})}},{key:"extractInnerFeatures",value:function(e){var t=e.element;(0,e.setInnerFeatures)(this.innerFeaturesExtractor.extract(t))}}]),e}(),fe=n(573),he=function(){function e(t){var n=this;d(this,e),this.targetElementESRAMetadata=void 0,this.qualifiedAttributes=[],this.qualifiedAttributesMap={},this.qualifiedClasses=[],this.unqualifiedClasses=[],this.qualifiedInnerText=void 0,this.visualVicinityComparable=[],this.structuralVicinityComparable=[],this.innerFeaturesComparable=[],this.rank=function(e){if(n.isDealBreaker(e))return{score:0,scores:{}};var t=n.tagSimilarity(e),r=n.attributesSimilarity(e),i=n.classSimilarity(e),o=n.styleSimilarity(e),a=n.innerTextSimilarity(e),s=n.innerFeaturesSimilarity(e),u=n.visualVicinitySimilarity(e),c=n.structuralVicinitySimilarity(e),l={tagScore:t,attributesScore:r,classesScore:i,styleScore:o,innerTextScore:a,innerFeaturesScore:s,visualVicinityScore:u,structuralVicinityScore:c,svgsScore:n.svgsSimilarity(e)},d={tagScore:se.weight(se.get().tagName.decisionWeight)*t,attributesScore:se.weight(se.get().attributes.decisionWeight)*r,classesScore:se.weight(se.get().classes.decisionWeight)*i,innerTextScore:se.weight(se.get().innerText.decisionWeight)*a,innerFeaturesScore:se.weight(se.get().innerFeatures.decisionWeight)*s,styleScore:se.weight(se.get().style.decisionWeight)*o,visualVicinityScore:se.weight(se.get().visualVicinity.decisionWeight)*u,structuralVicinityScore:se.weight(se.get().structuralVicinity.decisionWeight)*c};return{score:Object.values(d).reduce((function(e,t){return e+t}),0),scores:l}},this.targetElementESRAMetadata=t,this.setQualifiedAttributes(),this.setQualifiedClasses(),this.setQualifiedInnerText(),this.setVisualVicinityComparable(),this.setStructuralVicinityComparable(),this.setInnerFeaturesComparable()}return p(e,[{key:"getQualifiedAttributes",value:function(){return this.qualifiedAttributes}},{key:"getQualifiedClasses",value:function(){return this.qualifiedClasses}},{key:"getQualifiedInnerText",value:function(){return this.qualifiedInnerText}},{key:"setQualifiedAttributes",value:function(){var e=this.targetElementESRAMetadata.attributes,t=this.makeQualifiedAttributes(e),n=t.qualifiedAttributes,r=t.qualifiedAttributesMap;this.qualifiedAttributes=n,this.qualifiedAttributesMap=r}},{key:"makeQualifiedAttributes",value:function(e,t){var n=Object.keys(e).filter((function(n){if("input"===t)if("value"===n)return!1;var r=e[n];for(var i in r)i.endsWith("Uniqenuess")&&(r[i.replace("Uniqenuess","Uniqueness")]=r[i]);return r.globalUniqueness>se.get().attributes.qualification.globalUniquenessThreshold||r.tagUniqueness>se.get().attributes.qualification.tagUniquenessThreshold})),r=n.reduce((function(t,n){return t[n]=e[n].value,t}),{});return{qualifiedAttributes:n,qualifiedAttributesMap:r}}},{key:"setQualifiedClasses",value:function(){var e=this;this.qualifiedClasses=this.makeQualifiedClasses(this.targetElementESRAMetadata.classes),this.unqualifiedClasses=Object.keys(this.targetElementESRAMetadata.classes).filter((function(t){return!e.qualifiedClasses.includes(t)}))}},{key:"isValidClass",value:function(e){return/^[A-Za-z_-][0-9A-Za-z_-]*$/.test(e)}},{key:"makeQualifiedClasses",value:function(e){var t=this;return Object.keys(e).filter((function(n){var r=e[n];return!!t.isValidClass(n)&&(!n.startsWith("jss")&&!n.startsWith("css-")&&":hover"!==n&&(r.globalUniqueness>se.get().classes.qualification.globalUniquenessThreshold||r.tagUniqueness>se.get().classes.qualification.tagUniquenessThreshold))}))}},{key:"setQualifiedInnerText",value:function(){this.qualifiedInnerText=this.makeQualifiedInnerText(this.targetElementESRAMetadata.innerText)}},{key:"makeQualifiedInnerText",value:function(e){return e&&(e.containsMatches<=se.get().innerText.qualification.containsMatchMax||e.exactMatches<=se.get().innerText.qualification.exactMatchMax)&&e.content.length<=se.get().innerText.qualification.maxLength&&e.content.length>=se.get().innerText.qualification.minLength?e:null}},{key:"makeBasicElementPropertiesComparable",value:function(e){var t=this;return e.reduce((function(e,n){var r=n.position?"".concat(n.tag,".").concat(n.position.slice(0,2).join(",")):n.tag,i="".concat(r,"+").concat(n.relativePosition),o=t.makeQualifiedClasses(n.classes).map((function(e){return"".concat(r,".").concat(e)})),a=[];t.makeQualifiedAttributes(n.attributes).qualifiedAttributes.forEach((function(e){a.push("".concat(r,"[").concat(e,"]")),a.push("".concat(r,"[").concat(e,"]=").concat(n.attributes[e].value))}));var s=n.feature?t.makeInnerFeaturesComparable([n.feature],{customTag:r,includeTag:!1,featureTypeWhiteList:[v.SVG]}):[],u=[].concat(T(e),[r,i],T(o),a,T(s));return n.text&&(u.push("".concat(r,"<>")),u.push("".concat(r,"<").concat(n.text,">"))),n.distance&&(u.push("".concat(r,"->").concat(n.distance)),u.push("".concat(r,"->[]").concat(t.getDistanceRange(n.distance)))),u}),[])}},{key:"getDistanceRange",value:function(e){for(var t=[10,20,30,40,50,60,70,80,90,100],n=0,r=t;n<r.length;n++){var i=r[n];if(e<i)return i}return t[t.length-1]}},{key:"setVisualVicinityComparable",value:function(){this.visualVicinityComparable=this.makeVisualVicinityComparable(this.targetElementESRAMetadata.visualVicinity)}},{key:"makeVisualVicinityComparable",value:function(e){return this.makeBasicElementPropertiesComparable(e)}},{key:"setStructuralVicinityComparable",value:function(){this.structuralVicinityComparable=this.makeStructuralVicinityComparable(this.targetElementESRAMetadata.structuralVicinity)}},{key:"makeStructuralVicinityComparable",value:function(e){return this.makeBasicElementPropertiesComparable(e)}},{key:"makeInnerFeaturesComparable",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.customTag,r=void 0===n?void 0:n,i=t.includeTag,o=void 0===i||i,a=t.featureTypeWhiteList,s=void 0===a?void 0:a;return e.reduce((function(e,t){if(s&&!s.includes(t.type))return e;var n=null!==r&&void 0!==r?r:t.tag,i=o?[].concat(T(e),[n]):e;switch(t.type){case v.Button:i.push("".concat(n,"[type=").concat(t.buttonType,"]"));break;case v.Input:t.inputType&&i.push("".concat(n,"[type=").concat(t.inputType,"]")),t.placeholder&&i.push("".concat(n,"[placeholder=").concat(t.placeholder,"]"));break;case v.SVG:t.components.forEach((function(e){var t=[];for(var r in e.attributes)t.push("[".concat(r,"=").concat(e.attributes[r],"]"));i.push("".concat(n).concat(t.join("")))}))}return"text"in t&&t.text&&(i.push("".concat(n,"<>")),i.push("".concat(n,"<").concat(t.text,">"))),i}),[])}},{key:"setInnerFeaturesComparable",value:function(){this.innerFeaturesComparable=this.makeInnerFeaturesComparable(this.targetElementESRAMetadata.innerFeatures)}},{key:"isDealBreaker",value:function(e){if("input"===this.targetElementESRAMetadata.tag&&"input"===e.tag){var t=function(e){return e.type?e.type.value:"text"};if(t(this.targetElementESRAMetadata.attributes)!==t(e.attributes))return!0}return!1}},{key:"tagSimilarity",value:function(e){return e.tag===this.targetElementESRAMetadata.tag?1:0}},{key:"attributesSimilarity",value:function(e){var t=this,n=function(e){return[].concat(T(t.keyValueObjectToArray(e)),T(Object.keys(e)))},r=this.makeQualifiedAttributes(e.attributes).qualifiedAttributesMap;return this.jaccard(n(this.qualifiedAttributesMap),n(r))}},{key:"indicativeAttributesSimilarity",value:function(e){return this.qualifiedAttributesMap.placehoder&&e.attributes.placehoder&&this.qualifiedAttributesMap.placehoder===e.attributes.placehoder.value?1:0}},{key:"classSimilarity",value:function(e){return this.jaccard(this.qualifiedClasses,this.makeQualifiedClasses(e.classes))}},{key:"innerTextSimilarity",value:function(e){if(!this.targetElementESRAMetadata.innerText&&!e.innerText)return 1;var t=this.makeQualifiedInnerText(e.innerText);return this.qualifiedInnerText&&t&&this.qualifiedInnerText.content===t.content?1:0}},{key:"innerFeaturesSimilarity",value:function(e){return this.jaccard(this.innerFeaturesComparable,this.makeInnerFeaturesComparable(e.innerFeatures))}},{key:"visualVicinitySimilarity",value:function(e){return this.jaccard(this.visualVicinityComparable,this.makeVisualVicinityComparable(e.visualVicinity))}},{key:"structuralVicinitySimilarity",value:function(e){return this.jaccard(this.structuralVicinityComparable,this.makeStructuralVicinityComparable(e.structuralVicinity))}},{key:"styleSimilarity",value:function(e){var t,n,r,i,o=this,a=function(e){return[].concat(T(o.keyValueObjectToArray(e)),T(Object.keys(e)))},s=this.jaccard(a(null!==(t=this.targetElementESRAMetadata.style.inline)&&void 0!==t?t:{}),a(null!==(n=e.style.inline)&&void 0!==n?n:{})),u=this.jaccard(a(null!==(r=this.targetElementESRAMetadata.style.computed)&&void 0!==r?r:{}),a(null!==(i=e.style.computed)&&void 0!==i?i:{}));return s*se.get().style.inlineWeight+u*se.get().style.computedWeight}},{key:"svgsSimilarity",value:function(e){return this.targetElementESRAMetadata.svgs||e.svgs?this.targetElementESRAMetadata.svgs&&e.svgs&&JSON.stringify(this.targetElementESRAMetadata.svgs)===JSON.stringify(e.svgs)?1:0:1}},{key:"keyValueObjectToArray",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"=",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;return Object.keys(e).map((function(r){return"".concat(r).concat(t).concat(function(t){return n?n(e,t):e[t]}(r))}))}},{key:"jaccard",value:function(e,t){return Array.isArray(e)&&Array.isArray(t)&&!e.length&&!t.length?1:(0,fe.$m)(e,t)}}]),e}(),pe=function(){function e(t,n){d(this,e),this.targetElementESRAMetadata=void 0,this.targetElementStaticData={},this.esraMetadataExtractor=void 0,this.qualifiedAttributes=[],this.qualifiedAttributesMap={},this.qualifiedClasses=[],this.qualifiedInnerFeatures=void 0,this.qualifiedInnerText=void 0,this.candidateQueries=[],this.candidates=[],this.uniqueCandidates=[],this.rankedCandidates=[],this.filteredAndSortedRankedCandidates=[],this.finalCandidates=[],this.removedCandidates=void 0,this.similarity=void 0,this.weightsSum=0,this.config={innerText:{dropIfMoreThanNCandidates:5},innerFeatures:{mandatoryPercentage:.6,mandatoryMax:6},results:{scorePercentile:.75,epsilon:.01}},this.targetElementESRAMetadata=t,this.targetElementStaticData=n,this.similarity=new he(this.targetElementESRAMetadata),this.esraMetadataExtractor=new de(document)}return p(e,[{key:"makeWeight",value:function(e){return this.weightsSum+=e,e}},{key:"getWeight",value:function(e){return e/this.weightsSum}},{key:"extractMetadata",value:function(e){return new y(this.esraMetadataExtractor.extract(e).toMetadata())}},{key:"getLastSelectionLogs",value:function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:5;if(null===(e=this.candidates)||void 0===e||!e.length)return{};var n=new XMLSerializer,r=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:50;return e.slice(0,t).map((function(e){return{score:e.score,metadata:e.metadata,element:n.serializeToString(e.candidate).substring(0,200)}}))},i=this.rankedCandidates[Math.min(this.rankedCandidates.length-1,t)].score,o=function(e){return r(e,t).filter((function(e){return e.score>=i}))};return{candidatesQuery:this.candidateQueries.filter((function(e){return!!e.length})).join(","),totalUniqueCandidates:this.uniqueCandidates.length,topRankingCandidates:r(this.rankedCandidates,t),topRemovedCandidates:{hidden:o(this.removedCandidates.hidden),staticData:o(this.removedCandidates.static)}}}},{key:"select",value:function(){var t,n,r=this;if("html"===this.targetElementESRAMetadata.tag){var i=document.querySelector("html");return[{candidate:i,score:1,esraMetadata:this.extractMetadata(i)}]}this.setQualifiedAttributesQueries(),this.setQualifiedClassesQueries(),this.setInnerFeaturesQueries(),this.candidates=[];var o,a=this.candidateQueries.filter((function(e){return!!e.length})).join(",");(a.length&&(this.candidates=j(a)),(t=this.candidates).push.apply(t,T(this.getInnerTextCandidates())),this.candidates.length)||(o=this.candidates).push.apply(o,T(this.getTagCandidates()));this.uniqueCandidates=this.candidates.filter((function(e,t,n){return n.indexOf(e)===t}));var s=e.limitChildren;null!==(n=s)&&void 0!==n&&n.length&&(s=s.map((function(e){return C(C({},e),{},{parent:document.querySelector(e.selector)})})),this.uniqueCandidates=this.uniqueCandidates.filter((function(e){var t,n=N(s);try{for(n.s();!(t=n.n()).done;){var i=t.value;if(i.parent&&r.isDescendant(i.parent,e)&&i.limit--<=0)return!1}}catch(o){n.e(o)}finally{n.f()}return!0}))),this.rankedCandidates=this.uniqueCandidates.filter((function(e){return e instanceof HTMLElement})).map((function(e){var t=r.extractMetadata(e),n=r.similarity.rank(t);return{score:n.score,candidate:e,scores:n.scores,esraMetadata:t}})).sort((function(e,t){return t.score-e.score})),this.removedCandidates={hidden:[],static:[]},this.filteredAndSortedRankedCandidates=this.rankedCandidates.filter((function(e){var t=r.isHidden(e.candidate),n=t.isHidden,i=t.clickOffset;return!0===n?(r.removedCandidates.hidden.push(e),!1):(i&&(e.clickOffset=i),!(Z(r.targetElementStaticData)&&!function(e,t){var n=q(e),r=q(t),i=function(e){return!e||0===Object.keys(e).length};if(i(n)&&i(r))return!0;if(i(n)||i(r))return!1;var o=Object.keys(n).sort(),a=Object.keys(r).sort();if(o.length!==a.length)return!1;if(!o.every((function(e,t){return e===a[t]})))return!1;for(var s in n)if(n[s]!==r[s])return!1;return!0}(r.formatStaticCandidates(e.esraMetadata.staticCandidates),r.targetElementStaticData))||(e.metadata=JSON.stringify(e.esraMetadata.staticCandidates),r.removedCandidates.static.push(e),!1))})),this.removedCandidates.hidden.slice().reverse().forEach((function(e,t,n){"INPUT"===e.candidate.tagName&&r.filteredAndSortedRankedCandidates.find((function(t){return t.score>.1&&t.candidate.contains(e.candidate)}))&&(r.removedCandidates.hidden.splice(n.length-1-t,1),r.filteredAndSortedRankedCandidates.push(e))})),this.filteredAndSortedRankedCandidates=this.filteredAndSortedRankedCandidates.sort((function(e,t){return t.score-e.score}));var u=this.filteredAndSortedRankedCandidates.length*(1-this.config.results.scorePercentile);this.finalCandidates=[];for(var c=null,l=0;l<this.filteredAndSortedRankedCandidates.length;++l){var d=this.filteredAndSortedRankedCandidates[l];if(l>=u&&(!c||c.score-d.score>this.config.results.epsilon))break;c=d,this.finalCandidates.push(d)}return this.finalCandidates}},{key:"selectOne",value:function(){var e=this.select();return e.length?e[0]:{candidate:void 0,score:0,esraMetadata:void 0}}},{key:"getFinalCandidates",value:function(){return this.finalCandidates}},{key:"setQualifiedAttributesQueries",value:function(){var e=this;this.candidateQueries.push(this.similarity.getQualifiedAttributes().map((function(t){return"[".concat(t,'="').concat(e.targetElementESRAMetadata.attributes[t].value,'"]')})).join(","))}},{key:"setQualifiedClassesQueries",value:function(){this.candidateQueries.push(this.similarity.getQualifiedClasses().map((function(e){return".".concat(e)})).join(","))}},{key:"setInnerFeaturesQueries",value:function(){var e=this,t=this.targetElementESRAMetadata.innerFeatures;t.length>10&&(t=Object.values(t.reduce((function(e,t){var n="".concat(t.type,"_").concat(t.tag);return e[n]?e:C(C({},e),{},w({},n,t))}),{})));var n,r=Math.min(Math.ceil(t.length*this.config.innerFeatures.mandatoryPercentage),this.config.innerFeatures.mandatoryMax),i=(n=t,n.reduce((function(e,t){var n=e.map((function(e){return[].concat(T(e),[t])})).filter((function(e){return e.length<=r}));return e.concat(n)}),[[]])).filter((function(e){return e.length===r}));i.forEach((function(t){var n=[];t.forEach((function(t){return n.push(e.getFeatureSelector(t))})),e.cartesian(n).forEach((function(t){return e.candidateQueries.push("*"+t.map((function(e){return":has(".concat(e,")")})).join(""))}))}))}},{key:"cartesian",value:function(e){if(!e.length)return[];var t=[],n=e.length-1;return function r(i,o){for(var a=0,s=e[o].length;a<s;a++){var u=i.slice(0);u.push(e[o][a]),o==n?t.push(u):r(u,o+1)}}([],0),t}},{key:"getFeatureSelector",value:function(e){var t=[e.tag];switch(e.type){case v.Media:e.src&&t.push("".concat(e.tag,'[src="').concat(e.src,'"]'));break;case v.Anchor:t.push("".concat(e.tag,'[href="').concat(e.href,'"]'));break;case v.Button:break;case v.Input:t.push("".concat(e.tag,'[type="').concat(e.inputType,'"]')),e.placeholder&&t.push("".concat(e.tag,'[placeholder="').concat(e.placeholder,'"]'))}return t}},{key:"getInnerTextCandidates",value:function(){var e=this.similarity.getQualifiedInnerText();if(!e)return[];var t=ue(e.content,{exact:!0});return t.length>this.config.innerText.dropIfMoreThanNCandidates?[]:t}},{key:"getTagCandidates",value:function(){return j(this.targetElementESRAMetadata.tag)}},{key:"isDescendant",value:function(e,t){return e.contains(t)}},{key:"formatStaticCandidates",value:function(e){var t={};return Object.keys(e).forEach((function(n){t[n]=e[n]})),t}},{key:"isHidden",value:function(e){return G(e)}}]),e}();function ve(e){return ve=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},ve(e)}function me(){return me="undefined"!==typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=ve(e)););return e}(e,t);if(r){var i=Object.getOwnPropertyDescriptor(r,t);return i.get?i.get.call(arguments.length<3?e:n):i.value}},me.apply(this,arguments)}function ge(e,t){return ge=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},ge(e,t)}function ye(e,t){if("function"!==typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&ge(e,t)}function be(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Dn){return!1}}function we(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ie(e){var n=be();return function(){var r,i=ve(e);if(n){var o=ve(this).constructor;r=Reflect.construct(i,arguments,o)}else r=i.apply(this,arguments);return function(e,n){if(n&&("object"===t(n)||"function"===typeof n))return n;if(void 0!==n)throw new TypeError("Derived constructors may only return object or undefined");return we(e)}(this,r)}}pe.limitChildren=void 0;var Ce=function(){function e(){d(this,e)}return p(e,[{key:"getSelector",value:function(){var e=o(r().mark((function e(t){var n,i,o,a,s,u,c,l,d=arguments;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=(d.length>1&&void 0!==d[1]?d[1]:{testIdSelector:void 0}).testIdSelector,t){e.next=3;break}return e.abrupt("return",null);case 3:if(!(o=Se(i=t,n))){e.next=7;break}return e.abrupt("return",o);case 7:(a=i.id)&&i.removeAttribute("id");try{(s=i.getAttribute("class"))&&"string"===typeof s?(u=s.split(" ").filter((function(e){return!e.startsWith("css-")&&!e.startsWith("jss-")})).join(" "),i.setAttribute("class",u)):s=void 0}catch(Dn){console.warn("[playwright selector generator] error with class filtering",Dn)}return c="",e.prev=11,e.next=14,window.playwright.selector(t);case 14:c=e.sent,e.next=31;break;case 17:if(e.prev=17,e.t0=e.catch(11),(l=t.ownerDocument.defaultView)===window){e.next=31;break}return l.playwright||(l.playwright=window.playwright),e.prev=22,e.next=25,l.playwright.selector(t);case 25:c=e.sent,e.next=31;break;case 28:e.prev=28,e.t1=e.catch(22),console.log("get selector error",t.nodeType,t,"\n",e.t0,"\n",e.t1);case 31:return e.prev=31,a&&i.setAttribute("id",a),s&&i.setAttribute("class",s),e.finish(31);case 35:return e.abrupt("return",c);case 36:case"end":return e.stop()}}),e,null,[[11,17,31,35],[22,28]])})));return function(t){return e.apply(this,arguments)}}()},{key:"selector",value:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){var e=o(r().mark((function e(t){var n,i;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,window.playwright.$(t);case 3:i=e.sent,e.next=8;break;case 6:e.prev=6,e.t0=e.catch(0);case 8:return e.abrupt("return",null!==(n=i)&&void 0!==n?n:this.selectOnIframe(t));case 9:case"end":return e.stop()}}),e,this,[[0,6]])})));return function(t){return e.apply(this,arguments)}}())},{key:"selectOnIframe",value:function(){var e=o(r().mark((function e(t){var n,i;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=document.querySelector("iframe")){e.next=3;break}return e.abrupt("return",void 0);case 3:return(i=n.contentWindow).playwright||(i.playwright=window.playwright),e.prev=5,e.next=8,i.playwright.$(t);case 8:return e.abrupt("return",e.sent);case 11:e.prev=11,e.t0=e.catch(5),console.log("selector error",t);case 14:case"end":return e.stop()}}),e,null,[[5,11]])})));return function(t){return e.apply(this,arguments)}}()}]),e}(),Se=function(e,t){if(t&&e.getAttribute(t))return"[".concat(t,'="').concat(e.getAttribute(t),'"]')},ke=function(){var e=o(r().mark((function e(t,n){var i,o,a,s,u;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t){e.next=2;break}return e.abrupt("return",null);case 2:if(!(o=Se(i=t,n))){e.next=6;break}return e.abrupt("return","locator('".concat(o,"')"));case 6:return(a=t.id)&&i.removeAttribute("id"),s="",e.prev=9,e.next=12,window.playwright.generateLocator(t);case 12:s=e.sent,e.next=28;break;case 15:return e.prev=15,e.t0=e.catch(9),(u=t.ownerDocument.defaultView).playwright||(u.playwright=window.playwright),e.prev=19,e.next=22,u.playwright.generateLocator(t);case 22:s=e.sent,e.next=28;break;case 25:e.prev=25,e.t1=e.catch(19),console.log("generateLocator error",t.nodeType,t,"\n",e.t0,"\n",e.t1);case 28:return e.prev=28,a&&i.setAttribute("id",a),e.finish(28);case 31:return e.abrupt("return",s);case 32:case"end":return e.stop()}}),e,null,[[9,15,28,31],[19,25]])})));return function(t,n){return e.apply(this,arguments)}}(),Ee=n(763);function xe(e,t){if(e.nodeType===Node.ELEMENT_NODE){for(var n=e,r={},i=0;i<n.attributes.length;i++){var o=n.attributes[i];r[o.name]=o.value}var a,s=[],u=N(n.childNodes);try{for(u.s();!(a=u.n()).done;){var c=xe(a.value,t);c&&s.push(c)}}catch(v){u.e(v)}finally{u.f()}var l=s.reduce((function(e,t){return Math.max(e,t.depth)}),0)+1,d="".concat(n.tagName.toLowerCase(),"#").concat(Object.keys(r).sort(),"#").concat(s.map((function(e){return e.templateHash})).join("|")),f=Object.values(r).concat(s.flatMap((function(e){return e.templateValues}))),h={type:"ELEMENT",tagName:n.tagName.toLowerCase(),attributes:r,children:s,templateHash:d,templateValues:f,depth:l,node:e};if(t[d]){if(t[d].depth!==l)throw new Error("Template depth mismatch for template ".concat(d));t[d].nodes.push(h)}else t[d]={hash:d,nodes:[h],depth:l};return h}if(e.nodeType===Node.TEXT_NODE){var p=e.textContent;if(p&&p.trim())return{type:"TEXT",content:p,templateHash:"TEXT",templateValues:[p],depth:0,node:e}}return null}var Ae=function(e){var t=(0,Ee.range)(e.nodes[0].templateValues.length).filter((function(t){var n=e.nodes.map((function(e){return e.templateValues[t]}));return n.every((function(e){return e===n[0]}))}));return C(C({},e),{},{valuesToInline:new Set(t)})};function Me(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.repetitionThreshold,i=void 0===r?3:r,o=n.depth,a=void 0===o?3:o,s=n.forceSameParent,u=void 0===s||s,c={},l={},d=N(Object.values(e).sort((function(e){return-e.depth})));try{var f=function(){var e,n=t.value;if(u){var r,o=n.nodes.map((function(e){return e.node.parentNode}));if(o.some((function(e){return e!==o[0]}))||(null===(r=o[0])||void 0===r?void 0:r.nodeType)!==Node.ELEMENT_NODE)return"continue"}if(n.nodes.length-(null!==(e=l[n.hash])&&void 0!==e?e:0)<i||n.depth<a)return"continue";n.label="T".concat(Object.keys(c).length+1);var s=Ne(n.nodes[0],c,n);n.template=s.template,c[n.hash]=n,s.consumedTemplates.forEach((function(e){var t;l[e]=(null!==(t=l[e])&&void 0!==t?t:0)+n.nodes.length}))};for(d.s();!(t=d.n()).done;)f()}catch(h){d.e(h)}finally{d.f()}return c}function Te(e,t){var n=t+1-Array.from(e.valuesToInline).filter((function(e){return e<t})).length;return"$".concat(n)}function Ne(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;if("TEXT"===e.type)return n.valuesToInline.has(r)?{template:e.content,valueIndex:r+1,consumedTemplates:[e.templateHash]}:{template:Te(n,r),valueIndex:r+1,consumedTemplates:[e.templateHash]};var i=r,o=[e.templateHash],a=Object.entries(e.attributes).map((function(e,t){var r=M(e,2),o=r[0],a=r[1];return n.valuesToInline.has(i+t)?" ".concat(o,'="').concat(a,'"'):" ".concat(o,"=").concat(Te(n,i+t))})).join("");i+=Object.keys(e.attributes).length;var s,u=[],c=N(e.children);try{for(c.s();!(s=c.n()).done;){var l=Ne(s.value,t,n,i);u.push(l.template),i=l.valueIndex,o.push.apply(o,T(l.consumedTemplates))}}catch(f){c.e(f)}finally{c.f()}var d=0===e.children.length;return{template:"<".concat(e.tagName.toLowerCase()).concat(a).concat(d?"/>":">".concat(u.join(""),"</").concat(e.tagName.toLowerCase(),">")),valueIndex:i,consumedTemplates:o}}function _e(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:30,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:5,r={};if(!xe(e,r))return{};for(var i=Object.values(r).reduce((function(e,t){var n=Ae(t);return C(C({},e),{},w({},n.hash,n))}),{}),o={},a=function(){var e=Me(i,{repetitionThreshold:t,depth:s}),n=Object.keys(e).reduce((function(t,n){return function(e){for(var t=0,n=Object.values(o);t<n.length;t++)for(var r=n[t],i=0,a=Object.keys(r);i<a.length;i++)if(a[i]===e)return!0;return!1}(n)?t:C(C({},t),{},w({},n,e[n]))}),{}),r=Object.keys(n).reduce((function(e,t){return function(e){for(var t=0,n=Object.values(o);t<n.length;t++)for(var r=n[t],i=0,a=Object.values(r);i<a.length;i++)if(a[i].nodes.map((function(e){return e.node})).filter((function(t){return t.contains(e)})).length>0)return!0;return!1}(n[t].nodes[0].node)?e:C(C({},e),{},w({},t,n[t]))}),{});Object.keys(r).length>0&&(o[s]=r)},s=n;s>0;s--)a();return Object.keys(o).reduce((function(e,t){return C(C({},e),{},w({},t,Object.values(o[t]).map((function(e){return e.nodes.map((function(e){return e.node}))}))))}),{})}var Re=[{selector:'path[d="M17.5 13V15.6667C17.5 16.0203 17.3361 16.3594 17.0444 16.6095C16.7527 16.8595 16.357 17 15.9444 17H5.05556C4.643 17 4.24733 16.8595 3.95561 16.6095C3.66389 16.3594 3.5 16.0203 3.5 15.6667V13"] + path[d="M14.6673 6.92057L10.5007 2.75391L6.33398 6.92057"] + path[d="M10.5 2.75391V12.7539"]',description:"export button"},{selector:'path[d="M16.0893 13.1868C16.6838 12.7754 17.1321 12.1858 17.3697 11.503C17.6072 10.8202 17.6216 10.0796 17.4107 9.38816C17.1999 8.69667 16.7748 8.09007 16.1968 7.65594C15.6187 7.2218 14.9177 6.9826 14.1948 6.97285H12.8308C12.6017 6.20011 12.1996 5.48973 11.6549 4.89565C11.1102 4.30157 10.4374 3.83943 9.68735 3.54431C8.93734 3.24918 8.12995 3.12885 7.32648 3.19244C6.52301 3.25603 5.7446 3.50187 5.05036 3.9113C4.35612 4.32072 3.7643 4.88297 3.31985 5.55533C2.8754 6.22769 2.59001 6.99248 2.48535 7.79164C2.38068 8.59079 2.4595 9.40329 2.71582 10.1674C2.97214 10.9316 3.39921 11.6272 3.96461 12.2016"] + path[d="M10.0273 10.0039V16.8241"] + path[d="M13.0585 13.0351L10.0273 10.0039L6.99609 13.0351"]',description:"import button"},{selector:'path[d="M20.4696 21.5303C20.7625 21.8232 21.2373 21.8232 21.5302 21.5303C21.8231 21.2374 21.8231 20.7626 21.5302 20.4697L20.4696 21.5303ZM17.1802 16.1197C16.8873 15.8268 16.4125 15.8268 16.1196 16.1197C15.8267 16.4126 15.8267 16.8874 16.1196 17.1803L17.1802 16.1197ZM18.25 11C18.25 15.0041 15.0041 18.25 11 18.25V19.75C15.8325 19.75 19.75 15.8325 19.75 11H18.25ZM11 18.25C6.99594 18.25 3.75 15.0041 3.75 11H2.25C2.25 15.8325 6.16751 19.75 11 19.75V18.25ZM3.75 11C3.75 6.99594 6.99594 3.75 11 3.75V2.25C6.16751 2.25 2.25 6.16751 2.25 11H3.75ZM11 3.75C15.0041 3.75 18.25 6.99594 18.25 11H19.75C19.75 6.16751 15.8325 2.25 11 2.25V3.75ZM21.5302 20.4697L17.1802 16.1197L16.1196 17.1803L20.4696 21.5303L21.5302 20.4697Z"]',description:"search"},{selector:'path[d="M3.75 10H16.875"] + path[d="M8.125 5L3.125 10L8.125 15"]',description:"back"},{selector:'path[d="M3.33301 8H12.6663"] + path[d="M8 3.33331L12.6667 7.99998L8 12.6666"]',description:"forward"},{selector:'path[d="M10 4.16667V15.8333"] + path[d="M4.16699 10H15.8337"]',description:"new or Add button"},{selector:'path[d="M10 10.75C10.4142 10.75 10.75 10.4142 10.75 10C10.75 9.58579 10.4142 9.25 10 9.25C9.58579 9.25 9.25 9.58579 9.25 10C9.25 10.4142 9.58579 10.75 10 10.75Z"] + path[d="M15.833 10.75C16.2472 10.75 16.583 10.4142 16.583 10C16.583 9.58579 16.2472 9.25 15.833 9.25C15.4188 9.25 15.083 9.58579 15.083 10C15.083 10.4142 15.4188 10.75 15.833 10.75Z"] + path[d="M4.16699 10.75C4.58121 10.75 4.91699 10.4142 4.91699 10C4.91699 9.58579 4.58121 9.25 4.16699 9.25C3.75278 9.25 3.41699 9.58579 3.41699 10C3.41699 10.4142 3.75278 10.75 4.16699 10.75Z"]',description:"open menu"},{selector:'path[d="M10 4.16667V15.8333"] + path[d="M4.16699 10H15.8337"]',description:"add filter"},{selector:'path[d="M15 5L5 15"] + path[d="M5 5L15 15"]',description:"close or remove"},{selector:'path[d="M4 6L8 10L12 6"]',description:"open or close dropdown"},{selector:'path[d="M10 17.5C14.1421 17.5 17.5 14.1421 17.5 10C17.5 5.85786 14.1421 2.5 10 2.5C5.85786 2.5 2.5 5.85786 2.5 10C2.5 14.1421 5.85786 17.5 10 17.5Z"] + path[d="M12.5 7.5L7.5 12.5"] + path[d="M7.5 7.5L12.5 12.5"]',description:"clear input"},{selector:'path[d="M3.33301 5.49054H4.81449H16.6663"] + path[d="M7.14286 5.49999V3.99999C7.14286 3.60216 7.29337 3.22063 7.56128 2.93932C7.82919 2.65802 8.19255 2.49998 8.57143 2.49998H11.4286C11.8075 2.49998 12.1708 2.65802 12.4387 2.93932C12.7066 3.22063 12.8571 3.60216 12.8571 3.99999V5.49999M15 5.49999V16C15 16.3978 14.8495 16.7793 14.5816 17.0607C14.3137 17.342 13.9503 17.5 13.5714 17.5H6.42857C6.04969 17.5 5.68633 17.342 5.41842 17.0607C5.15051 16.7793 5 16.3978 5 16V5.49999H15Z"] + path[d="M8.33203 9.23726V13.4039"] + path[d="M11.666 9.23726V13.4039"]',description:"delete"},{selector:'path[d="M13.3334 4L6.00008 11.3333L2.66675 8"]',description:"checked"},{selector:'path[d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"]',description:"downward-pointing arrow"}],Oe=1e4;function De(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Oe,t=[],n=new MutationObserver((function(e){e.forEach((function(e){e.addedNodes.length>0&&e.addedNodes.forEach((function(e){e instanceof HTMLElement&&function(e){if(e.getElementsByTagName("*").length>50)return!1;if(e.outerHTML.length>5e3)return!1;return!0}(e)&&setTimeout((function(){t.push(function(e){var t,n=document.createTreeWalker(e,NodeFilter.SHOW_TEXT,null),r=[];for(;t=n.nextNode();)G(t.parentNode).isHidden||r.push(t);return r}(e))}),1e3)}))}))}));return n.observe(document.body,{childList:!0,subtree:!0}),setTimeout((function(){n.disconnect()}),e),function(){var e=t.map((function(e){return e.filter((function(e){return!e.isConnected||G(e.parentNode).isHidden}))})).filter((function(e){return e.length})).map((function(e){return"<span>".concat(e.map((function(e){return e.textContent})).join("</span><span>"),"</span>")}));return t=[],e}}var Le;!function(e){e.ARIA_LABEL="aria-label",e.TEXT="text"}(Le||(Le={}));var Fe,Ve,Be=function(){function e(){d(this,e),this.interactableElements=void 0,this.selectors=void 0,this.flashingElements=void 0,this.templatizedNodes=void 0}return p(e,[{key:"markInteractable",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=r.persistChecksumIds,o=void 0===i||i,a=r.checksumIdCounter,s=void 0===a?0:a,u=r.forceIncludeAttribute;O("[markInteractable] querySelectorAllExtended");var c=j("*",n,{includeHTML:!0});D("[markInteractable] querySelectorAllExtended"),O("[markInteractable] isElementHidden");var l,d=[],f=N(c);try{for(f.s();!(l=f.n()).done;){var h=l.value;h.setAttribute("checksum-data-visible",(!G(h).isHidden).toString()),h.setAttribute("checksum-data-interactive","false"),u&&h.hasAttribute(u)&&d.push(h)}}catch(g){f.e(g)}finally{f.f()}D("[markInteractable] isElementHidden"),this.interactableElements=[],console.log("Getting all interactable elements...");var p=F(n,e,{allowDisabled:!0});console.log("Got ".concat(p.length," interactable elements"));var v=function(e){if(o)return e._checksumid||(e._checksumid=s.toString(),s++),e.setAttribute("checksumid",e._checksumid),e._checksumid;var t=s.toString();return e.setAttribute("checksumid",t),s++,t},m=function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e.setAttribute("checksum-data-interactive","true");var r=v(e);t.interactableElements.push({checksumId:r,element:e,forced:n})};return p.forEach((function(e){return m(e)})),d.forEach((function(e){return m(e,!0)})),s}},{key:"truthyFilter",value:function(e){return Boolean(e)}},{key:"generateSimplifiedDom",value:function(e){var t,n=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=i.checkElementInstanceType,a=void 0===o||o,s=i.forceIncludeAttribute,u=void 0===s?void 0:s,c=i.forceIncludeElements,l=void 0===c?[]:c,d=i.svgIntegration,f=void 0===d?Le.ARIA_LABEL:d,h=i.onForceIncludeElement,p=void 0===h?void 0:h;if(e.nodeType===Node.ELEMENT_NODE&&"head"===e.tagName.toLowerCase())return null;if(e.nodeType===Node.TEXT_NODE&&null!==(t=e.textContent)&&void 0!==t&&t.trim())return"false"===e.parentElement.getAttribute("checksum-data-visible")?null:document.createTextNode(e.textContent+" ");if(e.nodeType!==Node.ELEMENT_NODE)return null;if(a&&!(e instanceof HTMLElement||e instanceof SVGElement))return null;var v=e,m=W(v,{flattenShadowRootChildren:!0}).map((function(e){return n.generateSimplifiedDom(e,r,{checkElementInstanceType:a,forceIncludeAttribute:u,forceIncludeElements:l,svgIntegration:f,onForceIncludeElement:p})})).filter(this.truthyFilter);"body"===v.tagName.toLowerCase()&&(m=m.filter((function(e){return e.nodeType!==Node.TEXT_NODE})));var g="false"!==v.getAttribute("checksum-data-visible"),y="true"===v.getAttribute("checksum-data-interactive")||v.hasAttribute("role"),b=v.hasAttribute("aria-label")||v.hasAttribute("name"),w=l.includes(v)||!!u&&v.hasAttribute(u);if(f&&(v instanceof SVGElement||"svg"===v.tagName.toLowerCase())&&g){var I=this.findSvgElementDescriptionFromBank(v);if(!I){var C=v.querySelector("title");C&&(I=C.textContent)}if(I)switch(f){case Le.ARIA_LABEL:var S=document.createElement("svg");return S.setAttribute("aria-label",I),S;case Le.TEXT:if(v.hasAttribute("checksumid")){var k=document.createElement("div");return k.setAttribute("checksumid",v.getAttribute("checksumid")),k.innerText=I,k}return document.createTextNode(" [".concat(I,"] "))}}var E=g&&(y||b||v.matches(["form","button","input","textarea","a","table","th","tr","td","section","nav","header","footer","main","article","aside","li","ul"].join(",")));if(!E&&w&&(null===p||void 0===p||p(v)),!(E||w)){if(!m.length)return null;if(1===m.length)return m[0]}var x,A=document.createElement(v.tagName),M=["aria-.+","data-name","name","type","placeholder","content","value","role","title","checksumid","checked","disabled","required","inputmode","min","max","step","minlength","maxlength","alt","hidden","draggable","contenteditable","href"].concat(r),T=N(v.attributes);try{for(T.s();!(x=T.n()).done;){var _,R=x.value,O=N(M);try{for(O.s();!(_=O.n()).done;){var D,L=_.value;if(new RegExp("^".concat(L,"$")).test(R.name))A.setAttribute(R.name,null===(D=R.value)||void 0===D||D)}}catch(V){O.e(V)}finally{O.f()}}}catch(V){T.e(V)}finally{T.f()}if(v instanceof HTMLInputElement)A.setAttribute("value",v.value);else if(v instanceof HTMLTextAreaElement&&!v.childNodes.length&&v.value){var F=document.createTextNode(v.value);A.appendChild(F)}return m.forEach((function(e){return A.appendChild(e)})),A}},{key:"findSvgElementDescriptionFromBank",value:function(e){var t;return null===(t=this.getSvgBank().find((function(t){return e.matches("svg:has(".concat(t.selector,")"))})))||void 0===t?void 0:t.description}},{key:"getSvgBank",value:function(){return Re}},{key:"restoreDom",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document;console.log("Restoring DOM..."),j("*",e).forEach((function(e){e.removeAttribute("checksum-data-visible"),e.removeAttribute("checksum-data-interactive"),e.removeAttribute("checksumid")})),console.log("Done restoring DOM")}},{key:"mapAndStoreSelectors",value:function(){var e=o(r().mark((function e(){var t,n,i,o,a,s,u,c,l;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t={},n=new Ce,i=N(this.interactableElements),e.prev=3,i.s();case 5:if((o=i.n()).done){e.next=19;break}return a=o.value,s=a.checksumId,u=a.element,e.next=9,n.getSelector(u);case 9:return c=e.sent,e.next=12,ke(u);case 12:if(l=e.sent,c){e.next=16;break}return console.warn("Unable to get selector for element",u),e.abrupt("continue",17);case 16:t[s]={element:u,selector:c,locator:l};case 17:e.next=5;break;case 19:e.next=24;break;case 21:e.prev=21,e.t0=e.catch(3),i.e(e.t0);case 24:return e.prev=24,i.f(),e.finish(24);case 27:return e.abrupt("return",t);case 28:case"end":return e.stop()}}),e,this,[[3,21,24,27]])})));return function(){return e.apply(this,arguments)}}()},{key:"shouldFurtherReduce",value:function(e){return e.outerHTML.length>5e3}},{key:"getRandomNodes",value:function(e,t,n){t=Math.min(t,e.length);for(var r,i,o=[],a=e.slice(),s=0;s<t;s++){var u=Math.floor(Math.random()*a.length),c=a.splice(u,1)[0];n&&(i=n,(r=c).hasAttribute(i)||Array.from(r.querySelectorAll("[".concat(i,"]"))).length>0)||o.push(c)}return o}},{key:"refactorReducedHTML",value:function(e,t){for(var n=this,r=t.limitNodeRepetitions,i=void 0===r?50:r,o=t.forceIncludeAttribute,a=t.maxDepth,s=void 0===a?5:a,u=e.outerHTML.length,c=function(){var t=_e(e,i,s);if(0===Object.keys(t).reduce((function(e,n){return e+t[n].length}),0)||!Object.values(t).find((function(e){return e.find((function(e){return e.length>i}))})))return i-=i>10?5:1,"continue";var r=Object.keys(t).reduce((function(e,n){return"".concat(e).concat(n,": ").concat(t[n].map((function(e){return"[".concat(e.length," (").concat(null===e||void 0===e?void 0:e[0].tagName,")]")}))," ")}),"");console.log("Template nodes found (<depth>: <[node batches]>): ".concat(r)),Object.keys(t).reduce((function(e,n){return[].concat(T(e),T(t[n]))}),[]).forEach((function(e){e.length>i&&n.getRandomNodes(Array.from(e),Math.min(e.length-i,Math.ceil(.1*e.length)),o).forEach((function(e){return e.remove()}))}))};i>3&&this.shouldFurtherReduce(e);)c();e.outerHTML.length<u&&console.log("Reduced HTML from ".concat(u," to ").concat(e.outerHTML.length))}},{key:"reduceHTML",value:function(){var e=o(r().mark((function e(t){var n,i,o,a,s,u,c,l,d,f,h,p,v,m,g,y,b,w,I,C,S,k,E,x,A,M,T,N,_=arguments;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=_.length>1&&void 0!==_[1]?_[1]:document,o=(i=_.length>2&&void 0!==_[2]?_[2]:{}).checkElementInstanceType,a=void 0===o||o,s=i.extraAllowedAttributes,u=void 0===s?[]:s,c=i.maintainSelectorsMapping,l=void 0===c||c,d=i.initialChecksumIdIndex,f=void 0===d?0:d,h=i.forceIncludeAttribute,p=i.persistChecksumIds,v=void 0===p||p,m=i.invalidateCache,g=void 0!==m&&m,y=i.removeDisabledElements,b=void 0===y||y,w=i.svgIntegration,I=void 0===w?Le.ARIA_LABEL:w,C=i.includeFlashingElements,S=void 0===C||C,k=i.onForceIncludeElement,E=i.limitNodeRepetitions,x=void 0===E?50:E,!(A=R.getInstance("reduce",{target:n,monitorInput:!0,invalidate:g})).hasCache()){e.next=5;break}return e.abrupt("return",A.get());case 5:if(M=this.markInteractable(t,n,{persistChecksumIds:v,checksumIdCounter:f,forceIncludeAttribute:h}),console.log("Generating simplified DOM..."),T=this.generateSimplifiedDom(n.documentElement,u,{checkElementInstanceType:a,forceIncludeAttribute:h,svgIntegration:I,onForceIncludeElement:k})){e.next=10;break}throw new Error("Unable to get simplified DOM");case 10:if(this.refactorReducedHTML(T,{limitNodeRepetitions:x,forceIncludeAttribute:h,maxDepth:5}),console.log("Done generating simplified DOM"),b&&T.querySelectorAll("[disabled],[disabled=true]").forEach((function(e){return e.remove()})),this.restoreDom(n),!l){e.next=20;break}return console.log("Mapping selectors..."),e.next=18,this.mapAndStoreSelectors();case 18:this.selectors=e.sent,console.log("Done mapping selectors");case 20:return N={reducedDOM:T,reducedHTML:T.outerHTML,currentChecksumIdIndex:M,selectors:this.selectors},S&&(N.flashingHTML=this.flashingElements?this.flashingElements():[],this.flashingElements=De()),A.set(N),e.abrupt("return",N);case 24:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"getSelectorForChecksumId",value:function(e){var t;return null!==(t=this.selectors[e])&&void 0!==t?t:{selector:e}}},{key:"getInteractableElements",value:function(){return this.interactableElements}}]),e}(),je=function(){function e(){d(this,e),this.esraExtractors=[],this.appSpecificInteractableElementsSelectors=void 0,this.playwrightSelector=new Ce,this.defaultExtractReducedHtmlAndSelector=!1,this.defaultInspectInteractableElements=!1,this.previousTargetNodeForReducedHTML=void 0,this.currentReducedHTMLChecksumIdAllocationCount=0,this.htmlReducer=new Be}return p(e,[{key:"getSelector",value:function(){var e=o(r().mark((function e(t){var n,i,o,a,s,u,c,l,d,f,h,p=arguments;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i=(n=p.length>1&&void 0!==p[1]?p[1]:{}).extractPlaywrightSelector,o=void 0===i||i,a=n.extractEsraMetadata,s=void 0===a||a,u=n.extractReducedHtmlAndSelector,c=void 0===u?this.defaultExtractReducedHtmlAndSelector:u,l=n.inspectInteractableElements,d=void 0===l?this.defaultInspectInteractableElements:l,t){e.next=3;break}return e.abrupt("return",null);case 3:if(console.log("[SessionDigesterSelector] generating for node",t),f={},s&&(console.log("extracting ESRA metadata..."),h=this.getESRAExtractor(t).extract(t),f.esraMetadata=h.toMetadata(),console.log("ESRA metadata extraction complete")),!o){e.next=12;break}return console.log("extracting playwright selector..."),e.next=10,this.playwrightSelector.getSelector(t);case 10:f.playwrightSelector=e.sent,console.log("Playwright selector extraction complete");case 12:if(!c){e.next=18;break}return console.log("extracting reduced HTML..."),e.next=16,this.getReducedHTMLAndTargetNodeSelector(t);case 16:f.reducedHTML=e.sent,console.log("Reduced HTML extraction complete");case 18:if(!d){e.next=24;break}return console.log("extracting element inspection..."),e.next=22,this.isElementInteractable(t);case 22:f.interactionFoundOnInspection=e.sent,console.log("Element inspection extraction complete");case 24:return console.log("[SessionDigesterSelector] complete",f),e.abrupt("return",f);case 26:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"selector",value:function(){var e=o(r().mark((function e(t){return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.playwrightSelector.selector(t));case 1:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"setAppSpecificInteractableElementsSelectors",value:function(e){this.appSpecificInteractableElementsSelectors=e}},{key:"setOptions",value:function(e){var t=e.defaultExtractReducedHtmlAndSelector,n=e.defaultInspectInteractableElements;this.defaultExtractReducedHtmlAndSelector=t,this.defaultInspectInteractableElements=n}},{key:"getReducedHTMLAndTargetNodeSelector",value:function(){var e=o(r().mark((function e(t){var n,i,o,a,s,u,c,l,d,f;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n="checksum-target-node",t.setAttribute(n,"true"),i=this.previousTargetNodeForReducedHTML&&this.previousTargetNodeForReducedHTML!==t,this.previousTargetNodeForReducedHTML=t,o=!1,a=function(e){e.hasAttribute(n)&&(o=!0)},e.next=8,this.htmlReducer.reduceHTML(this.appSpecificInteractableElementsSelectors,t.ownerDocument,{initialChecksumIdIndex:this.currentReducedHTMLChecksumIdAllocationCount,extraAllowedAttributes:[n],checkElementInstanceType:!1,maintainSelectorsMapping:!1,forceIncludeAttribute:n,invalidateCache:i,onForceIncludeElement:a});case 8:return s=e.sent,u=s.reducedDOM,c=s.reducedHTML,l=s.currentChecksumIdIndex,t.removeAttribute(n),this.currentReducedHTMLChecksumIdAllocationCount=l,d=u.matches("[".concat(n,"=true]"))?u:u.querySelector("[".concat(n,"=true]")),f=d?d.getAttribute("checksumid"):void 0,e.abrupt("return",{html:c,selector:f,targetForceIncluded:o});case 17:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"getESRAExtractor",value:function(e){var t=this.esraExtractors.find((function(t){return t.isSameDocument(e.ownerDocument)}));if(t)return t;var n=new de(e.ownerDocument);return this.esraExtractors.push(n),n}},{key:"isElementInteractable",value:function(){var e=o(r().mark((function e(t){var n,i;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(n=this.htmlReducer.getInteractableElements())||!n.length){e.next=3;break}return e.abrupt("return",n.some((function(e){return e.element===t&&!e.forced})));case 3:return e.next=5,F(t.ownerDocument,this.appSpecificInteractableElementsSelectors);case 5:return i=e.sent,e.abrupt("return",i.includes(t));case 7:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()}]),e}(),Pe=function(e){return e[e.DomContentLoaded=0]="DomContentLoaded",e[e.Load=1]="Load",e[e.FullSnapshot=2]="FullSnapshot",e[e.IncrementalSnapshot=3]="IncrementalSnapshot",e[e.Meta=4]="Meta",e[e.Custom=5]="Custom",e[e.Plugin=6]="Plugin",e}(Pe||{}),We=function(e){return e[e.Mutation=0]="Mutation",e[e.MouseMove=1]="MouseMove",e[e.MouseInteraction=2]="MouseInteraction",e[e.Scroll=3]="Scroll",e[e.ViewportResize=4]="ViewportResize",e[e.Input=5]="Input",e[e.TouchMove=6]="TouchMove",e[e.MediaInteraction=7]="MediaInteraction",e[e.StyleSheetRule=8]="StyleSheetRule",e[e.CanvasMutation=9]="CanvasMutation",e[e.Font=10]="Font",e[e.Log=11]="Log",e[e.Drag=12]="Drag",e[e.StyleDeclaration=13]="StyleDeclaration",e[e.Selection=14]="Selection",e[e.AdoptedStyleSheet=15]="AdoptedStyleSheet",e}(We||{}),Ue=function(e){return e[e.MouseUp=0]="MouseUp",e[e.MouseDown=1]="MouseDown",e[e.Click=2]="Click",e[e.ContextMenu=3]="ContextMenu",e[e.DblClick=4]="DblClick",e[e.Focus=5]="Focus",e[e.Blur=6]="Blur",e[e.TouchStart=7]="TouchStart",e[e.TouchMove_Departed=8]="TouchMove_Departed",e[e.TouchEnd=9]="TouchEnd",e[e.TouchCancel=10]="TouchCancel",e}(Ue||{}),Ge=function(e){return e[e["2D"]=0]="2D",e[e.WebGL=1]="WebGL",e[e.WebGL2=2]="WebGL2",e}(Ge||{}),He=function(e){return e.Start="start",e.Pause="pause",e.Resume="resume",e.Resize="resize",e.Finish="finish",e.FullsnapshotRebuilded="fullsnapshot-rebuilded",e.LoadStylesheetStart="load-stylesheet-start",e.LoadStylesheetEnd="load-stylesheet-end",e.SkipStart="skip-start",e.SkipEnd="skip-end",e.MouseInteraction="mouse-interaction",e.EventCast="event-cast",e.CustomEvent="custom-event",e.Flush="flush",e.StateChange="state-change",e.PlayBack="play-back",e.Destroy="destroy",e}(He||{}),ze=function(){function e(){d(this,e)}return p(e,[{key:"skipEvents",value:function(e){}},{key:"preCastEvent",value:function(e){}},{key:"preEvent",value:function(e){}},{key:"postEvent",value:function(e,t){return t}},{key:"handleMeta",value:function(e,t){}},{key:"handleViewportResize",value:function(e){}},{key:"handleMutation",value:function(e,t){}},{key:"handleInput",value:function(e,t){}},{key:"handleClick",value:function(e,t){}},{key:"handleMouseDown",value:function(e,t){}},{key:"handleMouseUp",value:function(e,t){}},{key:"handleMouseMove",value:function(e,t){}},{key:"handleFocus",value:function(e,t){}}]),e}();!function(e){e.Click="click",e.Input="input",e.Check="check",e.UnCheck="uncheck",e.Hover="hover",e.Navigation="navigation",e.Keystroke="keystroke"}(Fe||(Fe={})),function(e){e.UrlChange="url-change",e.NetworkRequest="network-request"}(Ve||(Ve={}));var qe,Ze=n(301),Qe=n.n(Ze),Ye=function(e){ye(n,e);var t=Ie(n);function n(e){var r,i=e.sessionMirror,o=e.elementSelector;return d(this,n),(r=t.call(this)).sessionMirror=void 0,r.elementSelector=void 0,r.numberOfRetries=3,r.currentHref=void 0,r.previousMouseDownData=void 0,r.previousMousePositions=void 0,r.previousMousePositionsNodeSelectors={},r.hasUndefinedFocusNode=!1,r.lastMouseUpTime=0,r.lastMouseDownExtract=void 0,r.allInteractableElementsMetadata={mouseMove:void 0,mouseDown:void 0},r.events=void 0,r.currentEventIndex=-1,r.enableRecordingAvailableInteractableElements=!0,r.useTextInputFastForward=!0,r.textInputFastForwardInitialSelector=void 0,r.appSpecificInteractableElementsSelectors=[],r.getBoundingBox=function(e){var t=V(r.sessionMirror.getNodeById(e),r.appSpecificInteractableElementsSelectors);if(t)return null===t||void 0===t?void 0:t.getBoundingClientRect()},r.isPointWithinBoundingBox=function(e,t,n){return e>=n.left&&e<=n.right&&t>=n.top&&t<=n.bottom},r.isPointWithinNodeBoundingBox=function(e,t,n){var i=r.getBoundingBox(e);return!!i&&(t>=i.left&&t<=i.right&&n>=i.top&&n<=i.bottom)},r.elementSelector=o,r.sessionMirror=i,r}return p(n,[{key:"setEvents",value:function(e){this.events=e}},{key:"setConfiguration",value:function(e){var t=e.enableRecordingAvailableInteractableElements,n=e.useTextInputFastForward,r=void 0===n||n;this.enableRecordingAvailableInteractableElements=t,this.useTextInputFastForward=r}},{key:"setAppSpecificInteractableElementsSelectors",value:function(e){this.appSpecificInteractableElementsSelectors=e}},{key:"skipEvents",value:function(e){this.currentEventIndex+=e.length}},{key:"preEvent",value:function(e){++this.currentEventIndex}},{key:"postEvent",value:function(){var e=o(r().mark((function e(t,n){return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n){e.next=2;break}return e.abrupt("return",n);case 2:if(n.availableInteractableElementsAtStart||!this.enableRecordingAvailableInteractableElements||t.type!==Pe.IncrementalSnapshot||t.data.source!==We.MouseInteraction&&t.data.source!==We.Input&&t.data.source!==We.MediaInteraction){e.next=6;break}return e.next=5,this.getInteractableElementsMetadata();case 5:n.availableInteractableElementsAtStart=e.sent;case 6:return e.abrupt("return",n);case 7:case"end":return e.stop()}}),e,this)})));return function(t,n){return e.apply(this,arguments)}}()},{key:"handleMeta",value:function(e){if(e.href!==this.currentHref)return this.currentHref=e.href,{eventCode:Fe.Navigation,url:e.href}}},{key:"getNextUserTriggeredInputEvent",value:function(e){for(var t=this.currentEventIndex+1;t<this.events.length;++t){var n=this.events[t];if(n.type===Pe.IncrementalSnapshot&&n.data.source===We.Input&&n.data.userTriggered)return n;if(n.timestamp>e)return}}},{key:"handleInput",value:function(){var e=o(r().mark((function e(t,n){var i,a,s,u,c,l=this;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.userTriggered){e.next=2;break}return e.abrupt("return");case 2:return e.next=4,this.getNodeById(t.id);case 4:if(i=e.sent,(a=this.getInputEventCode(i,t))!==Fe.Input||!this.useTextInputFastForward){e.next=18;break}if(this.textInputFastForwardInitialSelector){e.next=11;break}return e.next=10,this.elementSelector.getSelector(i);case 10:this.textInputFastForwardInitialSelector=e.sent;case 11:return s=C({eventCode:a},this.textInputFastForwardInitialSelector),u=function(){var e=o(r().mark((function e(){var t,o,a;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(t=l.getNextUserTriggeredInputEvent(n.timestamp+2e3))){e.next=9;break}return o=t.data,e.next=5,l.getNodeById(o.id);case 5:if((a=e.sent)===i){e.next=8;break}return e.abrupt("return",!1);case 8:return e.abrupt("return",l.getInputEventCode(a,o)===Fe.Input);case 9:return e.abrupt("return",!1);case 10:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),e.next=15,u();case 15:if(e.sent){e.next=17;break}this.textInputFastForwardInitialSelector=void 0;case 17:return e.abrupt("return",s);case 18:return e.next=20,this.elementSelector.getSelector(i);case 20:return c=e.sent,e.abrupt("return",C({eventCode:a},c));case 22:case"end":return e.stop()}}),e,this)})));return function(t,n){return e.apply(this,arguments)}}()},{key:"handleMouseMove",value:function(){var e=o(r().mark((function e(t){var n,i,o,a,s,u;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.previousMousePositions=t.positions,this.previousMousePositionsNodeSelectors={},!this.isLastMouseMoveEventBeforeMouseDownOrUndefinedFocus()){e.next=39;break}this.previousMousePositionsNodeSelectors={},n={},i=N(this.previousMousePositions),e.prev=6,i.s();case 8:if((o=i.n()).done){e.next=28;break}if(a=o.value,s=a.id,!n[s]){e.next=13;break}return e.abrupt("continue",26);case 13:return n[s]=!0,e.next=16,this.getNodeById(s);case 16:return u=e.sent,e.prev=17,e.next=20,this.elementSelector.getSelector(u);case 20:this.previousMousePositionsNodeSelectors[s]=e.sent,e.next=26;break;case 23:e.prev=23,e.t0=e.catch(17),console.warn("error with extracting selector for node during previousMousePositionsNodeSelectors mapping",u,e.t0);case 26:e.next=8;break;case 28:e.next=33;break;case 30:e.prev=30,e.t1=e.catch(6),i.e(e.t1);case 33:return e.prev=33,i.f(),e.finish(33);case 36:return e.next=38,this.getInteractableElementsMetadata();case 38:this.allInteractableElementsMetadata.mouseMove=e.sent;case 39:case"end":return e.stop()}}),e,this,[[6,30,33,36],[17,23]])})));return function(t){return e.apply(this,arguments)}}()},{key:"isLastMouseMoveEventBeforeMouseDownOrUndefinedFocus",value:function(){for(var e=this.currentEventIndex+1;e<this.events.length;++e){var t=this.events[e];if(t.type===Pe.IncrementalSnapshot)switch(t.data.source){case We.MouseMove:return!1;case We.MouseInteraction:switch(t.data.type){case Ue.Click:case Ue.MouseDown:return!0;case Ue.Focus:return-1===t.data.id}}}return!1}},{key:"handleMouseDown",value:function(){var e=o(r().mark((function e(t){var n;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.getNodeById(t.id);case 2:return n=e.sent,e.prev=3,e.t0=n,e.next=7,this.elementSelector.getSelector(n);case 7:return e.t1=e.sent,this.lastMouseDownExtract={node:e.t0,selector:e.t1},e.next=11,this.getInteractableElementsMetadata();case 11:this.allInteractableElementsMetadata.mouseDown=e.sent,e.next=17;break;case 14:e.prev=14,e.t2=e.catch(3),console.warn("error with extracting selector for node during handleMouseDown",n,e.t2);case 17:this.previousMouseDownData=t;case 18:case"end":return e.stop()}}),e,this,[[3,14]])})));return function(t){return e.apply(this,arguments)}}()},{key:"handleMouseUp",value:function(){var e=o(r().mark((function e(t,n){return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:this.lastMouseUpTime=n.timestamp;case 1:case"end":return e.stop()}}),e,this)})));return function(t,n){return e.apply(this,arguments)}}()},{key:"isLastMouseDownValidForClick",value:function(e){return!!this.lastMouseDownExtract&&e-this.lastMouseUpTime<10}},{key:"invalidateLastMouseDown",value:function(){this.lastMouseUpTime=0,this.lastMouseDownExtract=void 0,this.allInteractableElementsMetadata.mouseDown=void 0}},{key:"handleFocus",value:function(){var e=o(r().mark((function e(t){return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:this.hasUndefinedFocusNode=-1===t.id;case 1:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"handleClick",value:function(){var e=o(r().mark((function e(t,n){var i,a,s,u=this;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(void 0!==t.x&&void 0!==t.y){e.next=2;break}return e.abrupt("return");case 2:return i=this.isLastMouseDownValidForClick(n.timestamp),function(){var e=o(r().mark((function e(){var o,a;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o=u.getNodeIdForClick(t,n),e.next=3,u.getNodeById(o);case 3:a=e.sent,console.log("click",a),console.log("isMouseDownValidForClick",i),o!==u.previousMouseDownData.id&&i&&console.warn("not same");case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),a=function(){var e=o(r().mark((function e(){var o,a,s,c;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!i){e.next=19;break}return e.t0=C,e.t1=C({},u.lastMouseDownExtract.selector),e.t2={},e.next=6,u.elementSelector.getSelector(u.lastMouseDownExtract.node,{extractEsraMetadata:!1});case 6:if(e.t4=o=e.sent,e.t3=null===e.t4,e.t3){e.next=10;break}e.t3=void 0===o;case 10:if(!e.t3){e.next=14;break}e.t5=void 0,e.next=15;break;case 14:e.t5=o.playwrightSelector;case 15:return e.t6=e.t5,e.t7=u.allInteractableElementsMetadata.mouseDown,e.t8={playwrightSelectorForSnapshot:e.t6,availableInteractableElementsAtStart:e.t7},e.abrupt("return",(0,e.t0)(e.t1,e.t2,e.t8));case 19:return a=u.getNodeIdForClick(t,n),e.next=22,u.getNodeById(a);case 22:if(s=e.sent,!u.previousMousePositionsNodeSelectors[a]){e.next=42;break}return e.t9=C,e.t10=C({},u.previousMousePositionsNodeSelectors[a]),e.t11={},e.next=29,u.elementSelector.getSelector(s,{extractEsraMetadata:!1});case 29:if(e.t13=c=e.sent,e.t12=null===e.t13,e.t12){e.next=33;break}e.t12=void 0===c;case 33:if(!e.t12){e.next=37;break}e.t14=void 0,e.next=38;break;case 37:e.t14=c.playwrightSelector;case 38:return e.t15=e.t14,e.t16=u.allInteractableElementsMetadata.mouseMove,e.t17={playwrightSelectorForSnapshot:e.t15,availableInteractableElementsAtStart:e.t16},e.abrupt("return",(0,e.t9)(e.t10,e.t11,e.t17));case 42:return e.abrupt("return",u.elementSelector.getSelector(s));case 43:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),e.next=7,a();case 7:return s=e.sent,this.invalidateLastMouseDown(),e.abrupt("return",C({eventCode:Fe.Click},s));case 10:case"end":return e.stop()}}),e,this)})));return function(t,n){return e.apply(this,arguments)}}()},{key:"getNextMouseMoveEvent",value:function(){for(var e=this.currentEventIndex+1;e<this.events.length;++e){var t=this.events[e];if(t.type===Pe.IncrementalSnapshot&&t.data.source===We.MouseMove)return t}}},{key:"getNodeIdForClick",value:function(e,t){var n=this;if(this.hasUndefinedFocusNode&&this.previousMouseDownData&&this.previousMouseDownData.id!==e.id){var r={next:function(){var e=n.getNextMouseMoveEvent();if(e){var r=T(e.data.positions).reverse().find((function(n){return e.timestamp+n.timeOffset<t.timestamp}));if(r)return r.id}}(),previous:function(){if(n.previousMousePositions){var e=T(n.previousMousePositions).reverse().find((function(e){return!0}));if(e)return e.id}}(),point:function(){try{var t=n.sessionMirror.getNodeById(e.id),r=Array.from(W(t)).filter((function(e){return"none"===window.getComputedStyle(e).pointerEvents})),i=[];if(r.length){r.forEach((function(e){var t=e,n=t.getAttribute("style");i.push(n),t.setAttribute("style",n+";pointer-events:auto !important")}));var o=document.querySelector("iframe").contentDocument.elementFromPoint(e.x,e.y);if(r.forEach((function(e,t){e.setAttribute("style",i[t])})),o){var a=n.sessionMirror.getMeta(o);if(a)return a.id}}}catch(Dn){console.warn("element from point calc error",Dn)}}(),original:e.id},i=r.next||r.previous||e.id;return r.point&&function(){if(i===r.point)return!1;var t=n.sessionMirror.getNodeById(i);return n.isPointWithinBoundingBox(e.x,e.y,t.getBoundingClientRect())}()?r.point:i}return e.id}},{key:"getNodeById",value:function(){var e=o(r().mark((function e(t){var n,i,o,a,s,u,c=arguments;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i=(n=c.length>1&&void 0!==c[1]?c[1]:{}).retriesLeft,o=void 0===i?this.numberOfRetries:i,a=n.useCompoundInteractableDetection,s=void 0===a||a,o){e.next=4;break}return console.error("no node"),e.abrupt("return",null);case 4:if(u=this.sessionMirror.getNodeById(t)){e.next=9;break}return e.next=8,Qe()(100*(this.numberOfRetries-o+1));case 8:return e.abrupt("return",this.getNodeById(t,{retriesLeft:o-1,useCompoundInteractableDetection:s}));case 9:return e.abrupt("return",s?V(u,this.appSpecificInteractableElementsSelectors):u);case 10:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"getInputEventCode",value:function(e,t){switch(e.getAttribute("type")){case"checkbox":case"radio":return t.isChecked?Fe.Check:Fe.UnCheck;default:return Fe.Input}}},{key:"getInteractableElementsMetadata",value:function(){var e=o(r().mark((function e(){var t,n,i,a,s;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.enableRecordingAvailableInteractableElements){e.next=2;break}return e.abrupt("return",[]);case 2:return t=document.querySelector("iframe").contentWindow,n=t.document,console.log("Getting all interactable elements..."),i=F(n,this.appSpecificInteractableElementsSelectors),console.log("Got ".concat(i.length," interactable elements")),console.log("Extracting ESRA metadata for all interactable elements..."),a=new de(n),e.next=11,Promise.all(i.map(function(){var e=o(r().mark((function e(t){var n;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=a.extract(t).toMetadata(),e.abrupt("return",{esraMetadata:n});case 2:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()));case 11:return s=e.sent,console.log("Done processing all interactable elements..."),e.abrupt("return",s);case 14:case"end":return e.stop()}}),e,this)})));return function(){return e.apply(this,arguments)}}()}]),n}(ze),Ke=function(){function e(t){var n=this,i=t.eventHandlers;d(this,e),this.handlers=void 0,this.events=[],this.getEvents=function(){return n.events},this.preCastEvent=function(){var e=o(r().mark((function e(t){return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",n.handlers.preCastEvent(t));case 1:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),this.processEvent=function(){var e=o(r().mark((function e(t){var i,o;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n.events.push(t),n.handlers.preEvent(t),e.next=4,n.handleEvent(t);case 4:return i=e.sent,e.next=7,n.handlers.postEvent(t,i);case 7:return o=e.sent,e.abrupt("return",n.handlers.controlledReturn?n.handlers.getReturnValue():o);case 9:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),this.skipEvents=function(){var e=o(r().mark((function e(t){var i;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(i=n.events).push.apply(i,T(t)),e.abrupt("return",n.handlers.skipEvents(t));case 2:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),this.handlers=i}return p(e,[{key:"setHandlers",value:function(e){this.handlers=e}},{key:"handleEvent",value:function(){var e=o(r().mark((function e(t){return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:e.t0=t.type,e.next=e.t0===Pe.Meta?3:e.t0===Pe.IncrementalSnapshot?4:14;break;case 3:return e.abrupt("return",this.handlers.handleMeta(t.data,t));case 4:e.t1=t.data.source,e.next=e.t1===We.ViewportResize?7:e.t1===We.Mutation?8:e.t1===We.Input?9:e.t1===We.MouseInteraction?10:e.t1===We.MouseMove?11:12;break;case 7:return e.abrupt("return",this.handlers.handleViewportResize(t.data,t));case 8:return e.abrupt("return",this.handlers.handleMutation(t.data,t));case 9:return e.abrupt("return",this.handlers.handleInput(t.data,t));case 10:return e.abrupt("return",this.handleMouseInteraction(t.data,t));case 11:return e.abrupt("return",this.handlers.handleMouseMove(t.data,t));case 12:return e.abrupt("break",13);case 13:case 14:return e.abrupt("break",15);case 15:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"handleMouseInteraction",value:function(){var e=o(r().mark((function e(t,n){return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:e.t0=t.type,e.next=e.t0===Ue.Click?3:e.t0===Ue.MouseDown?4:e.t0===Ue.MouseUp?5:e.t0===Ue.Focus?6:7;break;case 3:return e.abrupt("return",this.handlers.handleClick(t,n));case 4:return e.abrupt("return",this.handlers.handleMouseDown(t,n));case 5:return e.abrupt("return",this.handlers.handleMouseUp(t,n));case 6:return e.abrupt("return",this.handlers.handleFocus(t,n));case 7:return e.abrupt("break",8);case 8:case"end":return e.stop()}}),e,this)})));return function(t,n){return e.apply(this,arguments)}}()}]),e}();function Xe(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{u(r.next(e))}catch(Dn){o(Dn)}}function s(e){try{u(r.throw(e))}catch(Dn){o(Dn)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((r=r.apply(e,t||[])).next())}))}function Je(e){return e.nodeType===e.ELEMENT_NODE}function $e(e){var t=null===e||void 0===e?void 0:e.host;return Boolean((null===t||void 0===t?void 0:t.shadowRoot)===e)}function et(e){return"[object ShadowRoot]"===Object.prototype.toString.call(e)}function tt(e){try{var t=e.rules||e.cssRules;return t?((n=Array.from(t).map(nt).join("")).includes(" background-clip: text;")&&!n.includes(" -webkit-background-clip: text;")&&(n=n.replace(" background-clip: text;"," -webkit-background-clip: text; background-clip: text;")),n):null}catch(r){return null}var n}function nt(e){var t=e.cssText;if(function(e){return"styleSheet"in e}(e))try{t=tt(e.styleSheet)||t}catch(n){}return t}!function(e){e[e.Document=0]="Document",e[e.DocumentType=1]="DocumentType",e[e.Element=2]="Element",e[e.Text=3]="Text",e[e.CDATA=4]="CDATA",e[e.Comment=5]="Comment"}(qe||(qe={}));var rt=function(){function e(){this.idNodeMap=new Map,this.nodeMetaMap=new WeakMap}return e.prototype.getId=function(e){var t;if(!e)return-1;var n=null===(t=this.getMeta(e))||void 0===t?void 0:t.id;return null!==n&&void 0!==n?n:-1},e.prototype.getNode=function(e){return this.idNodeMap.get(e)||null},e.prototype.getIds=function(){return Array.from(this.idNodeMap.keys())},e.prototype.getMeta=function(e){return this.nodeMetaMap.get(e)||null},e.prototype.removeNodeFromMap=function(e){var t=this,n=this.getId(e);this.idNodeMap.delete(n),e.childNodes&&e.childNodes.forEach((function(e){return t.removeNodeFromMap(e)}))},e.prototype.has=function(e){return this.idNodeMap.has(e)},e.prototype.hasNode=function(e){return this.nodeMetaMap.has(e)},e.prototype.add=function(e,t){var n=t.id;this.idNodeMap.set(n,e),this.nodeMetaMap.set(e,t)},e.prototype.replace=function(e,t){var n=this.getNode(e);if(n){var r=this.nodeMetaMap.get(n);r&&this.nodeMetaMap.set(t,r)}this.idNodeMap.set(e,t)},e.prototype.reset=function(){this.idNodeMap=new Map,this.nodeMetaMap=new WeakMap},e}();function it(){return new rt}function ot(e){var t=e.maskInputOptions,n=e.tagName,r=e.type,i=e.value,o=e.maskInputFn,a=i||"";return(t[n.toLowerCase()]||t[r])&&(a=o?o(a):"*".repeat(a.length)),a}var at="__rrweb_original__";var st,ut,ct=1,lt=new RegExp("[^a-z0-9-_:]"),dt=-2;function ft(){return ct++}var ht=/url\((?:(')([^']*)'|(")(.*?)"|([^)]*))\)/gm,pt=/^(?!www\.|(?:http|ftp)s?:\/\/|[A-Za-z]:\\|\/\/|#).*/,vt=/^(data:)([^,]*),(.*)/i;function mt(e,t){return(e||"").replace(ht,(function(e,n,r,i,o,a){var s,u=r||o||a,c=n||i||"";if(!u)return e;if(!pt.test(u))return"url(".concat(c).concat(u).concat(c,")");if(vt.test(u))return"url(".concat(c).concat(u).concat(c,")");if("/"===u[0])return"url(".concat(c).concat((s=t,(s.indexOf("//")>-1?s.split("/").slice(0,3).join("/"):s.split("/")[0]).split("?")[0]+u)).concat(c,")");var l=t.split("/"),d=u.split("/");l.pop();for(var f=0,h=d;f<h.length;f++){var p=h[f];"."!==p&&(".."===p?l.pop():l.push(p))}return"url(".concat(c).concat(l.join("/")).concat(c,")")}))}var gt=/^[^ \t\n\r\u000c]+/,yt=/^[, \t\n\r\u000c]+/;function bt(e,t){if(!t||""===t.trim())return t;var n=e.createElement("a");return n.href=t,n.href}function wt(e){return Boolean("svg"===e.tagName||e.ownerSVGElement)}function It(){var e=document.createElement("a");return e.href="",e.href}function Ct(e,t,n,r){return"src"===n||"href"===n&&r&&("use"!==t||"#"!==r[0])||"xlink:href"===n&&r&&"#"!==r[0]?bt(e,r):"background"!==n||!r||"table"!==t&&"td"!==t&&"th"!==t?"srcset"===n&&r?function(e,t){if(""===t.trim())return t;var n=0;function r(e){var r,i=e.exec(t.substring(n));return i?(r=i[0],n+=r.length,r):""}for(var i=[];r(yt),!(n>=t.length);){var o=r(gt);if(","===o.slice(-1))o=bt(e,o.substring(0,o.length-1)),i.push(o);else{var a="";o=bt(e,o);for(var s=!1;;){var u=t.charAt(n);if(""===u){i.push((o+a).trim());break}if(s)")"===u&&(s=!1);else{if(","===u){n+=1,i.push((o+a).trim());break}"("===u&&(s=!0)}a+=u,n+=1}}}return i.join(", ")}(e,r):"style"===n&&r?mt(r,It()):"object"===t&&"data"===n&&r?bt(e,r):r:bt(e,r)}function St(e,t,n){if(!e)return!1;if(e.nodeType!==e.ELEMENT_NODE)return!!n&&St(e.parentNode,t,n);for(var r=e.classList.length;r--;){var i=e.classList[r];if(t.test(i))return!0}return!!n&&St(e.parentNode,t,n)}function kt(e,t,n){var r=e.nodeType===e.ELEMENT_NODE?e:e.parentElement;if(null===r)return!1;if("string"===typeof t){if(r.classList.contains(t))return!0;if(r.closest(".".concat(t)))return!0}else if(St(r,t,!0))return!0;if(n){if(r.matches(n))return!0;if(r.closest(n))return!0}return!1}function Et(e,t){var n=t.doc,r=t.mirror,i=t.blockClass,o=t.blockSelector,a=t.maskTextClass,s=t.maskTextSelector,u=t.inlineStylesheet,c=t.maskInputOptions,l=void 0===c?{}:c,d=t.maskTextFn,f=t.maskInputFn,h=t.dataURLOptions,p=void 0===h?{}:h,v=t.inlineImages,m=t.recordCanvas,g=t.keepIframeSrcFn,y=t.newlyAddedElement,b=void 0!==y&&y,w=function(e,t){if(!t.hasNode(e))return;var n=t.getId(e);return 1===n?void 0:n}(n,r);switch(e.nodeType){case e.DOCUMENT_NODE:return"CSS1Compat"!==e.compatMode?{type:qe.Document,childNodes:[],compatMode:e.compatMode}:{type:qe.Document,childNodes:[]};case e.DOCUMENT_TYPE_NODE:return{type:qe.DocumentType,name:e.name,publicId:e.publicId,systemId:e.systemId,rootId:w};case e.ELEMENT_NODE:return function(e,t){for(var n=t.doc,r=t.blockClass,i=t.blockSelector,o=t.inlineStylesheet,a=t.maskInputOptions,s=void 0===a?{}:a,u=t.maskInputFn,c=t.dataURLOptions,l=void 0===c?{}:c,d=t.inlineImages,f=t.recordCanvas,h=t.keepIframeSrcFn,p=t.newlyAddedElement,v=void 0!==p&&p,m=t.rootId,g=function(e,t,n){if("string"===typeof t){if(e.classList.contains(t))return!0}else for(var r=e.classList.length;r--;){var i=e.classList[r];if(t.test(i))return!0}return!!n&&e.matches(n)}(e,r,i),y=function(e){if(e instanceof HTMLFormElement)return"form";var t=e.tagName.toLowerCase().trim();return lt.test(t)?"div":t}(e),b={},w=e.attributes.length,I=0;I<w;I++){var C=e.attributes[I];b[C.name]=Ct(n,y,C.name,C.value)}if("link"===y&&o){var S=Array.from(n.styleSheets).find((function(t){return t.href===e.href})),k=null;S&&(k=tt(S)),k&&(delete b.rel,delete b.href,b._cssText=mt(k,S.href))}if("style"===y&&e.sheet&&!(e.innerText||e.textContent||"").trim().length){(k=tt(e.sheet))&&(b._cssText=mt(k,It()))}if("input"===y||"textarea"===y||"select"===y){var E=e.value,x=e.checked;"radio"!==b.type&&"checkbox"!==b.type&&"submit"!==b.type&&"button"!==b.type&&E?b.value=ot({type:b.type,tagName:y,value:E,maskInputOptions:s,maskInputFn:u}):x&&(b.checked=x)}"option"===y&&(e.selected&&!s.select?b.selected=!0:delete b.selected);if("canvas"===y&&f)if("2d"===e.__context)(function(e){var t=e.getContext("2d");if(!t)return!0;for(var n=0;n<e.width;n+=50)for(var r=0;r<e.height;r+=50){var i=t.getImageData,o=at in i?i[at]:i;if(new Uint32Array(o.call(t,n,r,Math.min(50,e.width-n),Math.min(50,e.height-r)).data.buffer).some((function(e){return 0!==e})))return!1}return!0})(e)||(b.rr_dataURL=e.toDataURL(l.type,l.quality));else if(!("__context"in e)){var A=e.toDataURL(l.type,l.quality),M=document.createElement("canvas");M.width=e.width,M.height=e.height,A!==M.toDataURL(l.type,l.quality)&&(b.rr_dataURL=A)}if("img"===y&&d){st||(st=n.createElement("canvas"),ut=st.getContext("2d"));var T=e,N=T.crossOrigin;T.crossOrigin="anonymous";var _=function(){try{st.width=T.naturalWidth,st.height=T.naturalHeight,ut.drawImage(T,0,0),b.rr_dataURL=st.toDataURL(l.type,l.quality)}catch(e){console.warn("Cannot inline img src=".concat(T.currentSrc,"! Error: ").concat(e))}N?b.crossOrigin=N:T.removeAttribute("crossorigin")};T.complete&&0!==T.naturalWidth?_():T.onload=_}"audio"!==y&&"video"!==y||(b.rr_mediaState=e.paused?"paused":"played",b.rr_mediaCurrentTime=e.currentTime);v||(e.scrollLeft&&(b.rr_scrollLeft=e.scrollLeft),e.scrollTop&&(b.rr_scrollTop=e.scrollTop));if(g){var R=e.getBoundingClientRect(),O=R.width,D=R.height;b={class:b.class,rr_width:"".concat(O,"px"),rr_height:"".concat(D,"px")}}"iframe"!==y||h(b.src)||(e.contentDocument||(b.rr_src=b.src),delete b.src);return{type:qe.Element,tagName:y,attributes:b,childNodes:[],isSVG:wt(e)||void 0,needBlock:g,rootId:m}}(e,{doc:n,blockClass:i,blockSelector:o,inlineStylesheet:u,maskInputOptions:l,maskInputFn:f,dataURLOptions:p,inlineImages:v,recordCanvas:m,keepIframeSrcFn:g,newlyAddedElement:b,rootId:w});case e.TEXT_NODE:return function(e,t){var n,r=t.maskTextClass,i=t.maskTextSelector,o=t.maskTextFn,a=t.rootId,s=e.parentNode&&e.parentNode.tagName,u=e.textContent,c="STYLE"===s||void 0,l="SCRIPT"===s||void 0;if(c&&u){try{e.nextSibling||e.previousSibling||(null===(n=e.parentNode.sheet)||void 0===n?void 0:n.cssRules)&&(u=(d=e.parentNode.sheet).cssRules?Array.from(d.cssRules).map((function(e){return e.cssText||""})).join(""):"")}catch(f){console.warn("Cannot get CSS styles from text's parentNode. Error: ".concat(f),e)}u=mt(u,It())}var d;l&&(u="SCRIPT_PLACEHOLDER");!c&&!l&&u&&kt(e,r,i)&&(u=o?o(u):u.replace(/[\S]/g,"*"));return{type:qe.Text,textContent:u||"",isStyle:c,rootId:a}}(e,{maskTextClass:a,maskTextSelector:s,maskTextFn:d,rootId:w});case e.CDATA_SECTION_NODE:return{type:qe.CDATA,textContent:"",rootId:w};case e.COMMENT_NODE:return{type:qe.Comment,textContent:e.textContent||"",rootId:w};default:return!1}}function xt(e){return void 0===e?"":e.toLowerCase()}function At(e,t){var n,r=t.doc,i=t.mirror,o=t.blockClass,a=t.blockSelector,s=t.maskTextClass,u=t.maskTextSelector,c=t.skipChild,l=void 0!==c&&c,d=t.inlineStylesheet,f=void 0===d||d,h=t.maskInputOptions,p=void 0===h?{}:h,v=t.maskTextFn,m=t.maskInputFn,g=t.slimDOMOptions,y=t.dataURLOptions,b=void 0===y?{}:y,w=t.inlineImages,I=void 0!==w&&w,C=t.recordCanvas,S=void 0!==C&&C,k=t.onSerialize,E=t.onIframeLoad,x=t.iframeLoadTimeout,A=void 0===x?5e3:x,M=t.onStylesheetLoad,T=t.stylesheetLoadTimeout,N=void 0===T?5e3:T,_=t.keepIframeSrcFn,R=void 0===_?function(){return!1}:_,O=t.newlyAddedElement,D=void 0!==O&&O,L=t.preserveWhiteSpace,F=void 0===L||L,V=Et(e,{doc:r,mirror:i,blockClass:o,blockSelector:a,maskTextClass:s,maskTextSelector:u,inlineStylesheet:f,maskInputOptions:p,maskTextFn:v,maskInputFn:m,dataURLOptions:b,inlineImages:I,recordCanvas:S,keepIframeSrcFn:R,newlyAddedElement:D});if(!V)return console.warn(e,"not serialized"),null;n=i.hasNode(e)?i.getId(e):!function(e,t){if(t.comment&&e.type===qe.Comment)return!0;if(e.type===qe.Element){if(t.script&&("script"===e.tagName||"link"===e.tagName&&("preload"===e.attributes.rel||"modulepreload"===e.attributes.rel)&&"script"===e.attributes.as||"link"===e.tagName&&"prefetch"===e.attributes.rel&&"string"===typeof e.attributes.href&&e.attributes.href.endsWith(".js")))return!0;if(t.headFavicon&&("link"===e.tagName&&"shortcut icon"===e.attributes.rel||"meta"===e.tagName&&(xt(e.attributes.name).match(/^msapplication-tile(image|color)$/)||"application-name"===xt(e.attributes.name)||"icon"===xt(e.attributes.rel)||"apple-touch-icon"===xt(e.attributes.rel)||"shortcut icon"===xt(e.attributes.rel))))return!0;if("meta"===e.tagName){if(t.headMetaDescKeywords&&xt(e.attributes.name).match(/^description|keywords$/))return!0;if(t.headMetaSocial&&(xt(e.attributes.property).match(/^(og|twitter|fb):/)||xt(e.attributes.name).match(/^(og|twitter):/)||"pinterest"===xt(e.attributes.name)))return!0;if(t.headMetaRobots&&("robots"===xt(e.attributes.name)||"googlebot"===xt(e.attributes.name)||"bingbot"===xt(e.attributes.name)))return!0;if(t.headMetaHttpEquiv&&void 0!==e.attributes["http-equiv"])return!0;if(t.headMetaAuthorship&&("author"===xt(e.attributes.name)||"generator"===xt(e.attributes.name)||"framework"===xt(e.attributes.name)||"publisher"===xt(e.attributes.name)||"progid"===xt(e.attributes.name)||xt(e.attributes.property).match(/^article:/)||xt(e.attributes.property).match(/^product:/)))return!0;if(t.headMetaVerification&&("google-site-verification"===xt(e.attributes.name)||"yandex-verification"===xt(e.attributes.name)||"csrf-token"===xt(e.attributes.name)||"p:domain_verify"===xt(e.attributes.name)||"verify-v1"===xt(e.attributes.name)||"verification"===xt(e.attributes.name)||"shopify-checkout-api-token"===xt(e.attributes.name)))return!0}}return!1}(V,g)&&(F||V.type!==qe.Text||V.isStyle||V.textContent.replace(/^\s+|\s+$/gm,"").length)?ft():dt;var B=Object.assign(V,{id:n});if(i.add(e,B),n===dt)return null;k&&k(e);var j=!l;if(B.type===qe.Element){j=j&&!B.needBlock,delete B.needBlock;var P=e.shadowRoot;P&&et(P)&&(B.isShadowHost=!0)}if((B.type===qe.Document||B.type===qe.Element)&&j){g.headWhitespace&&B.type===qe.Element&&"head"===B.tagName&&(F=!1);for(var W={doc:r,mirror:i,blockClass:o,blockSelector:a,maskTextClass:s,maskTextSelector:u,skipChild:l,inlineStylesheet:f,maskInputOptions:p,maskTextFn:v,maskInputFn:m,slimDOMOptions:g,dataURLOptions:b,inlineImages:I,recordCanvas:S,preserveWhiteSpace:F,onSerialize:k,onIframeLoad:E,iframeLoadTimeout:A,onStylesheetLoad:M,stylesheetLoadTimeout:N,keepIframeSrcFn:R},U=0,G=Array.from(e.childNodes);U<G.length;U++){(q=At(G[U],W))&&B.childNodes.push(q)}if(Je(e)&&e.shadowRoot)for(var H=0,z=Array.from(e.shadowRoot.childNodes);H<z.length;H++){var q;(q=At(z[H],W))&&(et(e.shadowRoot)&&(q.isShadow=!0),B.childNodes.push(q))}}return e.parentNode&&$e(e.parentNode)&&et(e.parentNode)&&(B.isShadow=!0),B.type===qe.Element&&"iframe"===B.tagName&&function(e,t,n){var r=e.contentWindow;if(r){var i,o=!1;try{i=r.document.readyState}catch(u){return}if("complete"===i){var a="about:blank";if(r.location.href!==a||e.src===a||""===e.src)return setTimeout(t,0),e.addEventListener("load",t);e.addEventListener("load",t)}else{var s=setTimeout((function(){o||(t(),o=!0)}),n);e.addEventListener("load",(function(){clearTimeout(s),o=!0,t()}))}}}(e,(function(){var t=e.contentDocument;if(t&&E){var n=At(t,{doc:t,mirror:i,blockClass:o,blockSelector:a,maskTextClass:s,maskTextSelector:u,skipChild:!1,inlineStylesheet:f,maskInputOptions:p,maskTextFn:v,maskInputFn:m,slimDOMOptions:g,dataURLOptions:b,inlineImages:I,recordCanvas:S,preserveWhiteSpace:F,onSerialize:k,onIframeLoad:E,iframeLoadTimeout:A,onStylesheetLoad:M,stylesheetLoadTimeout:N,keepIframeSrcFn:R});n&&E(e,n)}}),A),B.type===qe.Element&&"link"===B.tagName&&"stylesheet"===B.attributes.rel&&function(e,t,n){var r,i=!1;try{r=e.sheet}catch(a){return}if(!r){var o=setTimeout((function(){i||(t(),i=!0)}),n);e.addEventListener("load",(function(){clearTimeout(o),i=!0,t()}))}}(e,(function(){if(M){var t=At(e,{doc:r,mirror:i,blockClass:o,blockSelector:a,maskTextClass:s,maskTextSelector:u,skipChild:!1,inlineStylesheet:f,maskInputOptions:p,maskTextFn:v,maskInputFn:m,slimDOMOptions:g,dataURLOptions:b,inlineImages:I,recordCanvas:S,preserveWhiteSpace:F,onSerialize:k,onIframeLoad:E,iframeLoadTimeout:A,onStylesheetLoad:M,stylesheetLoadTimeout:N,keepIframeSrcFn:R});t&&M(e,t)}}),N),B}var Mt=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;function Tt(e,t){void 0===t&&(t={});var n=1,r=1;function i(e){var t=e.match(/\n/g);t&&(n+=t.length);var i=e.lastIndexOf("\n");r=-1===i?r+e.length:e.length-i}function o(){var e={line:n,column:r};return function(t){return t.position=new a(e),h(),t}}var a=function(e){this.start=e,this.end={line:n,column:r},this.source=t.source};a.prototype.content=e;var s=[];function u(i){var o=new Error("".concat(t.source||"",":").concat(n,":").concat(r,": ").concat(i));if(o.reason=i,o.filename=t.source,o.line=n,o.column=r,o.source=e,!t.silent)throw o;s.push(o)}function c(){return f(/^{\s*/)}function l(){return f(/^}/)}function d(){var t,n=[];for(h(),p(n);e.length&&"}"!==e.charAt(0)&&(t=k()||E());)!1!==t&&(n.push(t),p(n));return n}function f(t){var n=t.exec(e);if(n){var r=n[0];return i(r),e=e.slice(r.length),n}}function h(){f(/^\s*/)}function p(e){var t;for(void 0===e&&(e=[]);t=v();)!1!==t&&e.push(t),t=v();return e}function v(){var t=o();if("/"===e.charAt(0)&&"*"===e.charAt(1)){for(var n=2;""!==e.charAt(n)&&("*"!==e.charAt(n)||"/"!==e.charAt(n+1));)++n;if(n+=2,""===e.charAt(n-1))return u("End of comment missing");var a=e.slice(2,n-2);return r+=2,i(a),e=e.slice(n),r+=2,t({type:"comment",comment:a})}}function m(){var e=f(/^([^{]+)/);if(e)return Nt(e[0]).replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g,"").replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g,(function(e){return e.replace(/,/g,"\u200c")})).split(/\s*(?![^(]*\)),\s*/).map((function(e){return e.replace(/\u200C/g,",")}))}function g(){var e=o(),t=f(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);if(t){var n=Nt(t[0]);if(!f(/^:\s*/))return u("property missing ':'");var r=f(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/),i=e({type:"declaration",property:n.replace(Mt,""),value:r?Nt(r[0]).replace(Mt,""):""});return f(/^[;\s]*/),i}}function y(){var e,t=[];if(!c())return u("missing '{'");for(p(t);e=g();)!1!==e&&(t.push(e),p(t)),e=g();return l()?t:u("missing '}'")}function b(){for(var e,t=[],n=o();e=f(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/);)t.push(e[1]),f(/^,\s*/);if(t.length)return n({type:"keyframe",values:t,declarations:y()})}var w=S("import"),I=S("charset"),C=S("namespace");function S(e){var t=new RegExp("^@"+e+"\\s*([^;]+);");return function(){var n=o(),r=f(t);if(r){var i={type:e};return i[e]=r[1].trim(),n(i)}}}function k(){if("@"===e[0])return function(){var e=o(),t=f(/^@([-\w]+)?keyframes\s*/);if(t){var n=t[1];if(!(t=f(/^([-\w]+)\s*/)))return u("@keyframes missing name");var r,i=t[1];if(!c())return u("@keyframes missing '{'");for(var a=p();r=b();)a.push(r),a=a.concat(p());return l()?e({type:"keyframes",name:i,vendor:n,keyframes:a}):u("@keyframes missing '}'")}}()||function(){var e=o(),t=f(/^@media *([^{]+)/);if(t){var n=Nt(t[1]);if(!c())return u("@media missing '{'");var r=p().concat(d());return l()?e({type:"media",media:n,rules:r}):u("@media missing '}'")}}()||function(){var e=o(),t=f(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);if(t)return e({type:"custom-media",name:Nt(t[1]),media:Nt(t[2])})}()||function(){var e=o(),t=f(/^@supports *([^{]+)/);if(t){var n=Nt(t[1]);if(!c())return u("@supports missing '{'");var r=p().concat(d());return l()?e({type:"supports",supports:n,rules:r}):u("@supports missing '}'")}}()||w()||I()||C()||function(){var e=o(),t=f(/^@([-\w]+)?document *([^{]+)/);if(t){var n=Nt(t[1]),r=Nt(t[2]);if(!c())return u("@document missing '{'");var i=p().concat(d());return l()?e({type:"document",document:r,vendor:n,rules:i}):u("@document missing '}'")}}()||function(){var e=o();if(f(/^@page */)){var t=m()||[];if(!c())return u("@page missing '{'");for(var n,r=p();n=g();)r.push(n),r=r.concat(p());return l()?e({type:"page",selectors:t,declarations:r}):u("@page missing '}'")}}()||function(){var e=o();if(f(/^@host\s*/)){if(!c())return u("@host missing '{'");var t=p().concat(d());return l()?e({type:"host",rules:t}):u("@host missing '}'")}}()||function(){var e=o();if(f(/^@font-face\s*/)){if(!c())return u("@font-face missing '{'");for(var t,n=p();t=g();)n.push(t),n=n.concat(p());return l()?e({type:"font-face",declarations:n}):u("@font-face missing '}'")}}()}function E(){var e=o(),t=m();return t?(p(),e({type:"rule",selectors:t,declarations:y()})):u("selector missing")}return _t(function(){var e=d();return{type:"stylesheet",stylesheet:{source:t.source,rules:e,parsingErrors:s}}}())}function Nt(e){return e?e.replace(/^\s+|\s+$/g,""):""}function _t(e,t){for(var n=e&&"string"===typeof e.type,r=n?e:t,i=0,o=Object.keys(e);i<o.length;i++){var a=e[o[i]];Array.isArray(a)?a.forEach((function(e){_t(e,r)})):a&&"object"===typeof a&&_t(a,r)}return n&&Object.defineProperty(e,"parent",{configurable:!0,writable:!0,enumerable:!1,value:t||null}),e}var Rt={script:"noscript",altglyph:"altGlyph",altglyphdef:"altGlyphDef",altglyphitem:"altGlyphItem",animatecolor:"animateColor",animatemotion:"animateMotion",animatetransform:"animateTransform",clippath:"clipPath",feblend:"feBlend",fecolormatrix:"feColorMatrix",fecomponenttransfer:"feComponentTransfer",fecomposite:"feComposite",feconvolvematrix:"feConvolveMatrix",fediffuselighting:"feDiffuseLighting",fedisplacementmap:"feDisplacementMap",fedistantlight:"feDistantLight",fedropshadow:"feDropShadow",feflood:"feFlood",fefunca:"feFuncA",fefuncb:"feFuncB",fefuncg:"feFuncG",fefuncr:"feFuncR",fegaussianblur:"feGaussianBlur",feimage:"feImage",femerge:"feMerge",femergenode:"feMergeNode",femorphology:"feMorphology",feoffset:"feOffset",fepointlight:"fePointLight",fespecularlighting:"feSpecularLighting",fespotlight:"feSpotLight",fetile:"feTile",feturbulence:"feTurbulence",foreignobject:"foreignObject",glyphref:"glyphRef",lineargradient:"linearGradient",radialgradient:"radialGradient"};var Ot,Dt=/([^\\]):hover/,Lt=new RegExp(Dt.source,"g");function Ft(e,t){var n=null===t||void 0===t?void 0:t.stylesWithHoverClass.get(e);if(n)return n;var r=Tt(e,{silent:!0});if(!r.stylesheet)return e;var i=[];if(r.stylesheet.rules.forEach((function(e){"selectors"in e&&(e.selectors||[]).forEach((function(e){Dt.test(e)&&i.push(e)}))})),0===i.length)return e;var o=new RegExp(i.filter((function(e,t){return i.indexOf(e)===t})).sort((function(e,t){return t.length-e.length})).map((function(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")})).join("|"),"g"),a=e.replace(o,(function(e){var t=e.replace(Lt,"$1.\\:hover");return"".concat(e,", ").concat(t)}));return null===t||void 0===t||t.stylesWithHoverClass.set(e,a),a}function Vt(){return{stylesWithHoverClass:new Map}}function Bt(e,t){var n=t.doc,r=t.hackCss,i=t.cache;switch(e.type){case qe.Document:return n.implementation.createDocument(null,"",null);case qe.DocumentType:return n.implementation.createDocumentType(e.name||"html",e.publicId,e.systemId);case qe.Element:var o,a=function(e){var t=Rt[e.tagName]?Rt[e.tagName]:e.tagName;return"link"===t&&e.attributes._cssText&&(t="style"),t}(e);o=e.isSVG?n.createElementNS("http://www.w3.org/2000/svg",a):n.createElement(a);var s={};for(var u in e.attributes)if(Object.prototype.hasOwnProperty.call(e.attributes,u)){var c=e.attributes[u];if("option"!==a||"selected"!==u||!1!==c)if(!0===c&&(c=""),u.startsWith("rr_"))s[u]=c;else{var l="textarea"===a&&"value"===u,d="style"===a&&"_cssText"===u;if(d&&r&&"string"===typeof c&&(c=Ft(c,i)),!l&&!d||"string"!==typeof c)try{if(e.isSVG&&"xlink:href"===u)o.setAttributeNS("http://www.w3.org/1999/xlink",u,c.toString());else if("onload"===u||"onclick"===u||"onmouse"===u.substring(0,7))o.setAttribute("_"+u,c.toString());else{if("meta"===a&&"Content-Security-Policy"===e.attributes["http-equiv"]&&"content"===u){o.setAttribute("csp-content",c.toString());continue}("link"!==a||"preload"!==e.attributes.rel&&"modulepreload"!==e.attributes.rel||"script"!==e.attributes.as)&&("link"===a&&"prefetch"===e.attributes.rel&&"string"===typeof e.attributes.href&&e.attributes.href.endsWith(".js")||("img"===a&&e.attributes.srcset&&e.attributes.rr_dataURL?o.setAttribute("rrweb-original-srcset",e.attributes.srcset):o.setAttribute(u,c.toString())))}}catch(y){}else{for(var f=n.createTextNode(c),h=0,p=Array.from(o.childNodes);h<p.length;h++){var v=p[h];v.nodeType===o.TEXT_NODE&&o.removeChild(v)}o.appendChild(f)}}}var m=function(t){var n=s[t];if("canvas"===a&&"rr_dataURL"===t){var r=document.createElement("img");r.onload=function(){var e=o.getContext("2d");e&&e.drawImage(r,0,0,r.width,r.height)},r.src=n.toString(),o.RRNodeType&&(o.rr_dataURL=n.toString())}else if("img"===a&&"rr_dataURL"===t){var i=o;i.currentSrc.startsWith("data:")||(i.setAttribute("rrweb-original-src",e.attributes.src),i.src=n.toString())}if("rr_width"===t)o.style.width=n.toString();else if("rr_height"===t)o.style.height=n.toString();else if("rr_mediaCurrentTime"===t&&"number"===typeof n)o.currentTime=n;else if("rr_mediaState"===t)switch(n){case"played":o.play().catch((function(e){return console.warn("media playback error",e)}));break;case"paused":o.pause()}};for(var g in s)m(g);if(e.isShadowHost)if(o.shadowRoot)for(;o.shadowRoot.firstChild;)o.shadowRoot.removeChild(o.shadowRoot.firstChild);else o.attachShadow({mode:"open"});return o;case qe.Text:return n.createTextNode(e.isStyle&&r?Ft(e.textContent,i):e.textContent);case qe.CDATA:return n.createCDATASection(e.textContent);case qe.Comment:return n.createComment(e.textContent);default:return null}}function jt(e,t){var n=t.doc,r=t.mirror,i=t.skipChild,o=void 0!==i&&i,a=t.hackCss,s=void 0===a||a,u=t.afterAppend,c=t.cache;if(r.has(e.id)){var l=r.getNode(e.id);if(function(e,t){return!(!e||!t||e.type!==t.type)&&(e.type===qe.Document?e.compatMode===t.compatMode:e.type===qe.DocumentType?e.name===t.name&&e.publicId===t.publicId&&e.systemId===t.systemId:e.type===qe.Comment||e.type===qe.Text||e.type===qe.CDATA?e.textContent===t.textContent:e.type===qe.Element&&e.tagName===t.tagName&&JSON.stringify(e.attributes)===JSON.stringify(t.attributes)&&e.isSVG===t.isSVG&&e.needBlock===t.needBlock)}(r.getMeta(l),e))return r.getNode(e.id)}var d=Bt(e,{doc:n,hackCss:s,cache:c});if(!d)return null;if(e.rootId&&r.getNode(e.rootId)!==n&&r.replace(e.rootId,n),e.type===qe.Document&&(n.close(),n.open(),"BackCompat"===e.compatMode&&e.childNodes&&e.childNodes[0].type!==qe.DocumentType&&(e.childNodes[0].type===qe.Element&&"xmlns"in e.childNodes[0].attributes&&"http://www.w3.org/1999/xhtml"===e.childNodes[0].attributes.xmlns?n.write('<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "">'):n.write('<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "">')),d=n),r.add(d,e),(e.type===qe.Document||e.type===qe.Element)&&!o)for(var f=0,h=e.childNodes;f<h.length;f++){var p=h[f],v=jt(p,{doc:n,mirror:r,skipChild:!1,hackCss:s,afterAppend:u,cache:c});v?(p.isShadow&&Je(d)&&d.shadowRoot?d.shadowRoot.appendChild(v):d.appendChild(v),u&&u(v,p.id)):console.warn("Failed to rebuild",p)}return d}function Pt(e,t){var n=t.doc,r=t.onVisit,i=t.hackCss,o=void 0===i||i,a=t.afterAppend,s=t.cache,u=t.mirror,c=void 0===u?new rt:u,l=jt(e,{doc:n,mirror:c,skipChild:!1,hackCss:o,afterAppend:a,cache:s});return function(e,t){for(var n=0,r=e.getIds();n<r.length;n++){var i=r[n];e.has(i)&&t(e.getNode(i))}}(c,(function(e){r&&r(e),function(e,t){var n=t.getMeta(e);if((null===n||void 0===n?void 0:n.type)===qe.Element){var r=e;for(var i in n.attributes)if(Object.prototype.hasOwnProperty.call(n.attributes,i)&&i.startsWith("rr_")){var o=n.attributes[i];"rr_scrollLeft"===i&&(r.scrollLeft=o),"rr_scrollTop"===i&&(r.scrollTop=o)}}}(e,c)})),l}!function(e){e[e.Document=0]="Document",e[e.DocumentType=1]="DocumentType",e[e.Element=2]="Element",e[e.Text=3]="Text",e[e.CDATA=4]="CDATA",e[e.Comment=5]="Comment"}(Ot||(Ot={}));var Wt=function(){function e(){this.idNodeMap=new Map,this.nodeMetaMap=new WeakMap}return e.prototype.getId=function(e){var t;if(!e)return-1;var n=null===(t=this.getMeta(e))||void 0===t?void 0:t.id;return null!==n&&void 0!==n?n:-1},e.prototype.getNode=function(e){return this.idNodeMap.get(e)||null},e.prototype.getIds=function(){return Array.from(this.idNodeMap.keys())},e.prototype.getMeta=function(e){return this.nodeMetaMap.get(e)||null},e.prototype.removeNodeFromMap=function(e){var t=this,n=this.getId(e);this.idNodeMap.delete(n),e.childNodes&&e.childNodes.forEach((function(e){return t.removeNodeFromMap(e)}))},e.prototype.has=function(e){return this.idNodeMap.has(e)},e.prototype.hasNode=function(e){return this.nodeMetaMap.has(e)},e.prototype.add=function(e,t){var n=t.id;this.idNodeMap.set(n,e),this.nodeMetaMap.set(e,t)},e.prototype.replace=function(e,t){var n=this.getNode(e);if(n){var r=this.nodeMetaMap.get(n);r&&this.nodeMetaMap.set(t,r)}this.idNodeMap.set(e,t)},e.prototype.reset=function(){this.idNodeMap=new Map,this.nodeMetaMap=new WeakMap},e}();function Ut(e){var t=[];for(var n in e){var r=e[n];if("string"===typeof r){var i=Zt(n);t.push("".concat(i,": ").concat(r,";"))}}return t.join(" ")}var Gt=/-([a-z])/g,Ht=/^--[a-zA-Z0-9-]+$/,zt=function(e){return Ht.test(e)?e:e.replace(Gt,(function(e,t){return t?t.toUpperCase():""}))},qt=/\B([A-Z])/g,Zt=function(e){return e.replace(qt,"-$1").toLowerCase()},Qt=function(){function e(){d(this,e),this.parentElement=null,this.parentNode=null,this.firstChild=null,this.lastChild=null,this.previousSibling=null,this.nextSibling=null,this.ELEMENT_NODE=en.ELEMENT_NODE,this.TEXT_NODE=en.TEXT_NODE}return p(e,[{key:"childNodes",get:function(){for(var e=[],t=this.firstChild;t;)e.push(t),t=t.nextSibling;return e}},{key:"contains",value:function(t){if(!(t instanceof e))return!1;if(t.ownerDocument!==this.ownerDocument)return!1;if(t===this)return!0;for(;t.parentNode;){if(t.parentNode===this)return!0;t=t.parentNode}return!1}},{key:"appendChild",value:function(e){throw new Error("RRDomException: Failed to execute 'appendChild' on 'RRNode': This RRNode type does not support this method.")}},{key:"insertBefore",value:function(e,t){throw new Error("RRDomException: Failed to execute 'insertBefore' on 'RRNode': This RRNode type does not support this method.")}},{key:"removeChild",value:function(e){throw new Error("RRDomException: Failed to execute 'removeChild' on 'RRNode': This RRNode type does not support this method.")}},{key:"toString",value:function(){return"RRNode"}}]),e}();function Yt(e){return function(e){ye(n,e);var t=Ie(n);function n(e,r,i){var o;return d(this,n),(o=t.call(this)).nodeType=en.DOCUMENT_TYPE_NODE,o.RRNodeType=Ot.DocumentType,o.name=e,o.publicId=r,o.systemId=i,o.nodeName=e,o.textContent=null,o}return p(n,[{key:"toString",value:function(){return"RRDocumentType"}}]),n}(e)}function Kt(e){return function(e){ye(n,e);var t=Ie(n);function n(e){var r;return d(this,n),(r=t.call(this)).nodeType=en.ELEMENT_NODE,r.RRNodeType=Ot.Element,r.attributes={},r.shadowRoot=null,r.tagName=e.toUpperCase(),r.nodeName=e.toUpperCase(),r}return p(n,[{key:"textContent",get:function(){var e="";return this.childNodes.forEach((function(t){return e+=t.textContent})),e},set:function(e){this.firstChild=null,this.lastChild=null,this.appendChild(this.ownerDocument.createTextNode(e))}},{key:"classList",get:function(){var e=this;return new tn(this.attributes.class,(function(t){e.attributes.class=t}))}},{key:"id",get:function(){return this.attributes.id||""}},{key:"className",get:function(){return this.attributes.class||""}},{key:"style",get:function(){var e=this,t=this.attributes.style?function(e){var t={},n=/:(.+)/;return e.replace(/\/\*.*?\*\//g,"").split(/;(?![^(]*\))/g).forEach((function(e){if(e){var r=e.split(n);r.length>1&&(t[zt(r[0].trim())]=r[1].trim())}})),t}(this.attributes.style):{},n=/\B([A-Z])/g;return t.setProperty=function(r,i,o){if(!n.test(r)){var a=zt(r);i?t[a]=i:delete t[a],"important"===o&&(t[a]+=" !important"),e.attributes.style=Ut(t)}},t.removeProperty=function(r){if(n.test(r))return"";var i=zt(r),o=t[i]||"";return delete t[i],e.attributes.style=Ut(t),o},t}},{key:"getAttribute",value:function(e){return this.attributes[e]||null}},{key:"setAttribute",value:function(e,t){this.attributes[e]=t}},{key:"setAttributeNS",value:function(e,t,n){this.setAttribute(t,n)}},{key:"removeAttribute",value:function(e){delete this.attributes[e]}},{key:"appendChild",value:function(e){return nn(this,e)}},{key:"insertBefore",value:function(e,t){return rn(this,e,t)}},{key:"removeChild",value:function(e){return on(this,e)}},{key:"attachShadow",value:function(e){var t=this.ownerDocument.createElement("SHADOWROOT");return this.shadowRoot=t,t}},{key:"dispatchEvent",value:function(e){return!0}},{key:"toString",value:function(){var e="";for(var t in this.attributes)e+="".concat(t,'="').concat(this.attributes[t],'" ');return"".concat(this.tagName," ").concat(e)}}]),n}(e)}function Xt(e){return function(e){ye(n,e);var t=Ie(n);function n(e){var r;return d(this,n),(r=t.call(this)).nodeType=en.TEXT_NODE,r.nodeName="#text",r.RRNodeType=Ot.Text,r.data=e,r}return p(n,[{key:"textContent",get:function(){return this.data},set:function(e){this.data=e}},{key:"toString",value:function(){return"RRText text=".concat(JSON.stringify(this.data))}}]),n}(e)}function Jt(e){return function(e){ye(n,e);var t=Ie(n);function n(e){var r;return d(this,n),(r=t.call(this)).nodeType=en.COMMENT_NODE,r.nodeName="#comment",r.RRNodeType=Ot.Comment,r.data=e,r}return p(n,[{key:"textContent",get:function(){return this.data},set:function(e){this.data=e}},{key:"toString",value:function(){return"RRComment text=".concat(JSON.stringify(this.data))}}]),n}(e)}function $t(e){return function(e){ye(n,e);var t=Ie(n);function n(e){var r;return d(this,n),(r=t.call(this)).nodeName="#cdata-section",r.nodeType=en.CDATA_SECTION_NODE,r.RRNodeType=Ot.CDATA,r.data=e,r}return p(n,[{key:"textContent",get:function(){return this.data},set:function(e){this.data=e}},{key:"toString",value:function(){return"RRCDATASection data=".concat(JSON.stringify(this.data))}}]),n}(e)}var en,tn=p((function e(t,n){var r=this;if(d(this,e),this.classes=[],this.add=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];for(var i=0,o=t;i<o.length;i++){var a=o[i],s=String(a);r.classes.indexOf(s)>=0||r.classes.push(s)}r.onChange&&r.onChange(r.classes.join(" "))},this.remove=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];r.classes=r.classes.filter((function(e){return-1===t.indexOf(e)})),r.onChange&&r.onChange(r.classes.join(" "))},t){var i,o=t.trim().split(/\s+/);(i=this.classes).push.apply(i,T(o))}this.onChange=n}));function nn(e,t){return e.lastChild?(e.lastChild.nextSibling=t,t.previousSibling=e.lastChild):(e.firstChild=t,t.previousSibling=null),e.lastChild=t,t.nextSibling=null,t.parentNode=e,t.parentElement=e,t.ownerDocument=e.ownerDocument,t}function rn(e,t,n){if(!n)return nn(e,t);if(n.parentNode!==e)throw new Error("Failed to execute 'insertBefore' on 'RRNode': The RRNode before which the new node is to be inserted is not a child of this RRNode.");return t.previousSibling=n.previousSibling,n.previousSibling=t,t.nextSibling=n,t.previousSibling?t.previousSibling.nextSibling=t:e.firstChild=t,t.parentElement=e,t.parentNode=e,t.ownerDocument=e.ownerDocument,t}function on(e,t){if(t.parentNode!==e)throw new Error("Failed to execute 'removeChild' on 'RRNode': The RRNode to be removed is not a child of this RRNode.");return t.previousSibling?t.previousSibling.nextSibling=t.nextSibling:e.firstChild=t.nextSibling,t.nextSibling?t.nextSibling.previousSibling=t.previousSibling:e.lastChild=t.previousSibling,t.previousSibling=null,t.nextSibling=null,t.parentElement=null,t.parentNode=null,t}!function(e){e[e.PLACEHOLDER=0]="PLACEHOLDER",e[e.ELEMENT_NODE=1]="ELEMENT_NODE",e[e.ATTRIBUTE_NODE=2]="ATTRIBUTE_NODE",e[e.TEXT_NODE=3]="TEXT_NODE",e[e.CDATA_SECTION_NODE=4]="CDATA_SECTION_NODE",e[e.ENTITY_REFERENCE_NODE=5]="ENTITY_REFERENCE_NODE",e[e.ENTITY_NODE=6]="ENTITY_NODE",e[e.PROCESSING_INSTRUCTION_NODE=7]="PROCESSING_INSTRUCTION_NODE",e[e.COMMENT_NODE=8]="COMMENT_NODE",e[e.DOCUMENT_NODE=9]="DOCUMENT_NODE",e[e.DOCUMENT_TYPE_NODE=10]="DOCUMENT_TYPE_NODE",e[e.DOCUMENT_FRAGMENT_NODE=11]="DOCUMENT_FRAGMENT_NODE"}(en||(en={}));var an={svg:"http://www.w3.org/2000/svg","xlink:href":"http://www.w3.org/1999/xlink",xmlns:"http://www.w3.org/2000/xmlns/"},sn={altglyph:"altGlyph",altglyphdef:"altGlyphDef",altglyphitem:"altGlyphItem",animatecolor:"animateColor",animatemotion:"animateMotion",animatetransform:"animateTransform",clippath:"clipPath",feblend:"feBlend",fecolormatrix:"feColorMatrix",fecomponenttransfer:"feComponentTransfer",fecomposite:"feComposite",feconvolvematrix:"feConvolveMatrix",fediffuselighting:"feDiffuseLighting",fedisplacementmap:"feDisplacementMap",fedistantlight:"feDistantLight",fedropshadow:"feDropShadow",feflood:"feFlood",fefunca:"feFuncA",fefuncb:"feFuncB",fefuncg:"feFuncG",fefuncr:"feFuncR",fegaussianblur:"feGaussianBlur",feimage:"feImage",femerge:"feMerge",femergenode:"feMergeNode",femorphology:"feMorphology",feoffset:"feOffset",fepointlight:"fePointLight",fespecularlighting:"feSpecularLighting",fespotlight:"feSpotLight",fetile:"feTile",feturbulence:"feTurbulence",foreignobject:"foreignObject",glyphref:"glyphRef",lineargradient:"linearGradient",radialgradient:"radialGradient"},un=null;function cn(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t.mirror||t.ownerDocument.mirror;e=function(e,t,n,r){var i;n.afterAppend&&!un&&(un=new WeakSet,setTimeout((function(){un=null}),0));if(!fn(e,t)){var o=dn(t,n.mirror,r);null===(i=e.parentNode)||void 0===i||i.replaceChild(o,e),e=o}switch(t.RRNodeType){case Ot.Document:if(!hn(e,t,n.mirror,r)){var a=r.getMeta(t);a&&(n.mirror.removeNodeFromMap(e),e.close(),e.open(),n.mirror.add(e,a),null===un||void 0===un||un.add(e))}break;case Ot.Element:var s=e,u=t;switch(u.tagName){case"IFRAME":var c=e.contentDocument;if(!c)break;cn(c,t.contentDocument,n,r)}if(u.shadowRoot){s.shadowRoot||s.attachShadow({mode:"open"});var l=s.shadowRoot.childNodes,d=u.shadowRoot.childNodes;(l.length>0||d.length>0)&&ln(Array.from(l),d,s.shadowRoot,n,r)}}return e}(e,t,n,r);var i=e.childNodes,o=t.childNodes;(i.length>0||o.length>0)&&ln(Array.from(i),o,e,n,r),function(e,t,n,r){var i;switch(t.RRNodeType){case Ot.Document:var o=t.scrollData;o&&n.applyScroll(o,!0);break;case Ot.Element:var a=e,s=t;switch(function(e,t,n){var r=e.attributes,i=t.attributes,o=function(){var r=i[a],o=n.getMeta(t);if((null===o||void 0===o?void 0:o.isSVG)&&an[a])e.setAttributeNS(an[a],a,r);else if("CANVAS"===t.tagName&&"rr_dataURL"===a){var s=document.createElement("img");s.src=r,s.onload=function(){var t=e.getContext("2d");t&&t.drawImage(s,0,0,s.width,s.height)}}else e.setAttribute(a,r)};for(var a in i)o();for(var s=0,u=Array.from(r);s<u.length;s++){var c=u[s].name;c in i||e.removeAttribute(c)}t.scrollLeft&&(e.scrollLeft=t.scrollLeft),t.scrollTop&&(e.scrollTop=t.scrollTop)}(a,s,r),s.scrollData&&n.applyScroll(s.scrollData,!0),s.inputData&&n.applyInput(s.inputData),s.tagName){case"AUDIO":case"VIDEO":var u=e,c=s;void 0!==c.paused&&(c.paused?u.pause():u.play()),void 0!==c.muted&&(u.muted=c.muted),void 0!==c.volume&&(u.volume=c.volume),void 0!==c.currentTime&&(u.currentTime=c.currentTime),void 0!==c.playbackRate&&(u.playbackRate=c.playbackRate);break;case"CANVAS":var l=t;if(null!==l.rr_dataURL){var d=document.createElement("img");d.onload=function(){var e=a.getContext("2d");e&&e.drawImage(d,0,0,d.width,d.height)},d.src=l.rr_dataURL}l.canvasMutations.forEach((function(t){return n.applyCanvas(t.event,t.mutation,e)}));break;case"STYLE":var f=a.sheet;f&&t.rules.forEach((function(e){return n.applyStyleSheetMutation(e,f)}))}break;case Ot.Text:case Ot.Comment:case Ot.CDATA:e.textContent!==t.data&&(e.textContent=t.data)}(null===un||void 0===un?void 0:un.has(e))&&(un.delete(e),null===(i=n.afterAppend)||void 0===i||i.call(n,e,n.mirror.getId(e)))}(e,t,n,r)}function ln(e,t,n,r,i){for(var o=0,a=e.length-1,s=0,u=t.length-1,c=e[o],l=e[a],d=t[s],f=t[u],h=void 0,p=void 0;o<=a&&s<=u;)if(void 0===c)c=e[++o];else if(void 0===l)l=e[--a];else if(hn(c,d,r.mirror,i))cn(c,d,r,i),c=e[++o],d=t[++s];else if(hn(l,f,r.mirror,i))cn(l,f,r,i),l=e[--a],f=t[--u];else if(hn(c,f,r.mirror,i)){try{n.insertBefore(c,l.nextSibling)}catch(Dn){console.warn(Dn)}cn(c,f,r,i),c=e[++o],f=t[--u]}else if(hn(l,d,r.mirror,i)){try{n.insertBefore(l,c)}catch(Dn){console.warn(Dn)}cn(l,d,r,i),l=e[--a],d=t[++s]}else{if(!h){h={};for(var v=o;v<=a;v++){var m=e[v];m&&r.mirror.hasNode(m)&&(h[r.mirror.getId(m)]=v)}}var g=e[p=h[i.getId(d)]];if(void 0!==p&&g&&hn(g,d,r.mirror,i)){try{n.insertBefore(g,c)}catch(Dn){console.warn(Dn)}cn(g,d,r,i),e[p]=void 0}else{var y=dn(d,r.mirror,i);"#document"===n.nodeName&&c&&(y.nodeType===y.DOCUMENT_TYPE_NODE&&c.nodeType===c.DOCUMENT_TYPE_NODE||y.nodeType===y.ELEMENT_NODE&&c.nodeType===c.ELEMENT_NODE)&&(n.removeChild(c),r.mirror.removeNodeFromMap(c),c=e[++o]);try{n.insertBefore(y,c||null),cn(y,d,r,i)}catch(Dn){console.warn(Dn)}}d=t[++s]}if(o>a){var b=t[u+1],w=null;for(b&&(w=r.mirror.getNode(i.getId(b)));s<=u;++s){var I=dn(t[s],r.mirror,i);try{n.insertBefore(I,w),cn(I,t[s],r,i)}catch(Dn){console.warn(Dn)}}}else if(s>u)for(;o<=a;o++){var C=e[o];if(C&&n.contains(C))try{n.removeChild(C),r.mirror.removeNodeFromMap(C)}catch(Dn){console.warn(Dn)}}}function dn(e,t,n){var r=n.getId(e),i=n.getMeta(e),o=null;if(r>-1&&(o=t.getNode(r)),null!==o&&fn(o,e))return o;switch(e.RRNodeType){case Ot.Document:o=new Document;break;case Ot.DocumentType:o=document.implementation.createDocumentType(e.name,e.publicId,e.systemId);break;case Ot.Element:var a=e.tagName.toLowerCase();a=sn[a]||a,o=i&&"isSVG"in i&&(null===i||void 0===i?void 0:i.isSVG)?document.createElementNS(an.svg,a):document.createElement(e.tagName);break;case Ot.Text:o=document.createTextNode(e.data);break;case Ot.Comment:o=document.createComment(e.data);break;case Ot.CDATA:o=document.createCDATASection(e.data)}i&&t.add(o,Object.assign({},i));try{null===un||void 0===un||un.add(o)}catch(Dn){}return o}function fn(e,t){return e.nodeType===t.nodeType&&(e.nodeType!==e.ELEMENT_NODE||e.tagName.toUpperCase()===t.tagName)}function hn(e,t,n,r){var i=n.getId(e),o=r.getId(t);return-1!==i&&i===o&&fn(e,t)}var pn=function(e){ye(n,e);var t=Ie(n);function n(e){var r;return d(this,n),(r=t.call(this)).UNSERIALIZED_STARTING_ID=-2,r._unserializedId=r.UNSERIALIZED_STARTING_ID,r.mirror=new xn,r.scrollData=null,e&&(r.mirror=e),r}return p(n,[{key:"unserializedId",get:function(){return this._unserializedId--}},{key:"createDocument",value:function(e,t,r){return new n}},{key:"createDocumentType",value:function(e,t,n){var r=new vn(e,t,n);return r.ownerDocument=this,r}},{key:"createElement",value:function(e){var t,n=e.toUpperCase();switch(n){case"AUDIO":case"VIDEO":t=new gn(n);break;case"IFRAME":t=new wn(n,this.mirror);break;case"CANVAS":t=new yn(n);break;case"STYLE":t=new bn(n);break;default:t=new mn(n)}return t.ownerDocument=this,t}},{key:"createComment",value:function(e){var t=new Cn(e);return t.ownerDocument=this,t}},{key:"createCDATASection",value:function(e){var t=new Sn(e);return t.ownerDocument=this,t}},{key:"createTextNode",value:function(e){var t=new In(e);return t.ownerDocument=this,t}},{key:"destroyTree",value:function(){this.firstChild=null,this.lastChild=null,this.mirror.reset()}},{key:"open",value:function(){me(ve(n.prototype),"open",this).call(this),this._unserializedId=this.UNSERIALIZED_STARTING_ID}}]),n}(function(e){ye(n,e);var t=Ie(n);function n(){var e;d(this,n);for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return(e=t.call(this,i)).nodeType=en.DOCUMENT_NODE,e.nodeName="#document",e.compatMode="CSS1Compat",e.RRNodeType=Ot.Document,e.textContent=null,e.ownerDocument=we(e),e}return p(n,[{key:"documentElement",get:function(){return this.childNodes.find((function(e){return e.RRNodeType===Ot.Element&&"HTML"===e.tagName}))||null}},{key:"body",get:function(){var e;return(null===(e=this.documentElement)||void 0===e?void 0:e.childNodes.find((function(e){return e.RRNodeType===Ot.Element&&"BODY"===e.tagName})))||null}},{key:"head",get:function(){var e;return(null===(e=this.documentElement)||void 0===e?void 0:e.childNodes.find((function(e){return e.RRNodeType===Ot.Element&&"HEAD"===e.tagName})))||null}},{key:"implementation",get:function(){return this}},{key:"firstElementChild",get:function(){return this.documentElement}},{key:"appendChild",value:function(e){var t=e.RRNodeType;if((t===Ot.Element||t===Ot.DocumentType)&&this.childNodes.some((function(e){return e.RRNodeType===t})))throw new Error("RRDomException: Failed to execute 'appendChild' on 'RRNode': Only one ".concat(t===Ot.Element?"RRElement":"RRDoctype"," on RRDocument allowed."));var n=nn(this,e);return n.parentElement=null,n}},{key:"insertBefore",value:function(e,t){var n=e.RRNodeType;if((n===Ot.Element||n===Ot.DocumentType)&&this.childNodes.some((function(e){return e.RRNodeType===n})))throw new Error("RRDomException: Failed to execute 'insertBefore' on 'RRNode': Only one ".concat(n===Ot.Element?"RRElement":"RRDoctype"," on RRDocument allowed."));var r=rn(this,e,t);return r.parentElement=null,r}},{key:"removeChild",value:function(e){return on(this,e)}},{key:"open",value:function(){this.firstChild=null,this.lastChild=null}},{key:"close",value:function(){}},{key:"write",value:function(e){var t;if('<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "">'===e?t="-//W3C//DTD XHTML 1.0 Transitional//EN":'<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "">'===e&&(t="-//W3C//DTD HTML 4.0 Transitional//EN"),t){var n=this.createDocumentType("html",t,"");this.open(),this.appendChild(n)}}},{key:"createDocument",value:function(e,t,r){return new n}},{key:"createDocumentType",value:function(e,t,n){var r=new(Yt(Qt))(e,t,n);return r.ownerDocument=this,r}},{key:"createElement",value:function(e){var t=new(Kt(Qt))(e);return t.ownerDocument=this,t}},{key:"createElementNS",value:function(e,t){return this.createElement(t)}},{key:"createTextNode",value:function(e){var t=new(Xt(Qt))(e);return t.ownerDocument=this,t}},{key:"createComment",value:function(e){var t=new(Jt(Qt))(e);return t.ownerDocument=this,t}},{key:"createCDATASection",value:function(e){var t=new($t(Qt))(e);return t.ownerDocument=this,t}},{key:"toString",value:function(){return"RRDocument"}}]),n}(Qt)),vn=Yt(Qt),mn=function(e){ye(n,e);var t=Ie(n);function n(){var e;return d(this,n),(e=t.apply(this,arguments)).inputData=null,e.scrollData=null,e}return p(n)}(Kt(Qt)),gn=function(e){ye(n,e);var t=Ie(n);function n(){return d(this,n),t.apply(this,arguments)}return p(n)}(function(e){ye(n,e);var t=Ie(n);function n(){return d(this,n),t.apply(this,arguments)}return p(n,[{key:"attachShadow",value:function(e){throw new Error("RRDomException: Failed to execute 'attachShadow' on 'RRElement': This RRElement does not support attachShadow")}},{key:"play",value:function(){this.paused=!1}},{key:"pause",value:function(){this.paused=!0}}]),n}(mn)),yn=function(e){ye(n,e);var t=Ie(n);function n(){var e;return d(this,n),(e=t.apply(this,arguments)).rr_dataURL=null,e.canvasMutations=[],e}return p(n,[{key:"getContext",value:function(){return null}}]),n}(mn),bn=function(e){ye(n,e);var t=Ie(n);function n(){var e;return d(this,n),(e=t.apply(this,arguments)).rules=[],e}return p(n)}(mn),wn=function(e){ye(n,e);var t=Ie(n);function n(e,r){var i;return d(this,n),(i=t.call(this,e)).contentDocument=new pn,i.contentDocument.mirror=r,i}return p(n)}(mn),In=Xt(Qt),Cn=Jt(Qt),Sn=$t(Qt);function kn(e,t,n,r){var i,o;switch(e.nodeType){case en.DOCUMENT_NODE:r&&"IFRAME"===r.nodeName?i=r.contentDocument:(i=t).compatMode=e.compatMode;break;case en.DOCUMENT_TYPE_NODE:var a=e;i=t.createDocumentType(a.name,a.publicId,a.systemId);break;case en.ELEMENT_NODE:for(var s=e,u=(o=s)instanceof HTMLFormElement?"FORM":o.tagName.toUpperCase(),c=i=t.createElement(u),l=0,d=Array.from(s.attributes);l<d.length;l++){var f=d[l],h=f.name,p=f.value;c.attributes[h]=p}s.scrollLeft&&(c.scrollLeft=s.scrollLeft),s.scrollTop&&(c.scrollTop=s.scrollTop);break;case en.TEXT_NODE:i=t.createTextNode(e.textContent||"");break;case en.CDATA_SECTION_NODE:i=t.createCDATASection(e.data);break;case en.COMMENT_NODE:i=t.createComment(e.textContent||"");break;case en.DOCUMENT_FRAGMENT_NODE:i=r.attachShadow({mode:"open"});break;default:return null}var v=n.getMeta(e);return t instanceof pn&&(v||(v=An(i,t.unserializedId),n.add(e,v)),t.mirror.add(i,Object.assign({},v))),i}function En(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new Wt,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new pn;return function e(r,i){var o=kn(r,n,t,i);if(null!==o)if("IFRAME"!==(null===i||void 0===i?void 0:i.nodeName)&&r.nodeType!==en.DOCUMENT_FRAGMENT_NODE&&(null===i||void 0===i||i.appendChild(o),o.parentNode=i,o.parentElement=i),"IFRAME"===r.nodeName){var a=r.contentDocument;a&&e(a,o)}else r.nodeType!==en.DOCUMENT_NODE&&r.nodeType!==en.ELEMENT_NODE&&r.nodeType!==en.DOCUMENT_FRAGMENT_NODE||(r.nodeType===en.ELEMENT_NODE&&r.shadowRoot&&e(r.shadowRoot,o),r.childNodes.forEach((function(t){return e(t,o)})))}(e,null),n}var xn=function(){function e(){d(this,e),this.idNodeMap=new Map,this.nodeMetaMap=new WeakMap}return p(e,[{key:"getId",value:function(e){var t;if(!e)return-1;var n=null===(t=this.getMeta(e))||void 0===t?void 0:t.id;return null!==n&&void 0!==n?n:-1}},{key:"getNode",value:function(e){return this.idNodeMap.get(e)||null}},{key:"getIds",value:function(){return Array.from(this.idNodeMap.keys())}},{key:"getMeta",value:function(e){return this.nodeMetaMap.get(e)||null}},{key:"removeNodeFromMap",value:function(e){var t=this,n=this.getId(e);this.idNodeMap.delete(n),e.childNodes&&e.childNodes.forEach((function(e){return t.removeNodeFromMap(e)}))}},{key:"has",value:function(e){return this.idNodeMap.has(e)}},{key:"hasNode",value:function(e){return this.nodeMetaMap.has(e)}},{key:"add",value:function(e,t){var n=t.id;this.idNodeMap.set(n,e),this.nodeMetaMap.set(e,t)}},{key:"replace",value:function(e,t){var n=this.getNode(e);if(n){var r=this.nodeMetaMap.get(n);r&&this.nodeMetaMap.set(t,r)}this.idNodeMap.set(e,t)}},{key:"reset",value:function(){this.idNodeMap=new Map,this.nodeMetaMap=new WeakMap}}]),e}();function An(e,t){switch(e.RRNodeType){case Ot.Document:return{id:t,type:e.RRNodeType,childNodes:[]};case Ot.DocumentType:var n=e;return{id:t,type:e.RRNodeType,name:n.name,publicId:n.publicId,systemId:n.systemId};case Ot.Element:return{id:t,type:e.RRNodeType,tagName:e.tagName.toLowerCase(),attributes:{},childNodes:[]};case Ot.Text:case Ot.Comment:return{id:t,type:e.RRNodeType,textContent:e.textContent||""};case Ot.CDATA:return{id:t,type:e.RRNodeType,textContent:""}}}function Mn(e){return{all:e=e||new Map,on:function(t,n){var r=e.get(t);r?r.push(n):e.set(t,[n])},off:function(t,n){var r=e.get(t);r&&(n?r.splice(r.indexOf(n)>>>0,1):e.set(t,[]))},emit:function(t,n){var r=e.get(t);r&&r.slice().map((function(e){e(n)})),(r=e.get("*"))&&r.slice().map((function(e){e(t,n)}))}}}function Tn(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document;if(!("scrollBehavior"in t.documentElement.style)||!0===e.__forceSmoothScrollPolyfill__){var n,r=e.HTMLElement||e.Element,i=468,o={scroll:e.scroll||e.scrollTo,scrollBy:e.scrollBy,elementScroll:r.prototype.scroll||u,scrollIntoView:r.prototype.scrollIntoView},a=e.performance&&e.performance.now?e.performance.now.bind(e.performance):Date.now,s=(n=e.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(n)?1:0);e.scroll=e.scrollTo=function(){void 0!==arguments[0]&&(!0!==c(arguments[0])?p.call(e,t.body,void 0!==arguments[0].left?~~arguments[0].left:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:e.scrollY||e.pageYOffset):o.scroll.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!==typeof arguments[0]?arguments[0]:e.scrollX||e.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:e.scrollY||e.pageYOffset))},e.scrollBy=function(){void 0!==arguments[0]&&(c(arguments[0])?o.scrollBy.call(e,void 0!==arguments[0].left?arguments[0].left:"object"!==typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):p.call(e,t.body,~~arguments[0].left+(e.scrollX||e.pageXOffset),~~arguments[0].top+(e.scrollY||e.pageYOffset)))},r.prototype.scroll=r.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==c(arguments[0])){var e=arguments[0].left,t=arguments[0].top;p.call(this,this,"undefined"===typeof e?this.scrollLeft:~~e,"undefined"===typeof t?this.scrollTop:~~t)}else{if("number"===typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");o.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!==typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},r.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==c(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):o.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},r.prototype.scrollIntoView=function(){if(!0!==c(arguments[0])){var n=function(e){for(;e!==t.body&&!1===f(e);)e=e.parentNode||e.host;return e}(this),r=n.getBoundingClientRect(),i=this.getBoundingClientRect();n!==t.body?(p.call(this,n,n.scrollLeft+i.left-r.left,n.scrollTop+i.top-r.top),"fixed"!==e.getComputedStyle(n).position&&e.scrollBy({left:r.left,top:r.top,behavior:"smooth"})):e.scrollBy({left:i.left,top:i.top,behavior:"smooth"})}else o.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function u(e,t){this.scrollLeft=e,this.scrollTop=t}function c(e){if(null===e||"object"!==typeof e||void 0===e.behavior||"auto"===e.behavior||"instant"===e.behavior)return!0;if("object"===typeof e&&"smooth"===e.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+e.behavior+" is not a valid value for enumeration ScrollBehavior.")}function l(e,t){return"Y"===t?e.clientHeight+s<e.scrollHeight:"X"===t?e.clientWidth+s<e.scrollWidth:void 0}function d(t,n){var r=e.getComputedStyle(t,null)["overflow"+n];return"auto"===r||"scroll"===r}function f(e){var t=l(e,"Y")&&d(e,"Y"),n=l(e,"X")&&d(e,"X");return t||n}function h(t){var n,r,o,s,u=(a()-t.startTime)/i;s=u=u>1?1:u,n=.5*(1-Math.cos(Math.PI*s)),r=t.startX+(t.x-t.startX)*n,o=t.startY+(t.y-t.startY)*n,t.method.call(t.scrollable,r,o),r===t.x&&o===t.y||e.requestAnimationFrame(h.bind(e,t))}function p(n,r,i){var s,c,l,d,f=a();n===t.body?(s=e,c=e.scrollX||e.pageXOffset,l=e.scrollY||e.pageYOffset,d=o.scroll):(s=n,c=n.scrollLeft,l=n.scrollTop,d=u),h({scrollable:s,method:d,startTime:f,startX:c,startY:l,x:r,y:i})}}var Nn,_n=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1?arguments[1]:void 0;d(this,e),this.timeOffset=0,this.raf=null,this.actions=t,this.speed=n.speed}return p(e,[{key:"addAction",value:function(e){var t=!0===this.raf;if(!this.actions.length||this.actions[this.actions.length-1].delay<=e.delay)this.actions.push(e);else{var n=this.findActionIndex(e);this.actions.splice(n,0,e)}t&&(this.raf=requestAnimationFrame(this.rafCheck.bind(this)))}},{key:"start",value:function(){this.timeOffset=0,this.lastTimestamp=performance.now(),this.raf=requestAnimationFrame(this.rafCheck.bind(this))}},{key:"rafCheck",value:function(){var e=performance.now();for(this.timeOffset+=(e-this.lastTimestamp)*this.speed,this.lastTimestamp=e;this.actions.length;){var t=this.actions[0];if(!(this.timeOffset>=t.delay))break;this.actions.shift(),t.doAction()}this.actions.length>0?this.raf=requestAnimationFrame(this.rafCheck.bind(this)):this.raf=!0}},{key:"clear",value:function(){this.raf&&(!0!==this.raf&&cancelAnimationFrame(this.raf),this.raf=null),this.actions.length=0}},{key:"setSpeed",value:function(e){this.speed=e}},{key:"isActive",value:function(){return null!==this.raf}},{key:"findActionIndex",value:function(e){for(var t=0,n=this.actions.length-1;t<=n;){var r=Math.floor((t+n)/2);if(this.actions[r].delay<e.delay)t=r+1;else{if(!(this.actions[r].delay>e.delay))return r+1;n=r-1}}return t}}]),e}();function Rn(e,t){if(e.type===Pe.IncrementalSnapshot&&e.data.source===We.MouseMove&&e.data.positions&&e.data.positions.length){var n=e.data.positions[0].timeOffset,r=e.timestamp+n;return e.delay=r-t,r-t}return e.delay=e.timestamp-t,e.delay}function On(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}!function(e){e[e.NotStarted=0]="NotStarted",e[e.Running=1]="Running",e[e.Stopped=2]="Stopped"}(Nn||(Nn={}));var Dn={type:"xstate.init"};function Ln(e){return void 0===e?[]:[].concat(e)}function Fn(e){return{type:"xstate.assign",assignment:e}}function Vn(e,t){return"string"==typeof(e="string"==typeof e&&t&&t[e]?t[e]:e)?{type:e}:"function"==typeof e?{type:e.name,exec:e}:e}function Bn(e){return function(t){return e===t}}function jn(e){return"string"==typeof e?{type:e}:e}function Pn(e,t){return{value:e,context:t,actions:[],changed:!1,matches:Bn(e)}}function Wn(e,t,n){var r=t,i=!1;return[e.filter((function(e){if("xstate.assign"===e.type){i=!0;var t=Object.assign({},r);return"function"==typeof e.assignment?t=e.assignment(r,n):Object.keys(e.assignment).forEach((function(i){t[i]="function"==typeof e.assignment[i]?e.assignment[i](r,n):e.assignment[i]})),r=t,!1}return!0})),r,i]}function Un(e,t){void 0===t&&(t={});var n=On(Wn(Ln(e.states[e.initial].entry).map((function(e){return Vn(e,t.actions)})),e.context,Dn),2),r=n[0],i=n[1],o={config:e,_options:t,initialState:{value:e.initial,actions:r,context:i,matches:Bn(e.initial)},transition:function(t,n){var r,i,a="string"==typeof t?{value:t,context:e.context}:t,s=a.value,u=a.context,c=jn(n),l=e.states[s];if(l.on){var d=Ln(l.on[c.type]);try{for(var f=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(d),h=f.next();!h.done;h=f.next()){var p=h.value;if(void 0===p)return Pn(s,u);var v="string"==typeof p?{target:p}:p,m=v.target,g=v.actions,y=void 0===g?[]:g,b=v.cond,w=void 0===b?function(){return!0}:b,I=void 0===m,C=null!=m?m:s,S=e.states[C];if(w(u,c)){var k=On(Wn((I?Ln(y):[].concat(l.exit,y,S.entry).filter((function(e){return e}))).map((function(e){return Vn(e,o._options.actions)})),u,c),3),E=k[0],x=k[1],A=k[2],M=null!=m?m:s;return{value:M,context:x,actions:E,changed:m!==s||E.length>0||A,matches:Bn(M)}}}}catch(On){r={error:On}}finally{try{h&&!h.done&&(i=f.return)&&i.call(f)}finally{if(r)throw r.error}}}return Pn(s,u)}};return o}var Gn=function(e,t){return e.actions.forEach((function(n){var r=n.exec;return r&&r(e.context,t)}))};function Hn(e){var t=e.initialState,n=Nn.NotStarted,r=new Set,i={_machine:e,send:function(i){n===Nn.Running&&(t=e.transition(t,i),Gn(t,jn(i)),r.forEach((function(e){return e(t)})))},subscribe:function(e){return r.add(e),e(t),{unsubscribe:function(){return r.delete(e)}}},start:function(r){if(r){var o="object"==typeof r?r:{context:e.config.context,value:r};t={value:o.value,actions:[],context:o.context,matches:Bn(o.value)}}return n=Nn.Running,Gn(t,Dn),i},stop:function(){return n=Nn.Stopped,r.clear(),i},get state(){return t},get status(){return n}};return i}function zn(e,t){var n=t.getCastFn,r=t.applyEventsSynchronously,i=t.emitter,o=Un({id:"player",context:e,initial:"paused",states:{playing:{on:{PAUSE:{target:"paused",actions:["pause"]},CAST_EVENT:{target:"playing",actions:"castEvent"},END:{target:"paused",actions:["resetLastPlayedEvent","pause"]},ADD_EVENT:{target:"playing",actions:["addEvent"]}}},paused:{on:{PLAY:{target:"playing",actions:["recordTimeOffset","play"]},CAST_EVENT:{target:"paused",actions:"castEvent"},TO_LIVE:{target:"live",actions:["startLive"]},ADD_EVENT:{target:"paused",actions:["addEvent"]}}},live:{on:{ADD_EVENT:{target:"live",actions:["addEvent"]},CAST_EVENT:{target:"live",actions:["castEvent"]}}}}},{actions:{castEvent:Fn({lastPlayedEvent:function(e,t){return"CAST_EVENT"===t.type?t.payload.event:e.lastPlayedEvent}}),recordTimeOffset:Fn((function(e,t){var n=e.timeOffset;return"payload"in t&&"timeOffset"in t.payload&&(n=t.payload.timeOffset),Object.assign(Object.assign({},e),{timeOffset:n,baselineTime:e.events[0].timestamp+n})})),play:function(e){var t,o=e.timer,a=e.events,s=e.baselineTime,u=e.lastPlayedEvent;o.clear();var c,l=N(a);try{for(l.s();!(c=l.n()).done;){Rn(c.value,s)}}catch(g){l.e(g)}finally{l.f()}var d=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.type===Pe.Meta&&r.timestamp<=t)return e.slice(n)}return e}(a,s),f=null===u||void 0===u?void 0:u.timestamp;(null===u||void 0===u?void 0:u.type)===Pe.IncrementalSnapshot&&u.data.source===We.MouseMove&&(f=u.timestamp+(null===(t=u.data.positions[0])||void 0===t?void 0:t.timeOffset)),s<(f||0)&&i.emit(He.PlayBack);var h,p=new Array,v=N(d);try{var m=function(){var e=h.value;if(f&&f<s&&(e.timestamp<=f||e===u))return"continue";if(e.timestamp<s)p.push(e);else{var t=n(e,!1);o.addAction({doAction:function(){t()},delay:e.delay})}};for(v.s();!(h=v.n()).done;)m()}catch(g){v.e(g)}finally{v.f()}r(p),i.emit(He.Flush),o.start()},pause:function(e){e.timer.clear()},resetLastPlayedEvent:Fn((function(e){return Object.assign(Object.assign({},e),{lastPlayedEvent:null})})),startLive:Fn({baselineTime:function(e,t){return e.timer.start(),"TO_LIVE"===t.type&&t.payload.baselineTime?t.payload.baselineTime:Date.now()}}),addEvent:Fn((function(e,t){var r=e.baselineTime,i=e.timer,o=e.events;if("ADD_EVENT"===t.type){var a=t.payload.event;Rn(a,r);var s=o.length-1;if(!o[s]||o[s].timestamp<=a.timestamp)o.push(a);else{for(var u=-1,c=0;c<=s;){var l=Math.floor((c+s)/2);o[l].timestamp<=a.timestamp?c=l+1:s=l-1}-1===u&&(u=c),o.splice(u,0,a)}var d=a.timestamp<r,f=n(a,d);d?f():i.isActive()&&i.addAction({doAction:function(){f()},delay:a.delay})}return Object.assign(Object.assign({},e),{events:o})}))}});return Hn(o)}function qn(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:document,r={capture:!0,passive:!0};return n.addEventListener(e,t,r),function(){return n.removeEventListener(e,t,r)}}var Zn="Please stop import mirror directly. Instead of that,\r\nnow you can use replayer.getMirror() to access the mirror instance of a replayer,\r\nor you can use record.mirror to access the mirror instance during recording.",Qn={map:{},getId:function(){return console.error(Zn),-1},getNode:function(){return console.error(Zn),null},removeNodeFromMap:function(){console.error(Zn)},has:function(){return console.error(Zn),!1},reset:function(){console.error(Zn)}};function Yn(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=null,i=0;return function(){for(var o=arguments.length,a=new Array(o),s=0;s<o;s++)a[s]=arguments[s];var u=Date.now();i||!1!==n.leading||(i=u);var c=t-(u-i),l=this;c<=0||c>t?(r&&(clearTimeout(r),r=null),i=u,e.apply(l,a)):r||!1===n.trailing||(r=setTimeout((function(){i=!1===n.leading?0:Date.now(),r=null,e.apply(l,a)}),c))}}function Kn(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:window,o=i.Object.getOwnPropertyDescriptor(e,t);return i.Object.defineProperty(e,t,r?n:{set:function(e){var t=this;setTimeout((function(){n.set.call(t,e)}),0),o&&o.set&&o.set.call(this,e)}}),function(){return Kn(e,t,o||{},!0)}}function Xn(e,t,n){try{if(!(t in e))return function(){};var r=e[t],i=n(r);return"function"===typeof i&&(i.prototype=i.prototype||{},Object.defineProperties(i,{__rrweb_original__:{enumerable:!1,value:r}})),e[t]=i,function(){e[t]=r}}catch(o){return function(){}}}function Jn(e){var t,n,r,i,o,a,s=e.document;return{left:s.scrollingElement?s.scrollingElement.scrollLeft:void 0!==e.pageXOffset?e.pageXOffset:(null===s||void 0===s?void 0:s.documentElement.scrollLeft)||(null===(n=null===(t=null===s||void 0===s?void 0:s.body)||void 0===t?void 0:t.parentElement)||void 0===n?void 0:n.scrollLeft)||(null===(r=null===s||void 0===s?void 0:s.body)||void 0===r?void 0:r.scrollLeft)||0,top:s.scrollingElement?s.scrollingElement.scrollTop:void 0!==e.pageYOffset?e.pageYOffset:(null===s||void 0===s?void 0:s.documentElement.scrollTop)||(null===(o=null===(i=null===s||void 0===s?void 0:s.body)||void 0===i?void 0:i.parentElement)||void 0===o?void 0:o.scrollTop)||(null===(a=null===s||void 0===s?void 0:s.body)||void 0===a?void 0:a.scrollTop)||0}}function $n(){return window.innerHeight||document.documentElement&&document.documentElement.clientHeight||document.body&&document.body.clientHeight}function er(){return window.innerWidth||document.documentElement&&document.documentElement.clientWidth||document.body&&document.body.clientWidth}function tr(e,t,n,r){if(!e)return!1;var i=e.nodeType===e.ELEMENT_NODE?e:e.parentElement;if(!i)return!1;if("string"===typeof t){if(i.classList.contains(t))return!0;if(r&&null!==i.closest("."+t))return!0}else if(St(i,t,r))return!0;if(n){if(i.matches(n))return!0;if(r&&null!==i.closest(n))return!0}return!1}function nr(e,t){return t.getId(e)===dt}function rr(e,t){if($e(e))return!1;var n=t.getId(e);return!t.has(n)||(!e.parentNode||e.parentNode.nodeType!==e.DOCUMENT_NODE)&&(!e.parentNode||rr(e.parentNode,t))}function ir(e){return Boolean(e.changedTouches)}function or(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window;"NodeList"in t&&!t.NodeList.prototype.forEach&&(t.NodeList.prototype.forEach=Array.prototype.forEach),"DOMTokenList"in t&&!t.DOMTokenList.prototype.forEach&&(t.DOMTokenList.prototype.forEach=Array.prototype.forEach),Node.prototype.contains||(Node.prototype.contains=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];var i=n[0];if(!(0 in n))throw new TypeError("1 argument is required");do{if(e===i)return!0}while(i=i&&i.parentNode);return!1})}function ar(e){var t,n={},r=function(e,t){var r={value:e,parent:t,children:[]};return n[e.node.id]=r,r},i=[],o=N(e);try{for(o.s();!(t=o.n()).done;){var a=t.value,s=a.nextId,u=a.parentId;if(s&&s in n){var c=n[s];if(c.parent){var l=c.parent.children.indexOf(c);c.parent.children.splice(l,0,r(a,c.parent))}else{var d=i.indexOf(c);i.splice(d,0,r(a,null))}}else if(u in n){var f=n[u];f.children.push(r(a,f))}else i.push(r(a,null))}}catch(h){o.e(h)}finally{o.f()}return i}function sr(e,t){t(e.value);for(var n=e.children.length-1;n>=0;n--)sr(e.children[n],t)}function ur(e,t){return Boolean("IFRAME"===e.nodeName&&t.getMeta(e))}function cr(e,t){return Boolean("LINK"===e.nodeName&&e.nodeType===e.ELEMENT_NODE&&e.getAttribute&&"stylesheet"===e.getAttribute("rel")&&t.getMeta(e))}function lr(e,t){var n,r,i=null===(r=null===(n=e.ownerDocument)||void 0===n?void 0:n.defaultView)||void 0===r?void 0:r.frameElement;if(!i||i===t)return{x:0,y:0,relativeScale:1,absoluteScale:1};var o=i.getBoundingClientRect(),a=lr(i,t),s=o.height/i.clientHeight;return{x:o.x*a.relativeScale+a.x,y:o.y*a.relativeScale+a.y,relativeScale:s,absoluteScale:a.absoluteScale*s}}function dr(e){return Boolean(null===e||void 0===e?void 0:e.shadowRoot)}function fr(e,t){var n=e[t[0]];return 1===t.length?n:fr(n.cssRules[t[1]].cssRules,t.slice(2))}function hr(e){var t=T(e),n=t.pop();return{positions:t,index:n}}"undefined"!==typeof window&&window.Proxy&&window.Reflect&&(Qn=new Proxy(Qn,{get:function(e,t,n){return"map"===t&&console.error(Zn),Reflect.get(e,t,n)}}));var pr=function(){function e(){d(this,e),this.id=1,this.styleIDMap=new WeakMap,this.idStyleMap=new Map}return p(e,[{key:"getId",value:function(e){var t;return null!==(t=this.styleIDMap.get(e))&&void 0!==t?t:-1}},{key:"has",value:function(e){return this.styleIDMap.has(e)}},{key:"add",value:function(e,t){return this.has(e)?this.getId(e):(n=void 0===t?this.id++:t,this.styleIDMap.set(e,n),this.idStyleMap.set(n,e),n);var n}},{key:"getStyle",value:function(e){return this.idStyleMap.get(e)||null}},{key:"reset",value:function(){this.styleIDMap=new WeakMap,this.idStyleMap=new Map,this.id=1}},{key:"generateId",value:function(){return this.id++}}]),e}();function vr(e){var t,n,r=null;return(null===(n=null===(t=e.getRootNode)||void 0===t?void 0:t.call(e))||void 0===n?void 0:n.nodeType)===Node.DOCUMENT_FRAGMENT_NODE&&e.getRootNode().host&&(r=e.getRootNode().host),r}function mr(e){var t=e.ownerDocument;if(!t)return!1;var n=function(e){for(var t,n=e;t=vr(n);)n=t;return n}(e);return t.contains(n)}function gr(e){var t=e.ownerDocument;return!!t&&(t.contains(e)||mr(e))}function yr(e,t,n){return yr=be()?Reflect.construct.bind():function(e,t,n){var r=[null];r.push.apply(r,t);var i=new(Function.bind.apply(e,r));return n&&ge(i,n.prototype),i},yr.apply(null,arguments)}for(var br="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",wr="undefined"===typeof Uint8Array?[]:new Uint8Array(256),Ir=0;Ir<br.length;Ir++)wr[br.charCodeAt(Ir)]=Ir;var Cr=function(e){var t,n=new Uint8Array(e),r=n.length,i="";for(t=0;t<r;t+=3)i+=br[n[t]>>2],i+=br[(3&n[t])<<4|n[t+1]>>4],i+=br[(15&n[t+1])<<2|n[t+2]>>6],i+=br[63&n[t+2]];return r%3===2?i=i.substring(0,i.length-1)+"=":r%3===1&&(i=i.substring(0,i.length-2)+"=="),i},Sr=function(e){var t,n,r,i,o,a=.75*e.length,s=e.length,u=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);var c=new ArrayBuffer(a),l=new Uint8Array(c);for(t=0;t<s;t+=4)n=wr[e.charCodeAt(t)],r=wr[e.charCodeAt(t+1)],i=wr[e.charCodeAt(t+2)],o=wr[e.charCodeAt(t+3)],l[u++]=n<<2|r>>4,l[u++]=(15&r)<<4|i>>2,l[u++]=(3&i)<<6|63&o;return c},kr=new Map;function Er(e,t){var n=kr.get(e);return n||(n=new Map,kr.set(e,n)),n.has(t)||n.set(t,[]),n.get(t)}function xr(e,t,n){var i=this;return function(o){return Xe(i,void 0,void 0,r().mark((function i(){var a,s,u,c,l,d,f,h,p,v,m;return r().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:if(!o||"object"!==typeof o||!("rr_type"in o)){r.next=55;break}if(n&&(n.isUnchanged=!1),"ImageBitmap"!==o.rr_type||!("args"in o)){r.next=11;break}return r.next=5,xr(e,t,n)(o.args);case 5:return a=r.sent,r.next=8,createImageBitmap.apply(null,a);case 8:return r.abrupt("return",r.sent);case 11:if(!("index"in o)){r.next=18;break}if(!n&&null!==t){r.next=14;break}return r.abrupt("return",o);case 14:return s=o.rr_type,u=o.index,r.abrupt("return",Er(t,s)[u]);case 18:if(!("args"in o)){r.next=31;break}return c=o.rr_type,l=o.args,d=window[c],r.t0=yr,r.t1=d,r.t2=T,r.next=26,Promise.all(l.map(xr(e,t,n)));case 26:return r.t3=r.sent,r.t4=(0,r.t2)(r.t3),r.abrupt("return",(0,r.t0)(r.t1,r.t4));case 31:if(!("base64"in o)){r.next=35;break}return r.abrupt("return",Sr(o.base64));case 35:if(!("src"in o)){r.next=47;break}if(!(f=e.get(o.src))){r.next=41;break}return r.abrupt("return",f);case 41:return(h=new Image).src=o.src,e.set(o.src,h),r.abrupt("return",h);case 45:r.next=53;break;case 47:if(!("data"in o)||"Blob"!==o.rr_type){r.next=53;break}return r.next=50,Promise.all(o.data.map(xr(e,t,n)));case 50:return p=r.sent,v=new Blob(p,{type:o.type}),r.abrupt("return",v);case 53:r.next=60;break;case 55:if(!Array.isArray(o)){r.next=60;break}return r.next=58,Promise.all(o.map(xr(e,t,n)));case 58:return m=r.sent,r.abrupt("return",m);case 60:return r.abrupt("return",o);case 61:case"end":return r.stop()}}),i)})))}}function Ar(e,t){try{return t===Ge.WebGL?e.getContext("webgl")||e.getContext("experimental-webgl"):e.getContext("webgl2")}catch(Dn){return null}}var Mr=["WebGLActiveInfo","WebGLBuffer","WebGLFramebuffer","WebGLProgram","WebGLRenderbuffer","WebGLShader","WebGLShaderPrecisionFormat","WebGLTexture","WebGLUniformLocation","WebGLVertexArrayObject"];function Tr(e,t){if(null===t||void 0===t?void 0:t.constructor){var n=t.constructor.name;if(Mr.includes(n)){var r=Er(e,n);r.includes(t)||r.push(t)}}}function Nr(e){var t=e.mutation,n=e.target,i=e.type,o=e.imageMap,a=e.errorHandler;return Xe(this,void 0,void 0,r().mark((function e(){var s,u,c,l;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,s=Ar(n,i)){e.next=4;break}return e.abrupt("return");case 4:if(!t.setter){e.next=7;break}return s[t.property]=t.args[0],e.abrupt("return");case 7:return u=s[t.property],e.next=10,Promise.all(t.args.map(xr(o,s)));case 10:c=e.sent,l=u.apply(s,c),Tr(s,l),!1,e.next=20;break;case 17:e.prev=17,e.t0=e.catch(0),a(t,e.t0);case 20:case"end":return e.stop()}}),e,null,[[0,17]])})))}function _r(e){var t=e.event,n=e.mutation,i=e.target,o=e.imageMap,a=e.errorHandler;return Xe(this,void 0,void 0,r().mark((function e(){var s,u,c;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,s=i.getContext("2d"),!n.setter){e.next=5;break}return s[n.property]=n.args[0],e.abrupt("return");case 5:if(u=s[n.property],"drawImage"!==n.property||"string"!==typeof n.args[0]){e.next=11;break}o.get(t),u.apply(s,n.args),e.next=15;break;case 11:return e.next=13,Promise.all(n.args.map(xr(o,s)));case 13:c=e.sent,u.apply(s,c);case 15:e.next=20;break;case 17:e.prev=17,e.t0=e.catch(0),a(n,e.t0);case 20:case"end":return e.stop()}}),e,null,[[0,17]])})))}function Rr(e){var t=e.event,n=e.mutation,i=e.target,o=e.imageMap,a=e.canvasEventMap,s=e.errorHandler;return Xe(this,void 0,void 0,r().mark((function e(){var u,c,l,d,f,h;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,u=a.get(t)||n,c="commands"in u?u.commands:[u],![Ge.WebGL,Ge.WebGL2].includes(n.type)){e.next=13;break}l=0;case 5:if(!(l<c.length)){e.next=12;break}return d=c[l],e.next=9,Nr({mutation:d,type:n.type,target:i,imageMap:o,errorHandler:s});case 9:l++,e.next=5;break;case 12:return e.abrupt("return");case 13:f=0;case 14:if(!(f<c.length)){e.next=21;break}return h=c[f],e.next=18,_r({event:t,mutation:h,target:i,imageMap:o,errorHandler:s});case 18:f++,e.next=14;break;case 21:e.next=26;break;case 23:e.prev=23,e.t0=e.catch(0),s(n,e.t0);case 26:case"end":return e.stop()}}),e,null,[[0,23]])})))}var Or=1e4,Dr=5e3,Lr=Mn||e,Fr="[replayer]",Vr={duration:500,lineCap:"round",lineWidth:3,strokeStyle:"red"};function Br(e){return e.type==Pe.IncrementalSnapshot&&(e.data.source==We.TouchMove||e.data.source==We.MouseInteraction&&e.data.type==Ue.TouchStart)}var jr,Pr,Wr,Ur=function(){function e(t,n){var r=this;if(d(this,e),this.usingVirtualDom=!1,this.virtualDom=new pn,this.mouseTail=null,this.tailPositions=[],this.emitter=Lr(),this.legacy_missingNodeRetryMap={},this.cache=Vt(),this.imageMap=new Map,this.canvasEventMap=new Map,this.mirror=it(),this.styleMirror=new pr,this.firstFullSnapshot=null,this.newDocumentQueue=[],this.mousePos=null,this.touchActive=null,this.lastSelectionData=null,this.constructedStyleMutations=[],this.adoptedStyleSheets=[],this.handleResize=function(e){r.iframe.style.display="inherit";for(var t=0,n=[r.mouseTail,r.iframe];t<n.length;t++){var i=n[t];i&&(i.setAttribute("width",String(e.width)),i.setAttribute("height",String(e.height)))}},this.applyEventsSynchronously=function(e){var t,n=N(e);try{for(n.s();!(t=n.n()).done;){var i=t.value;switch(i.type){case Pe.DomContentLoaded:case Pe.Load:case Pe.Custom:continue;case Pe.FullSnapshot:case Pe.Meta:case Pe.Plugin:case Pe.IncrementalSnapshot:}r.getCastFn(i,!0)()}}catch(o){n.e(o)}finally{n.f()}!0===r.touchActive?r.mouse.classList.add("touch-active"):!1===r.touchActive&&r.mouse.classList.remove("touch-active"),r.touchActive=null},this.getCastFn=function(e){var t,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];switch(e.type){case Pe.DomContentLoaded:case Pe.Load:break;case Pe.Custom:t=function(){r.emitter.emit(He.CustomEvent,e)};break;case Pe.Meta:t=function(){return r.emitter.emit(He.Resize,{width:e.data.width,height:e.data.height})};break;case Pe.FullSnapshot:t=function(){var t;if(r.firstFullSnapshot){if(r.firstFullSnapshot===e)return void(r.firstFullSnapshot=!0)}else r.firstFullSnapshot=!0;r.rebuildFullSnapshot(e,n),null===(t=r.iframe.contentWindow)||void 0===t||t.scrollTo(e.data.initialOffset),r.styleMirror.reset()};break;case Pe.IncrementalSnapshot:t=function(){if(r.applyIncremental(e,n),!n&&(e===r.nextUserInteractionEvent&&(r.nextUserInteractionEvent=null,r.backToNormal()),r.config.skipInactive&&!r.nextUserInteractionEvent)){var t,i=N(r.service.state.context.events);try{for(i.s();!(t=i.n()).done;){var o=t.value;if(!(o.timestamp<=e.timestamp)&&r.isUserInteraction(o)){o.delay-e.delay>Or*r.speedService.state.context.timer.speed&&(r.nextUserInteractionEvent=o);break}}}catch(u){i.e(u)}finally{i.f()}if(r.nextUserInteractionEvent){var a=r.nextUserInteractionEvent.delay-e.delay,s={speed:Math.min(Math.round(a/Dr),r.config.maxSpeed)};r.speedService.send({type:"FAST_FORWARD",payload:s}),r.emitter.emit(He.SkipStart,s)}}}}return function(){t&&t();var i,o=N(r.config.plugins||[]);try{for(o.s();!(i=o.n()).done;){var a=i.value;a.handler&&a.handler(e,n,{replayer:r})}}catch(c){o.e(c)}finally{o.f()}r.service.send({type:"CAST_EVENT",payload:{event:e}});var s=r.service.state.context.events.length-1;if(!r.config.liveMode&&e===r.service.state.context.events[s]){var u=50;e.type===Pe.IncrementalSnapshot&&e.data.source===We.MouseMove&&e.data.positions.length&&(u+=Math.max(0,-e.data.positions[0].timeOffset)),setTimeout((function(){s<r.service.state.context.events.length-1||(r.backToNormal(),r.service.send("END"),r.emitter.emit(He.Finish))}),u)}r.emitter.emit(He.EventCast,e)}},!(null===n||void 0===n?void 0:n.liveMode)&&t.length<2)throw new Error("Replayer need at least 2 events.");var i={speed:1,maxSpeed:360,root:document.body,loadTimeout:0,skipInactive:!1,showWarning:!0,showDebug:!1,blockClass:"rr-block",liveMode:!1,insertStyleRules:[],triggerFocus:!0,UNSAFE_replayCanvas:!1,pauseAnimation:!0,mouseTail:Vr,useVirtualDom:!0,logger:console};this.config=Object.assign({},i,n),this.handleResize=this.handleResize.bind(this),this.getCastFn=this.getCastFn.bind(this),this.applyEventsSynchronously=this.applyEventsSynchronously.bind(this),this.emitter.on(He.Resize,this.handleResize),this.setupDom();var o,a=N(this.config.plugins||[]);try{for(a.s();!(o=a.n()).done;){var s=o.value;s.getMirror&&s.getMirror({nodeMirror:this.mirror})}}catch(v){a.e(v)}finally{a.f()}this.emitter.on(He.Flush,(function(){if(r.usingVirtualDom){var e={mirror:r.mirror,applyCanvas:function(e,t,n){Rr({event:e,mutation:t,target:n,imageMap:r.imageMap,canvasEventMap:r.canvasEventMap,errorHandler:r.warnCanvasMutationFailed.bind(r)})},applyInput:r.applyInput.bind(r),applyScroll:r.applyScroll.bind(r),applyStyleSheetMutation:function(e,t){e.source===We.StyleSheetRule?r.applyStyleSheetRule(e,t):e.source===We.StyleDeclaration&&r.applyStyleDeclaration(e,t)},afterAppend:function(e,t){var n,i=N(r.config.plugins||[]);try{for(i.s();!(n=i.n()).done;){var o=n.value;o.onBuild&&o.onBuild(e,{id:t,replayer:r})}}catch(v){i.e(v)}finally{i.f()}}};if(r.iframe.contentDocument)try{cn(r.iframe.contentDocument,r.virtualDom,e,r.virtualDom.mirror)}catch(Dn){console.warn(Dn)}if(r.virtualDom.destroyTree(),r.usingVirtualDom=!1,Object.keys(r.legacy_missingNodeRetryMap).length)for(var t in r.legacy_missingNodeRetryMap)try{var n=r.legacy_missingNodeRetryMap[t],i=dn(n.node,r.mirror,r.virtualDom.mirror);cn(i,n.node,e,r.virtualDom.mirror),n.node=i}catch(o){r.warn(o)}r.constructedStyleMutations.forEach((function(e){r.applyStyleSheetMutation(e)})),r.constructedStyleMutations=[],r.adoptedStyleSheets.forEach((function(e){r.applyAdoptedStyleSheet(e)})),r.adoptedStyleSheets=[]}r.mousePos&&(r.moveAndHover(r.mousePos.x,r.mousePos.y,r.mousePos.id,!0,r.mousePos.debugData),r.mousePos=null),r.lastSelectionData&&(r.applySelection(r.lastSelectionData),r.lastSelectionData=null)})),this.emitter.on(He.PlayBack,(function(){r.firstFullSnapshot=null,r.mirror.reset(),r.styleMirror.reset()}));var u=new _n([],{speed:this.config.speed});this.service=zn({events:t.map((function(e){return n&&n.unpackFn?n.unpackFn(e):e})).sort((function(e,t){return e.timestamp-t.timestamp})),timer:u,timeOffset:0,baselineTime:0,lastPlayedEvent:null},{getCastFn:this.getCastFn,applyEventsSynchronously:this.applyEventsSynchronously,emitter:this.emitter}),this.service.start(),this.service.subscribe((function(e){r.emitter.emit(He.StateChange,{player:e})})),this.speedService=Hn(Un({id:"speed",context:{normalSpeed:-1,timer:u},initial:"normal",states:{normal:{on:{FAST_FORWARD:{target:"skipping",actions:["recordSpeed","setSpeed"]},SET_SPEED:{target:"normal",actions:["setSpeed"]}}},skipping:{on:{BACK_TO_NORMAL:{target:"normal",actions:["restoreSpeed"]},SET_SPEED:{target:"normal",actions:["setSpeed"]}}}}},{actions:{setSpeed:function(e,t){"payload"in t&&e.timer.setSpeed(t.payload.speed)},recordSpeed:Fn({normalSpeed:function(e){return e.timer.speed}}),restoreSpeed:function(e){e.timer.setSpeed(e.normalSpeed)}}})),this.speedService.start(),this.speedService.subscribe((function(e){r.emitter.emit(He.StateChange,{speed:e})}));var c=this.service.state.context.events.find((function(e){return e.type===Pe.Meta})),l=this.service.state.context.events.find((function(e){return e.type===Pe.FullSnapshot}));if(c){var f=c.data,h=f.width,p=f.height;setTimeout((function(){r.emitter.emit(He.Resize,{width:h,height:p})}),0)}l&&setTimeout((function(){var e;r.firstFullSnapshot||(r.firstFullSnapshot=l,r.rebuildFullSnapshot(l),null===(e=r.iframe.contentWindow)||void 0===e||e.scrollTo(l.data.initialOffset))}),1),this.service.state.context.events.find(Br)&&this.mouse.classList.add("touch-device")}return p(e,[{key:"timer",get:function(){return this.service.state.context.timer}},{key:"on",value:function(e,t){return this.emitter.on(e,t),this}},{key:"off",value:function(e,t){return this.emitter.off(e,t),this}},{key:"setConfig",value:function(e){var t=this;Object.keys(e).forEach((function(n){e[n],t.config[n]=e[n]})),this.config.skipInactive||this.backToNormal(),"undefined"!==typeof e.speed&&this.speedService.send({type:"SET_SPEED",payload:{speed:e.speed}}),"undefined"!==typeof e.mouseTail&&(!1===e.mouseTail?this.mouseTail&&(this.mouseTail.style.display="none"):(this.mouseTail||(this.mouseTail=document.createElement("canvas"),this.mouseTail.width=Number.parseFloat(this.iframe.width),this.mouseTail.height=Number.parseFloat(this.iframe.height),this.mouseTail.classList.add("replayer-mouse-tail"),this.wrapper.insertBefore(this.mouseTail,this.iframe)),this.mouseTail.style.display="inherit"))}},{key:"getMetaData",value:function(){var e=this.service.state.context.events[0],t=this.service.state.context.events[this.service.state.context.events.length-1];return{startTime:e.timestamp,endTime:t.timestamp,totalTime:t.timestamp-e.timestamp}}},{key:"getCurrentTime",value:function(){return this.timer.timeOffset+this.getTimeOffset()}},{key:"getTimeOffset",value:function(){var e=this.service.state.context;return e.baselineTime-e.events[0].timestamp}},{key:"getMirror",value:function(){return this.mirror}},{key:"play",value:function(){var e,t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.service.state.matches("paused")||this.service.send({type:"PAUSE"}),this.service.send({type:"PLAY",payload:{timeOffset:n}}),null===(t=null===(e=this.iframe.contentDocument)||void 0===e?void 0:e.getElementsByTagName("html")[0])||void 0===t||t.classList.remove("rrweb-paused"),this.emitter.emit(He.Start)}},{key:"pause",value:function(e){var t,n;void 0===e&&this.service.state.matches("playing")&&this.service.send({type:"PAUSE"}),"number"===typeof e&&(this.play(e),this.service.send({type:"PAUSE"})),null===(n=null===(t=this.iframe.contentDocument)||void 0===t?void 0:t.getElementsByTagName("html")[0])||void 0===n||n.classList.add("rrweb-paused"),this.emitter.emit(He.Pause)}},{key:"resume",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.warn("The 'resume' was deprecated in 1.0. Please use 'play' method which has the same interface."),this.play(e),this.emitter.emit(He.Resume)}},{key:"destroy",value:function(){this.pause(),this.config.root.removeChild(this.wrapper),this.emitter.emit(He.Destroy)}},{key:"startLive",value:function(e){this.service.send({type:"TO_LIVE",payload:{baselineTime:e}})}},{key:"addEvent",value:function(e){var t=this,n=this.config.unpackFn?this.config.unpackFn(e):e;Br(n)&&this.mouse.classList.add("touch-device"),Promise.resolve().then((function(){return t.service.send({type:"ADD_EVENT",payload:{event:n}})}))}},{key:"enableInteract",value:function(){this.iframe.setAttribute("scrolling","auto"),this.iframe.style.pointerEvents="auto"}},{key:"disableInteract",value:function(){this.iframe.setAttribute("scrolling","no"),this.iframe.style.pointerEvents="none"}},{key:"resetCache",value:function(){this.cache=Vt()}},{key:"setupDom",value:function(){this.wrapper=document.createElement("div"),this.wrapper.classList.add("replayer-wrapper"),this.config.root.appendChild(this.wrapper),this.mouse=document.createElement("div"),this.mouse.classList.add("replayer-mouse"),this.wrapper.appendChild(this.mouse),!1!==this.config.mouseTail&&(this.mouseTail=document.createElement("canvas"),this.mouseTail.classList.add("replayer-mouse-tail"),this.mouseTail.style.display="inherit",this.wrapper.appendChild(this.mouseTail)),this.iframe=document.createElement("iframe");var e=["allow-same-origin"];this.config.UNSAFE_replayCanvas&&e.push("allow-scripts"),this.iframe.style.display="none",this.iframe.setAttribute("sandbox",e.join(" ")),this.disableInteract(),this.wrapper.appendChild(this.iframe),this.iframe.contentWindow&&this.iframe.contentDocument&&(Tn(this.iframe.contentWindow,this.iframe.contentDocument),or(this.iframe.contentWindow))}},{key:"rebuildFullSnapshot",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!this.iframe.contentDocument)return this.warn("Looks like your replayer has been destroyed.");Object.keys(this.legacy_missingNodeRetryMap).length&&this.warn("Found unresolved missing node map",this.legacy_missingNodeRetryMap),this.legacy_missingNodeRetryMap={};var r=[],i=function(e,n){t.collectIframeAndAttachDocument(r,e);var i,o=N(t.config.plugins||[]);try{for(o.s();!(i=o.n()).done;){var a=i.value;a.onBuild&&a.onBuild(e,{id:n,replayer:t})}}catch(s){o.e(s)}finally{o.f()}};this.mirror.reset(),Pt(e.data.node,{doc:this.iframe.contentDocument,afterAppend:i,cache:this.cache,mirror:this.mirror}),i(this.iframe.contentDocument,e.data.node.id);for(var o=function(){var e=s[a],n=e.mutationInQueue,r=e.builtNode;t.attachDocumentToIframe(n,r),t.newDocumentQueue=t.newDocumentQueue.filter((function(e){return e!==n}))},a=0,s=r;a<s.length;a++)o();var u=this.iframe.contentDocument,c=u.documentElement,l=u.head;this.insertStyleRules(c,l),this.service.state.matches("playing")||this.iframe.contentDocument.getElementsByTagName("html")[0].classList.add("rrweb-paused"),this.emitter.emit(He.FullsnapshotRebuilded,e),n||this.waitForStylesheetLoad(),this.config.UNSAFE_replayCanvas&&this.preloadAllImages()}},{key:"insertStyleRules",value:function(e,t){var n,r,i=(r=this.config.blockClass,[".".concat(r," { background: currentColor }"),"noscript { display: none !important; }"]).concat(this.config.insertStyleRules);if(this.config.pauseAnimation&&i.push("html.rrweb-paused *, html.rrweb-paused *:before, html.rrweb-paused *:after { animation-play-state: paused !important; }"),this.usingVirtualDom){var o=this.virtualDom.createElement("style");this.virtualDom.mirror.add(o,An(o,this.virtualDom.unserializedId)),e.insertBefore(o,t),o.rules.push({source:We.StyleSheetRule,adds:i.map((function(e,t){return{rule:e,index:t}}))})}else{var a=document.createElement("style");e.insertBefore(a,t);for(var s=0;s<i.length;s++)null===(n=a.sheet)||void 0===n||n.insertRule(i[s],s)}}},{key:"attachDocumentToIframe",value:function(e,t){var n=this,r=this.usingVirtualDom?this.virtualDom.mirror:this.mirror,i=[],o=function(e,o){n.collectIframeAndAttachDocument(i,e);var a=r.getMeta(e);if((null===a||void 0===a?void 0:a.type)===qe.Element&&"HTML"===(null===a||void 0===a?void 0:a.tagName.toUpperCase())){var s=t.contentDocument,u=s.documentElement,c=s.head;n.insertStyleRules(u,c)}if(!n.usingVirtualDom){var l,d=N(n.config.plugins||[]);try{for(d.s();!(l=d.n()).done;){var f=l.value;f.onBuild&&f.onBuild(e,{id:o,replayer:n})}}catch(h){d.e(h)}finally{d.f()}}};jt(e.node,{doc:t.contentDocument,mirror:r,hackCss:!0,skipChild:!1,afterAppend:o,cache:this.cache}),o(t.contentDocument,e.node.id);for(var a=function(){var e=u[s],t=e.mutationInQueue,r=e.builtNode;n.attachDocumentToIframe(t,r),n.newDocumentQueue=n.newDocumentQueue.filter((function(e){return e!==t}))},s=0,u=i;s<u.length;s++)a()}},{key:"collectIframeAndAttachDocument",value:function(e,t){var n=this;if(ur(t,this.mirror)){var r=this.newDocumentQueue.find((function(e){return e.parentId===n.mirror.getId(t)}));r&&e.push({mutationInQueue:r,builtNode:t})}}},{key:"waitForStylesheetLoad",value:function(){var e,t=this,n=null===(e=this.iframe.contentDocument)||void 0===e?void 0:e.head;if(n){var r,i=new Set,o=this.service.state,a=function(){o=t.service.state};this.emitter.on(He.Start,a),this.emitter.on(He.Pause,a);var s=function(){t.emitter.off(He.Start,a),t.emitter.off(He.Pause,a)};n.querySelectorAll('link[rel="stylesheet"]').forEach((function(e){e.sheet||(i.add(e),e.addEventListener("load",(function(){i.delete(e),0===i.size&&-1!==r&&(o.matches("playing")&&t.play(t.getCurrentTime()),t.emitter.emit(He.LoadStylesheetEnd),r&&clearTimeout(r),s())})))})),i.size>0&&(this.service.send({type:"PAUSE"}),this.emitter.emit(He.LoadStylesheetStart),r=setTimeout((function(){o.matches("playing")&&t.play(t.getCurrentTime()),r=-1,s()}),this.config.loadTimeout))}}},{key:"preloadAllImages",value:function(){return Xe(this,void 0,void 0,r().mark((function e(){var t,n,i,o,a,s=this;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:this.service.state,t=function(){s.service.state},this.emitter.on(He.Start,t),this.emitter.on(He.Pause,t),n=[],i=N(this.service.state.context.events),e.prev=6,a=r().mark((function e(){var t;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(t=o.value).type===Pe.IncrementalSnapshot&&t.data.source===We.CanvasMutation&&(n.push(s.deserializeAndPreloadCanvasEvents(t.data,t)),("commands"in t.data?t.data.commands:[t.data]).forEach((function(e){s.preloadImages(e,t)})));case 2:case"end":return e.stop()}}),e)})),i.s();case 9:if((o=i.n()).done){e.next=13;break}return e.delegateYield(a(),"t0",11);case 11:e.next=9;break;case 13:e.next=18;break;case 15:e.prev=15,e.t1=e.catch(6),i.e(e.t1);case 18:return e.prev=18,i.f(),e.finish(18);case 21:return e.abrupt("return",Promise.all(n));case 22:case"end":return e.stop()}}),e,this,[[6,15,18,21]])})))}},{key:"preloadImages",value:function(e,t){if("drawImage"===e.property&&"string"===typeof e.args[0]&&!this.imageMap.has(t)){var n=document.createElement("canvas"),r=n.getContext("2d"),i=null===r||void 0===r?void 0:r.createImageData(n.width,n.height);null===i||void 0===i||i.data,JSON.parse(e.args[0]),null===r||void 0===r||r.putImageData(i,0,0)}}},{key:"deserializeAndPreloadCanvasEvents",value:function(e,t){return Xe(this,void 0,void 0,r().mark((function n(){var i,o,a,s=this;return r().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(this.canvasEventMap.has(t)){n.next=13;break}if(i={isUnchanged:!0},!("commands"in e)){n.next=9;break}return n.next=5,Promise.all(e.commands.map((function(e){return Xe(s,void 0,void 0,r().mark((function t(){var n;return r().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Promise.all(e.args.map(xr(this.imageMap,null,i)));case 2:return n=t.sent,t.abrupt("return",Object.assign(Object.assign({},e),{args:n}));case 4:case"end":return t.stop()}}),t,this)})))})));case 5:o=n.sent,!1===i.isUnchanged&&this.canvasEventMap.set(t,Object.assign(Object.assign({},e),{commands:o})),n.next=13;break;case 9:return n.next=11,Promise.all(e.args.map(xr(this.imageMap,null,i)));case 11:a=n.sent,!1===i.isUnchanged&&this.canvasEventMap.set(t,Object.assign(Object.assign({},e),{args:a}));case 13:case"end":return n.stop()}}),n,this)})))}},{key:"applyIncremental",value:function(e,t){var n,r,i,o=this,a=e.data;switch(a.source){case We.Mutation:try{this.applyMutation(a,t)}catch(y){this.warn("Exception in mutation ".concat(y.message||y),a)}break;case We.Drag:case We.TouchMove:case We.MouseMove:if(t){var s=a.positions[a.positions.length-1];this.mousePos={x:s.x,y:s.y,id:s.id,debugData:a}}else a.positions.forEach((function(n){var r={doAction:function(){o.moveAndHover(n.x,n.y,n.id,t,a)},delay:n.timeOffset+e.timestamp-o.service.state.context.baselineTime};o.timer.addAction(r)})),this.timer.addAction({doAction:function(){},delay:e.delay-(null===(n=a.positions[0])||void 0===n?void 0:n.timeOffset)});break;case We.MouseInteraction:if(-1===a.id||t)break;var u=new Event(Ue[a.type].toLowerCase()),c=this.mirror.getNode(a.id);if(!c)return this.debugNodeNotFound(a,a.id);this.emitter.emit(He.MouseInteraction,{type:a.type,target:c});var l=this.config.triggerFocus;switch(a.type){case Ue.Blur:"blur"in c&&c.blur();break;case Ue.Focus:l&&c.focus&&c.focus({preventScroll:!0});break;case Ue.Click:case Ue.TouchStart:case Ue.TouchEnd:t?(a.type===Ue.TouchStart?this.touchActive=!0:a.type===Ue.TouchEnd&&(this.touchActive=!1),this.mousePos={x:a.x,y:a.y,id:a.id,debugData:a}):(a.type===Ue.TouchStart&&(this.tailPositions.length=0),this.moveAndHover(a.x,a.y,a.id,t,a),a.type===Ue.Click?(this.mouse.classList.remove("active"),this.mouse.offsetWidth,this.mouse.classList.add("active")):a.type===Ue.TouchStart?(this.mouse.offsetWidth,this.mouse.classList.add("touch-active")):a.type===Ue.TouchEnd&&this.mouse.classList.remove("touch-active"));break;case Ue.TouchCancel:t?this.touchActive=!1:this.mouse.classList.remove("touch-active");break;default:c.dispatchEvent(u)}break;case We.Scroll:if(-1===a.id)break;if(this.usingVirtualDom){var d=this.virtualDom.mirror.getNode(a.id);if(!d)return this.debugNodeNotFound(a,a.id);d.scrollData=a;break}this.applyScroll(a,t);break;case We.ViewportResize:this.emitter.emit(He.Resize,{width:a.width,height:a.height});break;case We.Input:if(-1===a.id)break;if(this.usingVirtualDom){var f=this.virtualDom.mirror.getNode(a.id);if(!f)return this.debugNodeNotFound(a,a.id);f.inputData=a;break}this.applyInput(a);break;case We.MediaInteraction:var h=this.usingVirtualDom?this.virtualDom.mirror.getNode(a.id):this.mirror.getNode(a.id);if(!h)return this.debugNodeNotFound(a,a.id);var p=h;try{void 0!==a.currentTime&&(p.currentTime=a.currentTime),void 0!==a.volume&&(p.volume=a.volume),void 0!==a.muted&&(p.muted=a.muted),1===a.type&&p.pause(),0===a.type&&p.play(),4===a.type&&(p.playbackRate=a.playbackRate)}catch(y){this.warn("Failed to replay media interactions: ".concat(y.message||y))}break;case We.StyleSheetRule:case We.StyleDeclaration:this.usingVirtualDom?a.styleId?this.constructedStyleMutations.push(a):a.id&&(null===(r=this.virtualDom.mirror.getNode(a.id))||void 0===r||r.rules.push(a)):this.applyStyleSheetMutation(a);break;case We.CanvasMutation:if(!this.config.UNSAFE_replayCanvas)return;if(this.usingVirtualDom){var v=this.virtualDom.mirror.getNode(a.id);if(!v)return this.debugNodeNotFound(a,a.id);v.canvasMutations.push({event:e,mutation:a})}else{var m=this.mirror.getNode(a.id);if(!m)return this.debugNodeNotFound(a,a.id);Rr({event:e,mutation:a,target:m,imageMap:this.imageMap,canvasEventMap:this.canvasEventMap,errorHandler:this.warnCanvasMutationFailed.bind(this)})}break;case We.Font:try{var g=new FontFace(a.family,a.buffer?new Uint8Array(JSON.parse(a.fontSource)):a.fontSource,a.descriptors);null===(i=this.iframe.contentDocument)||void 0===i||i.fonts.add(g)}catch(y){this.warn(y)}break;case We.Selection:if(t){this.lastSelectionData=a;break}this.applySelection(a);break;case We.AdoptedStyleSheet:this.usingVirtualDom?this.adoptedStyleSheets.push(a):this.applyAdoptedStyleSheet(a)}}},{key:"applyMutation",value:function(e,t){var n=this;if(this.config.useVirtualDom&&!this.usingVirtualDom&&t&&(this.usingVirtualDom=!0,En(this.iframe.contentDocument,this.mirror,this.virtualDom),Object.keys(this.legacy_missingNodeRetryMap).length))for(var r in this.legacy_missingNodeRetryMap)try{var i=this.legacy_missingNodeRetryMap[r],o=kn(i.node,this.virtualDom,this.mirror);o&&(i.node=o)}catch(v){this.warn(v)}var a=this.usingVirtualDom?this.virtualDom.mirror:this.mirror;e.removes.forEach((function(t){var r,i=a.getNode(t.id);if(!i){if(e.removes.find((function(e){return e.id===t.parentId})))return;return n.warnNodeNotFound(e,t.id)}var o=a.getNode(t.parentId);if(!o)return n.warnNodeNotFound(e,t.parentId);if(t.isShadow&&dr(o)&&(o=o.shadowRoot),a.removeNodeFromMap(i),o)try{o.removeChild(i),n.usingVirtualDom&&"#text"===i.nodeName&&"STYLE"===o.nodeName&&(null===(r=o.rules)||void 0===r?void 0:r.length)>0&&(o.rules=[])}catch(v){if(!(v instanceof DOMException))throw v;n.warn("parent could not remove child in mutation",o,i,e)}}));var s=Object.assign({},this.legacy_missingNodeRetryMap),u=[],c=function(e){var t,r;if(!n.iframe.contentDocument)return n.warn("Looks like your replayer has been destroyed.");var i=a.getNode(e.parentId);if(!i)return e.node.type===qe.Document?n.newDocumentQueue.push(e):u.push(e);e.node.isShadow&&(dr(i)||i.attachShadow({mode:"open"}),i=i.shadowRoot);var o=null,c=null;if(e.previousId&&(o=a.getNode(e.previousId)),e.nextId&&(c=a.getNode(e.nextId)),function(e){var t=null;return e.nextId&&(t=a.getNode(e.nextId)),null!==e.nextId&&void 0!==e.nextId&&-1!==e.nextId&&!t}(e))return u.push(e);if(!e.node.rootId||a.getNode(e.node.rootId)){var l=e.node.rootId?a.getNode(e.node.rootId):n.usingVirtualDom?n.virtualDom:n.iframe.contentDocument;if(ur(i,a))n.attachDocumentToIframe(e,i);else{var d=function(e,t){if(!n.usingVirtualDom){var r,i=N(n.config.plugins||[]);try{for(i.s();!(r=i.n()).done;){var o=r.value;o.onBuild&&o.onBuild(e,{id:t,replayer:n})}}catch(a){i.e(a)}finally{i.f()}}},f=jt(e.node,{doc:l,mirror:a,skipChild:!0,hackCss:!0,cache:n.cache,afterAppend:d});if(-1!==e.previousId&&-1!==e.nextId){var h=a.getMeta(i);if(h&&h.type===qe.Element&&"textarea"===h.tagName&&e.node.type===qe.Text){var p,v=N(Array.isArray(i.childNodes)?i.childNodes:Array.from(i.childNodes));try{for(v.s();!(p=v.n()).done;){var m=p.value;m.nodeType===i.TEXT_NODE&&i.removeChild(m)}}catch(w){v.e(w)}finally{v.f()}}else if((null===h||void 0===h?void 0:h.type)===qe.Document){var g=i;e.node.type===qe.DocumentType&&(null===(t=g.childNodes[0])||void 0===t?void 0:t.nodeType)===Node.DOCUMENT_TYPE_NODE&&g.removeChild(g.childNodes[0]),"HTML"===f.nodeName&&g.documentElement&&g.removeChild(g.documentElement)}if(o&&o.nextSibling&&o.nextSibling.parentNode?i.insertBefore(f,o.nextSibling):c&&c.parentNode?i.contains(c)?i.insertBefore(f,c):i.insertBefore(f,null):i.appendChild(f),d(f,e.node.id),n.usingVirtualDom&&"#text"===f.nodeName&&"STYLE"===i.nodeName&&(null===(r=i.rules)||void 0===r?void 0:r.length)>0&&(i.rules=[]),ur(f,n.mirror)){var y=n.mirror.getId(f),b=n.newDocumentQueue.find((function(e){return e.parentId===y}));b&&(n.attachDocumentToIframe(b,f),n.newDocumentQueue=n.newDocumentQueue.filter((function(e){return e!==b})))}(e.previousId||e.nextId)&&n.legacy_resolveMissingNode(s,i,f,e)}else s[e.node.id]={node:f,mutation:e}}}};e.adds.forEach((function(e){c(e)}));for(var l=Date.now();u.length;){var d=ar(u);if(u.length=0,Date.now()-l>500){this.warn("Timeout in the loop, please check the resolve tree data:",d);break}var f,h=N(d);try{for(h.s();!(f=h.n()).done;){var p=f.value;a.getNode(p.value.parentId)?sr(p,(function(e){c(e)})):this.debug("Drop resolve tree since there is no parent for the root node.",p)}}catch(m){h.e(m)}finally{h.f()}}Object.keys(s).length&&Object.assign(this.legacy_missingNodeRetryMap,s),function(e){for(var t=new Set,n=[],r=e.length;r--;){var i=e[r];t.has(i.id)||(n.push(i),t.add(i.id))}return n}(e.texts).forEach((function(t){var r,i=a.getNode(t.id);if(!i){if(e.removes.find((function(e){return e.id===t.id})))return;return n.warnNodeNotFound(e,t.id)}if(i.textContent=t.value,n.usingVirtualDom){var o=i.parentNode;(null===(r=null===o||void 0===o?void 0:o.rules)||void 0===r?void 0:r.length)>0&&(o.rules=[])}})),e.attributes.forEach((function(t){var r=a.getNode(t.id);if(!r){if(e.removes.find((function(e){return e.id===t.id})))return;return n.warnNodeNotFound(e,t.id)}for(var i in t.attributes)if("string"===typeof i){var o=t.attributes[i];if(null===o)r.removeAttribute(i);else if("string"===typeof o)try{if("_cssText"===i&&("LINK"===r.nodeName||"STYLE"===r.nodeName))try{var s=a.getMeta(r);Object.assign(s.attributes,t.attributes);var u=jt(s,{doc:r.ownerDocument,mirror:a,skipChild:!0,hackCss:!0,cache:n.cache}),c=r.nextSibling,l=r.parentNode;if(u&&l){l.removeChild(r),l.insertBefore(u,c),a.replace(t.id,u);break}}catch(Dn){}r.setAttribute(i,o)}catch(v){n.warn("An error occurred may due to the checkout feature.",v)}else if("style"===i){var d=o,f=r;for(var h in d)if(!1===d[h])f.style.removeProperty(h);else if(d[h]instanceof Array){var p=d[h];f.style.setProperty(h,p[0],p[1])}else{var m=d[h];f.style.setProperty(h,m)}}}}))}},{key:"applyScroll",value:function(e,t){var n,r,i=this.mirror.getNode(e.id);if(!i)return this.debugNodeNotFound(e,e.id);var o=this.mirror.getMeta(i);if(i===this.iframe.contentDocument)null===(n=this.iframe.contentWindow)||void 0===n||n.scrollTo({top:e.y,left:e.x,behavior:t?"auto":"smooth"});else if((null===o||void 0===o?void 0:o.type)===qe.Document)null===(r=i.defaultView)||void 0===r||r.scrollTo({top:e.y,left:e.x,behavior:t?"auto":"smooth"});else try{i.scrollTo({top:e.y,left:e.x,behavior:t?"auto":"smooth"})}catch(a){}}},{key:"applyInput",value:function(e){var t=this.mirror.getNode(e.id);if(!t)return this.debugNodeNotFound(e,e.id);try{t.checked=e.isChecked,t.value=e.text}catch(n){}}},{key:"applySelection",value:function(e){var t=this;try{var n=new Set,r=e.ranges.map((function(e){var r=e.start,i=e.startOffset,o=e.end,a=e.endOffset,s=t.mirror.getNode(r),u=t.mirror.getNode(o);if(s&&u){var c=new Range;c.setStart(s,i),c.setEnd(u,a);var l=s.ownerDocument,d=null===l||void 0===l?void 0:l.getSelection();return d&&n.add(d),{range:c,selection:d}}}));n.forEach((function(e){return e.removeAllRanges()})),r.forEach((function(e){var t;return e&&(null===(t=e.selection)||void 0===t?void 0:t.addRange(e.range))}))}catch(i){}}},{key:"applyStyleSheetMutation",value:function(e){var t,n=null;e.styleId?n=this.styleMirror.getStyle(e.styleId):e.id&&(n=(null===(t=this.mirror.getNode(e.id))||void 0===t?void 0:t.sheet)||null),n&&(e.source===We.StyleSheetRule?this.applyStyleSheetRule(e,n):e.source===We.StyleDeclaration&&this.applyStyleDeclaration(e,n))}},{key:"applyStyleSheetRule",value:function(e,t){var n,r,i,o;if(null===(n=e.adds)||void 0===n||n.forEach((function(e){var n=e.rule,r=e.index;try{if(Array.isArray(r)){var i=hr(r),o=i.positions,a=i.index;fr(t.cssRules,o).insertRule(n,a)}else{var s=void 0===r?void 0:Math.min(r,t.cssRules.length);null===t||void 0===t||t.insertRule(n,s)}}catch(Dn){}})),null===(r=e.removes)||void 0===r||r.forEach((function(e){var n=e.index;try{if(Array.isArray(n)){var r=hr(n),i=r.positions,o=r.index;fr(t.cssRules,i).deleteRule(o||0)}else null===t||void 0===t||t.deleteRule(n)}catch(Dn){}})),e.replace)try{null===(i=t.replace)||void 0===i||i.call(t,e.replace)}catch(Dn){}if(e.replaceSync)try{null===(o=t.replaceSync)||void 0===o||o.call(t,e.replaceSync)}catch(Dn){}}},{key:"applyStyleDeclaration",value:function(e,t){e.set&&fr(t.rules,e.index).style.setProperty(e.set.property,e.set.value,e.set.priority);e.remove&&fr(t.rules,e.index).style.removeProperty(e.remove.property)}},{key:"applyAdoptedStyleSheet",value:function(e){var t,n=this,r=this.mirror.getNode(e.id);if(r){null===(t=e.styles)||void 0===t||t.forEach((function(e){var t,i=null,o=null;if(dr(r)?o=(null===(t=r.ownerDocument)||void 0===t?void 0:t.defaultView)||null:"#document"===r.nodeName&&(o=r.defaultView),o)try{i=new o.CSSStyleSheet,n.styleMirror.add(i,e.styleId),n.applyStyleSheetRule({source:We.StyleSheetRule,adds:e.rules},i)}catch(Dn){}}));var i=0;!function e(t,r){var o=r.map((function(e){return n.styleMirror.getStyle(e)})).filter((function(e){return null!==e}));dr(t)?t.shadowRoot.adoptedStyleSheets=o:"#document"===t.nodeName&&(t.adoptedStyleSheets=o),o.length!==r.length&&i<10&&(setTimeout((function(){return e(t,r)}),0+100*i),i++)}(r,e.styleIds)}}},{key:"legacy_resolveMissingNode",value:function(e,t,n,r){var i=r.previousId,o=r.nextId,a=i&&e[i],s=o&&e[o];if(a){var u=a.node,c=a.mutation;t.insertBefore(u,n),delete e[c.node.id],delete this.legacy_missingNodeRetryMap[c.node.id],(c.previousId||c.nextId)&&this.legacy_resolveMissingNode(e,t,u,c)}if(s){var l=s.node,d=s.mutation;t.insertBefore(l,n.nextSibling),delete e[d.node.id],delete this.legacy_missingNodeRetryMap[d.node.id],(d.previousId||d.nextId)&&this.legacy_resolveMissingNode(e,t,l,d)}}},{key:"moveAndHover",value:function(e,t,n,r,i){var o=this.mirror.getNode(n);if(!o)return this.debugNodeNotFound(i,n);var a=lr(o,this.iframe),s=e*a.absoluteScale+a.x,u=t*a.absoluteScale+a.y;this.mouse.style.left="".concat(s,"px"),this.mouse.style.top="".concat(u,"px"),r||this.drawMouseTail({x:s,y:u}),this.hoverElements(o)}},{key:"drawMouseTail",value:function(e){var t=this;if(this.mouseTail){var n=!0===this.config.mouseTail?Vr:Object.assign({},Vr,this.config.mouseTail),r=n.lineCap,i=n.lineWidth,o=n.strokeStyle,a=n.duration,s=function(){if(t.mouseTail){var e=t.mouseTail.getContext("2d");e&&t.tailPositions.length&&(e.clearRect(0,0,t.mouseTail.width,t.mouseTail.height),e.beginPath(),e.lineWidth=i,e.lineCap=r,e.strokeStyle=o,e.moveTo(t.tailPositions[0].x,t.tailPositions[0].y),t.tailPositions.forEach((function(t){return e.lineTo(t.x,t.y)})),e.stroke())}};this.tailPositions.push(e),s(),setTimeout((function(){t.tailPositions=t.tailPositions.filter((function(t){return t!==e})),s()}),a/this.speedService.state.context.timer.speed)}}},{key:"hoverElements",value:function(e){var t;null===(t=this.lastHoveredRootNode||this.iframe.contentDocument)||void 0===t||t.querySelectorAll(".\\:hover").forEach((function(e){e.classList.remove(":hover")})),this.lastHoveredRootNode=e.getRootNode();for(var n=e;n;)n.classList&&n.classList.add(":hover"),n=n.parentElement}},{key:"isUserInteraction",value:function(e){return e.type===Pe.IncrementalSnapshot&&(e.data.source>We.Mutation&&e.data.source<=We.Input)}},{key:"backToNormal",value:function(){this.nextUserInteractionEvent=null,this.speedService.state.matches("normal")||(this.speedService.send({type:"BACK_TO_NORMAL"}),this.emitter.emit(He.SkipEnd,{speed:this.speedService.state.context.normalSpeed}))}},{key:"warnNodeNotFound",value:function(e,t){this.warn("Node with id '".concat(t,"' not found. "),e)}},{key:"warnCanvasMutationFailed",value:function(e,t){this.warn("Has error on canvas update",t,"canvas mutation:",e)}},{key:"debugNodeNotFound",value:function(e,t){this.debug("Node with id '".concat(t,"' not found. "),e)}},{key:"warn",value:function(){var e;if(this.config.showWarning){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];(e=this.config.logger).warn.apply(e,[Fr].concat(n))}}},{key:"debug",value:function(){var e;if(this.config.showDebug){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];(e=this.config.logger).log.apply(e,[Fr].concat(n))}}}]),e}(),Gr=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};d(this,e),this.events=[],this.castedEvents=[],this.replayer=void 0,this.onEventCast=void 0,this.config={enableInteract:!1},this.useTimestampCompression=!0,this.addEvents=function(){var e=o(r().mark((function e(n){var i,o,a,s,u,c;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:i=n.sort((function(e,t){return e.timestamp-t.timestamp})),t.useTimestampCompression&&(o=Date.now(),i=i.map((function(e,t){return C(C({},e),{},{timestamp:o+t})}))),t.events=[].concat(T(t.events),T(i)),a=new Promise((function(e){t.onEventCast=function(n){t.castedEvents.push(n),t.castedEvents.length===t.events.length&&(t.onEventCast=void 0,e(n))}})),s=N(i);try{for(s.s();!(u=s.n()).done;)c=u.value,t.replayer.addEvent(c)}catch(r){s.e(r)}finally{s.f()}return e.abrupt("return",a);case 7:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),this.stop=function(){t.replayer.destroy()},this.getNodeById=function(e){return t.replayer.getMirror().getNode(e)},this.getMeta=function(e){return t.replayer.getMirror().getMeta(e)},this.config=C(C({},this.config),n)}return p(e,[{key:"start",value:function(e){var t=this,n=e.firstEventTimestamp,r=e.speed,i=void 0===r?8:r,o=e.useTimestampCompression,a=void 0===o||o;this.replayer=new Ur([],{mouseTail:!1,pauseAnimation:!1,speed:i,triggerFocus:!0,UNSAFE_replayCanvas:!0,liveMode:!0,showDebug:!1,skipInactive:!0}),this.config.enableInteract?this.replayer.enableInteract():this.replayer.disableInteract(),this.useTimestampCompression=a,this.replayer.startLive(this.useTimestampCompression?Date.now():n),this.replayer.on("event-cast",(function(e){t.onEventCast&&t.onEventCast(e)}))}}]),e}(),Hr=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};d(this,e),this.eventProcessor=void 0,this.sessionReplayer=void 0,this.elementSelector=void 0,this.eventHandlers=void 0,this.sessionReplayer=new Gr(n),this.elementSelector=t,this.eventProcessor=new Ke({eventHandlers:new ze})}return p(e,[{key:"setEventHandlers",value:function(e){this.eventHandlers=e,this.eventProcessor.setHandlers(this.eventHandlers)}},{key:"start",value:function(e){this.sessionReplayer.start(e)}},{key:"handleEvent",value:function(){var e=o(r().mark((function e(t){return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.eventProcessor.preCastEvent(t);case 2:return e.next=4,this.sessionReplayer.addEvents([t]);case 4:return e.next=6,this.eventProcessor.processEvent(t);case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"skipEvents",value:function(){var e=o(r().mark((function e(t){return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.eventProcessor.skipEvents(t);case 2:return e.next=4,this.sessionReplayer.addEvents(t);case 4:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"stop",value:function(){this.sessionReplayer.stop()}}]),e}(),zr=function(e){ye(n,e);var t=Ie(n);function n(){var e;return d(this,n),(e=t.call(this,new je,{enableInteract:!0})).pageIdentifiers=void 0,e.setEventHandlers(new Ye({sessionMirror:e.sessionReplayer,elementSelector:e.elementSelector})),e}return p(n,[{key:"setConfiguration",value:function(e){var t=e.enableRecordingAvailableInteractableElements,n=e.useTextInputFastForward;this.eventHandlers.setConfiguration({enableRecordingAvailableInteractableElements:t,useTextInputFastForward:n})}},{key:"setEvents",value:function(e){this.eventHandlers.setEvents(e)}},{key:"setOptions",value:function(e){this.elementSelector.setOptions({defaultExtractReducedHtmlAndSelector:e.extractReducedHTML,defaultInspectInteractableElements:e.inspectInteractables})}},{key:"setAppRules",value:function(e){this.pageIdentifiers=e.customPageIdentifiers,this.elementSelector.setAppSpecificInteractableElementsSelectors(e.appSpecificInteractableElementsSelectors),this.eventHandlers.setAppSpecificInteractableElementsSelectors(e.appSpecificInteractableElementsSelectors)}},{key:"handleEvent",value:function(){var e=o(r().mark((function e(t){var i;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,me(ve(n.prototype),"handleEvent",this).call(this,t);case 2:if(!(i=e.sent)){e.next=7;break}return e.next=6,this.resolvePageId();case 6:i.pageIdFromCustomIdentifiers=e.sent;case 7:return e.abrupt("return",i);case 8:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"resolvePageId",value:function(){var e=o(r().mark((function e(){var t,n,i,o,a;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.pageIdentifiers){e.next=2;break}return e.abrupt("return",void 0);case 2:e.t0=r().keys(this.pageIdentifiers);case 3:if((e.t1=e.t0()).done){e.next=30;break}t=e.t1.value,n=this.pageIdentifiers[t],i=N(n),e.prev=7,i.s();case 9:if((o=i.n()).done){e.next=20;break}if(a=o.value){e.next=13;break}return e.abrupt("continue",18);case 13:return e.next=15,this.elementSelector.selector(a);case 15:if(!e.sent){e.next=18;break}return e.abrupt("return",t);case 18:e.next=9;break;case 20:e.next=25;break;case 22:e.prev=22,e.t2=e.catch(7),i.e(e.t2);case 25:return e.prev=25,i.f(),e.finish(25);case 28:e.next=3;break;case 30:return e.abrupt("return",void 0);case 31:case"end":return e.stop()}}),e,this,[[7,22,25,28]])})));return function(){return e.apply(this,arguments)}}()}]),n}(Hr);!function(e){e[e.Element=0]="Element",e[e.VisibleElement=1]="VisibleElement",e[e.AtPointElement=2]="AtPointElement"}(jr||(jr={})),function(e){e.TextElementAppear="text_element_appear",e.TextElementDisappear="text_element_disappear",e.PageUrlChange="page_url_change"}(Pr||(Pr={})),function(e){e[e.Document=0]="Document",e[e.DocumentType=1]="DocumentType",e[e.Element=2]="Element",e[e.Text=3]="Text",e[e.CDATA=4]="CDATA",e[e.Comment=5]="Comment"}(Wr||(Wr={}));!function(){function e(){this.idNodeMap=new Map,this.nodeMetaMap=new WeakMap}e.prototype.getId=function(e){var t;if(!e)return-1;var n=null===(t=this.getMeta(e))||void 0===t?void 0:t.id;return null!==n&&void 0!==n?n:-1},e.prototype.getNode=function(e){return this.idNodeMap.get(e)||null},e.prototype.getIds=function(){return Array.from(this.idNodeMap.keys())},e.prototype.getMeta=function(e){return this.nodeMetaMap.get(e)||null},e.prototype.removeNodeFromMap=function(e){var t=this,n=this.getId(e);this.idNodeMap.delete(n),e.childNodes&&e.childNodes.forEach((function(e){return t.removeNodeFromMap(e)}))},e.prototype.has=function(e){return this.idNodeMap.has(e)},e.prototype.hasNode=function(e){return this.nodeMetaMap.has(e)},e.prototype.add=function(e,t){var n=t.id;this.idNodeMap.set(n,e),this.nodeMetaMap.set(e,t)},e.prototype.replace=function(e,t){var n=this.getNode(e);if(n){var r=this.nodeMetaMap.get(n);r&&this.nodeMetaMap.set(t,r)}this.idNodeMap.set(e,t)},e.prototype.reset=function(){this.idNodeMap=new Map,this.nodeMetaMap=new WeakMap}}();var qr=/([^\\]):hover/;new RegExp(qr.source,"g");var Zr=function(){function e(t){d(this,e),this.urlChangeEventCallback=void 0,this.currentURL=void 0,this.originalPushState=void 0,this.originalReplaceState=void 0,this.urlChangeEventCallback=t,this.currentURL=window.location.href}return p(e,[{key:"onURLChange",value:function(){var e=this;try{var t=Date.now();setTimeout((function(){var n=window.location.href;if(n!==e.currentURL){e.currentURL=n;var r={url:n,timestamp:t};e.urlChangeEventCallback(r)}}))}catch(Dn){}}},{key:"startMonitoring",value:function(){this.toggleWindowEventListeners(!0),this.overrideHistoryStateChanges()}},{key:"stopMonitoring",value:function(){this.toggleWindowEventListeners(!1),this.restoreHistoryStateChanges()}},{key:"toggleWindowEventListeners",value:function(t){var n=this,r=t?"addEventListener":"removeEventListener";e.WINDOW_EVENTS.forEach((function(e){window[r](e,n.onURLChange.bind(n))}))}},{key:"overrideHistoryStateChanges",value:function(){this.originalPushState=window.history.pushState,this.originalReplaceState=window.history.replaceState,this.originalPushState&&(window.history.pushState=function(){return this.onURLChange(),this.originalPushState.apply(window.history,arguments)}.bind(this)),this.originalReplaceState&&(window.history.replaceState=function(){return this.onURLChange(),this.originalReplaceState.apply(window.history,arguments)}.bind(this))}},{key:"restoreHistoryStateChanges",value:function(){this.originalPushState&&(window.history.pushState=this.originalPushState),this.originalReplaceState&&(window.history.replaceState=this.originalReplaceState)}}]),e}();Zr.WINDOW_EVENTS=["popstate","locationchange","hashchange"];var Qr=function(e){ye(n,e);var t=Ie(n);function n(e){var r,i=e.sessionMirror,o=e.elementSelectorGenerator,a=e.assertionGeneratorOptions;return d(this,n),(r=t.call(this)).sessionMirror=void 0,r.elementSelectorGenerator=void 0,r.urlObserver=void 0,r.assertionGeneratorOptions=void 0,r.isMonitoring=void 0,r.assertions=[],r.nodeByRRWebId=new Map,r.nodeIdsByParentId=new Map,r.parentIdByNodeId=new Map,r.pageUrlAtMonitoringStart=null,r.urlChangeCount=0,r.visibilityByNodeId=null,r.elementSelectorGenerator=o,r.sessionMirror=i,r.isMonitoring=!1,r.assertionGeneratorOptions=a,r.urlObserver=new Zr(r.handleUrlChange.bind(we(r))),r}return p(n,[{key:"startMonitoring",value:function(){this.isMonitoring=!0,this.pageUrlAtMonitoringStart=window.location.href,this.urlChangeCount=0,this.recordElementVisibilityForAllElements(),this.monitorElements(document,!0),this.urlObserver.startMonitoring()}},{key:"monitorElements",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,i=this.sessionMirror.getMeta(e).id;this.nodeByRRWebId[i]=e,this.nodeIdsByParentId[r]=this.nodeIdsByParentId[r]||[],this.nodeIdsByParentId[r].includes(i)||this.nodeIdsByParentId[r].push(i),this.parentIdByNodeId[i]=r,n&&Array.from(e.childNodes).forEach((function(e){t.monitorElements(e,!0,i)}))}},{key:"generateAssertions",value:function(){var e=this;return this.log("possible assertions count before filtering",this.countPossibleAssertions()),this.filterAssertionsWithSameText(),this.filterUrlChangeAssertionsBeforeLast(),this.log("possible assertions count after filtering",this.countPossibleAssertions()),this.getAssertionsDomSlicing().map((function(t,n){return e.assertions[n].slice(0,t)})).flat()}},{key:"getAssertionsDomSlicing",value:function(){var e=this,t=function(e){return e.reduce((function(e,t){return e+t}),0)},n=this.assertions.map((function(t){return Math.min(t.length,e.assertionGeneratorOptions.maxAssertionsPerDomTree)}));if(t(n)<=this.assertionGeneratorOptions.maxAssertions)return n;for(var r=this.assertions.map((function(){return 1})),i=0;i<this.assertions.length&&t(r)<this.assertionGeneratorOptions.maxAssertions;i++)r[i]<n[i]&&r[i]++,i===this.assertions.length-1&&(i=0);return r}},{key:"filterAssertionsWithSameText",value:function(){for(var e=new Set,t=this.assertions.length-1;t>=0;t--)for(var n=this.assertions[t],r=n.length-1;r>=0;r--){var i=n[r];if(i.type!==Pr.PageUrlChange){var o=i.text;e.has(o)?this.assertions[t].splice(r,1):e.add(o)}}this.assertions=this.assertions.filter((function(e){return 0!==e.length}))}},{key:"filterUrlChangeAssertionsBeforeLast",value:function(){var e=this.assertions.map((function(e,t){return{assertionTree:e,index:t}})).filter((function(e){var t;return(null===(t=e.assertionTree[0])||void 0===t?void 0:t.type)===Pr.PageUrlChange})).map((function(e){return e.index}));e.length<=1||(e.pop(),this.assertions=this.assertions.filter((function(t,n){return!e.includes(n)})))}},{key:"countPossibleAssertions",value:function(){return this.assertions.reduce((function(e,t){return e+t.length}),0)}},{key:"stopMonitoringAndGenerateAssertions",value:function(){var e=this.generateAssertions();return this.stopMonitoring(),e}},{key:"stopMonitoring",value:function(){this.isMonitoring=!1,this.urlObserver.stopMonitoring(),this.assertions=[],this.pageUrlAtMonitoringStart=null,this.urlChangeCount=0}},{key:"handleMutation",value:function(){var e=o(r().mark((function e(t,n){return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.isMonitoring){e.next=2;break}return e.abrupt("return");case 2:if(!(t.adds.length>0)){e.next=5;break}return e.next=5,this.handleAdditionMutation(t.adds,n.timestamp);case 5:if(!(t.removes.length>0)){e.next=8;break}return e.next=8,this.handleRemovalMutation(t.removes,n.timestamp);case 8:if(!(t.attributes.length>0)){e.next=11;break}return e.next=11,this.handleAttributeMutation(t.attributes,n.timestamp);case 11:if(!(t.texts.length>0)){e.next=14;break}return e.next=14,this.handleTextMutation(t.texts,n.timestamp);case 14:case"end":return e.stop()}}),e,this)})));return function(t,n){return e.apply(this,arguments)}}()},{key:"handleUrlChange",value:function(e){if(this.isMonitoring){this.urlChangeCount++;var t={type:Pr.PageUrlChange,url:e.url,urlChangeCount:this.urlChangeCount};this.log("new url change assertion",t),this.assertions.push([t])}}},{key:"handleAdditionMutation",value:function(){var e=o(r().mark((function e(t,i){var a,s,u,c,l,d=this;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:this.log("handleAdditionMutation",t),a=t.filter((function(e){return e.node.type===Wr.Element})),s=a.map((function(e){return e.node.id})),u=a.filter((function(e){var t=e.parentId;return!t||!s.includes(t)})),this.log("handleAdditionMutation roots",u),u.forEach(function(){var e=o(r().mark((function e(t){var n;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=d.sessionMirror.getNodeById(t.node.id),d.monitorElements(n,!0,t.parentId);case 2:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),c=a.map((function(e){return e.node.id})),l=c.filter((function(e){return n.isElementVisible(d.nodeByRRWebId[e])})),this.filterChildIds(l).forEach(function(){var e=o(r().mark((function e(t){return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",d.updateElementAndDescendantsVisibility(t,i));case 1:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}());case 9:case"end":return e.stop()}}),e,this)})));return function(t,n){return e.apply(this,arguments)}}()},{key:"handleRemovalMutation",value:function(){var e=o(r().mark((function e(t,n){var i,a,s=this;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:this.log("handleRemovalMutation",t),i=t.map((function(e){return e.id})),a=i.filter((function(e){return s.nodeChangedVisibility(e)})),this.filterChildIds(a).forEach(function(){var e=o(r().mark((function e(t){return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",s.updateElementAndDescendantsVisibility(t,n));case 1:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),i.forEach((function(e){return s.unmonitorElements(e,!0)}));case 5:case"end":return e.stop()}}),e,this)})));return function(t,n){return e.apply(this,arguments)}}()},{key:"handleAttributeMutation",value:function(){var e=o(r().mark((function e(t,n){var i,a=this;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:this.log("handleAttributeMutation",t),i=t.filter((function(e){var t=e.attributes,n=e.id;return t.style&&a.nodeByRRWebId[n]instanceof Element&&a.nodeChangedVisibility(n)})).map((function(e){return e.id})),this.filterChildIds(i).forEach(function(){var e=o(r().mark((function e(t){return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:a.updateElementAndDescendantsVisibility(t,n);case 1:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}());case 3:case"end":return e.stop()}}),e,this)})));return function(t,n){return e.apply(this,arguments)}}()},{key:"nodeChangedVisibility",value:function(e){var t=this.visibilityByNodeId.get(e)||!1,r=this.nodeByRRWebId[e];return t!==(!!r&&n.isElementVisible(r))}},{key:"handleTextMutation",value:function(){var e=o(r().mark((function e(t,n){var i,o=this;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:this.log("handleTextMutation",t),i=t.map((function(e){var t=e.id,r=o.parentIdByNodeId[t],i=o.parentIdByNodeId[r],a=r,s=o.nodeByRRWebId[a];return{type:Pr.TextElementAppear,parentId:i,nodeId:r,childNodeId:a,childTag:s.tagName.toLowerCase(),childDomNode:s,text:e.value,timestamp:n}})),this.log("new assertions",i),this.assertions.push(i);case 4:case"end":return e.stop()}}),e,this)})));return function(t,n){return e.apply(this,arguments)}}()},{key:"getNodeAncestorIds",value:function(e){for(var t=[],n=this.parentIdByNodeId[e];-1!==n;){if(void 0===n){var r=t.length?t[t.length-1]:e;this.log("parent id is undefined for node id ".concat(e," - possible bug in dom tracking. check tracking of node ").concat(r),this.nodeByRRWebId[r]);break}t.push(n),n=this.parentIdByNodeId[n]}return t}},{key:"filterChildIds",value:function(e){var t=this;return e.filter((function(n){return t.getNodeAncestorIds(n).every((function(t){return!e.includes(t)}))}))}},{key:"getDescendantsIds",value:function(e){var t=this,n=this.nodeIdsByParentId[e]||[];return[].concat(T(n),T(n.flatMap((function(e){return t.getDescendantsIds(e)}))))}},{key:"unmonitorElements",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=this.parentIdByNodeId[e];(delete this.nodeByRRWebId[e],this.nodeIdsByParentId[r]=(this.nodeIdsByParentId[r]||[]).filter((function(t){return t!==e})),0===this.nodeIdsByParentId[r].length&&delete this.nodeIdsByParentId[r],delete this.parentIdByNodeId[e],n)&&(this.nodeIdsByParentId[e]||[]).forEach((function(e){t.unmonitorElements(e,!0)}))}},{key:"updateElementAndDescendantsVisibility",value:function(){var e=o(r().mark((function e(t,n){var i=this;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.updateElementVisibility(t,!0,n);case 2:this.getDescendantsIds(t).forEach(function(){var e=o(r().mark((function e(t){return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,i.updateElementVisibility(t,!1,n);case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}());case 3:case"end":return e.stop()}}),e,this)})));return function(t,n){return e.apply(this,arguments)}}()},{key:"updateElementVisibility",value:function(){var e=o(r().mark((function e(t,i,o){var a,s,u;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if((a=this.nodeByRRWebId[t])instanceof Element){e.next=3;break}return e.abrupt("return");case 3:if(s=n.isElementVisible(a),!i||!this.nodeChangedVisibility(t)){e.next=9;break}return e.next=7,this.createTextElementAssertions(t,s,o);case 7:0!==(u=e.sent).length&&(this.log("new assertions",u),this.assertions.push(u));case 9:this.visibilityByNodeId.set(t,s);case 10:case"end":return e.stop()}}),e,this)})));return function(t,n,r){return e.apply(this,arguments)}}()},{key:"createTextElementAssertions",value:function(){var e=o(r().mark((function e(t,n,i){var o,a=this;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o=this.parentIdByNodeId[t],e.abrupt("return",this.getDescendantsNodeIdsForAssertions(t).map((function(e){return a.createTextElementAssertion(t,o,e,n,i)})));case 2:case"end":return e.stop()}}),e,this)})));return function(t,n,r){return e.apply(this,arguments)}}()},{key:"createTextElementAssertion",value:function(e,t,n,r,i){var o=this.nodeByRRWebId[n];return{type:r?Pr.TextElementAppear:Pr.TextElementDisappear,text:this.getDOMNodeText(o),parentId:t,nodeId:e,childNodeId:n,childTag:o.tagName.toLowerCase(),childDomNode:o,timestamp:i}}},{key:"recordElementVisibilityForAllElements",value:function(){this.visibilityByNodeId=new Map;for(var e=document.getElementsByTagName("*"),t=0;t<e.length;t++)try{var r=e[t];this.visibilityByNodeId.set(this.sessionMirror.getMeta(r).id,n.isElementVisible(r))}catch(Dn){}}},{key:"getDescendantsNodeIdsForAssertions",value:function(e){var t=this,r=this.nodeByRRWebId[e];if(r.nodeType===Node.TEXT_NODE)return r;var i=n.isElementVisible(r);return this.getAvailableTagsInTree(e).filter((function(e){return n.TAG_PRECEDENCE_ORDERING.includes(e)})).sort(n.sortTags).flatMap((function(n){var r=t.getDescendantsLeavesIdsWithTagName(e,n).filter((function(e){return t.nodeChangedVisibility(e)}));return i?r.sort((function(e,n){return t.nodeByRRWebId[e].getBoundingClientRect().top-t.nodeByRRWebId[n].getBoundingClientRect().top})):r}))}},{key:"getDOMNodeText",value:function(e){switch(e.nodeType){case Node.ELEMENT_NODE:return(e.textContent||"").trim();case Node.TEXT_NODE:default:return""}}},{key:"getDescendantsLeavesIdsWithTagName",value:function(e,t){var n=this,r=this.nodeByRRWebId[e];return r&&r.tagName?[e].concat(T(this.getDescendantsIds(e))).filter((function(e){var r,i=n.nodeByRRWebId[e];return(null===i||void 0===i||null===(r=i.tagName)||void 0===r?void 0:r.toLowerCase())===t&&n.isElementTextLeaf(e)})):[]}},{key:"isElementTextLeaf",value:function(e){var t=this,n=this.nodeIdsByParentId[e]||[],r=this.nodeByRRWebId[e];return r&&""!==this.getDOMNodeText(r)&&n.every((function(e){var n=t.nodeByRRWebId[e];return n&&""===t.getDOMNodeText(n)}))}},{key:"getAvailableTagsInTree",value:function(e){var t=this,n=this.nodeByRRWebId[e];if(!n||!n.tagName)return[];var r=this.nodeIdsByParentId[e];return r&&0!==r.size?T(new Set([n.tagName.toLowerCase()].concat(T(T(r).flatMap((function(e){return t.getAvailableTagsInTree(e)})))))):[n.tagName.toLowerCase()]}},{key:"log",value:function(){var e;n.LOG_TO_CONSOLE&&(e=console).log.apply(e,arguments)}}],[{key:"isAssertionsEqual",value:function(e,t){return e.type===t.type&&(e.type===Pr.PageUrlChange?e.url===t.url:e.text===t.text)}},{key:"isElementVisible",value:function(e){if("body"===e.tagName.toLowerCase())return!0;var t=getComputedStyle(e);return"none"!==t.display&&("visible"===t.visibility&&(!(Number(t.opacity)<.01)&&(!!e.parentElement&&n.isElementVisible(e.parentElement))))}},{key:"sortTags",value:function(e,t){return n.TAG_PRECEDENCE_ORDERING.indexOf(e)-n.TAG_PRECEDENCE_ORDERING.indexOf(t)}}]),n}(ze);function Yr(e){return"__ln"in e}Qr.LOG_TO_CONSOLE=!1,Qr.TAG_PRECEDENCE_ORDERING=["h1","h2","h3","h4","h5","h6","p","span","div"];var Kr=function(){function e(){d(this,e),this.length=0,this.head=null}return p(e,[{key:"get",value:function(e){if(e>=this.length)throw new Error("Position outside of list range");for(var t=this.head,n=0;n<e;n++)t=(null===t||void 0===t?void 0:t.next)||null;return t}},{key:"addNode",value:function(e){var t={value:e,previous:null,next:null};if(e.__ln=t,e.previousSibling&&Yr(e.previousSibling)){var n=e.previousSibling.__ln.next;t.next=n,t.previous=e.previousSibling.__ln,e.previousSibling.__ln.next=t,n&&(n.previous=t)}else if(e.nextSibling&&Yr(e.nextSibling)&&e.nextSibling.__ln.previous){var r=e.nextSibling.__ln.previous;t.previous=r,t.next=e.nextSibling.__ln,e.nextSibling.__ln.previous=t,r&&(r.next=t)}else this.head&&(this.head.previous=t),t.next=this.head,this.head=t;this.length++}},{key:"removeNode",value:function(e){var t=e.__ln;this.head&&(t.previous?(t.previous.next=t.next,t.next&&(t.next.previous=t.previous)):(this.head=t.next,this.head&&(this.head.previous=null)),e.__ln&&delete e.__ln,this.length--)}}]),e}(),Xr=function(e,t){return"".concat(e,"@").concat(t)},Jr=function(){function e(){var t=this;d(this,e),this.frozen=!1,this.locked=!1,this.texts=[],this.attributes=[],this.removes=[],this.mapRemoves=[],this.movedMap={},this.addedSet=new Set,this.movedSet=new Set,this.droppedSet=new Set,this.processMutations=function(e){e.forEach(t.processMutation),t.emit()},this.emit=function(){if(!t.frozen&&!t.locked){for(var e=[],n=new Kr,r=function(e){for(var n=e,r=dt;r===dt;)r=(n=n&&n.nextSibling)&&t.mirror.getId(n);return r},i=function(i){if(i.parentNode&&gr(i)){var o=$e(i.parentNode)?t.mirror.getId(vr(i)):t.mirror.getId(i.parentNode),a=r(i);if(-1===o||-1===a)return n.addNode(i);var s=At(i,{doc:t.doc,mirror:t.mirror,blockClass:t.blockClass,blockSelector:t.blockSelector,maskTextClass:t.maskTextClass,maskTextSelector:t.maskTextSelector,skipChild:!0,newlyAddedElement:!0,inlineStylesheet:t.inlineStylesheet,maskInputOptions:t.maskInputOptions,maskTextFn:t.maskTextFn,maskInputFn:t.maskInputFn,slimDOMOptions:t.slimDOMOptions,dataURLOptions:t.dataURLOptions,recordCanvas:t.recordCanvas,inlineImages:t.inlineImages,onSerialize:function(e){ur(e,t.mirror)&&t.iframeManager.addIframe(e),cr(e,t.mirror)&&t.stylesheetManager.trackLinkElement(e),dr(i)&&t.shadowDomManager.addShadowRoot(i.shadowRoot,t.doc)},onIframeLoad:function(e,n){t.iframeManager.attachIframe(e,n),t.shadowDomManager.observeAttachShadow(e)},onStylesheetLoad:function(e,n){t.stylesheetManager.attachLinkElement(e,n)}});s&&e.push({parentId:o,nextId:a,node:s})}};t.mapRemoves.length;)t.mirror.removeNodeFromMap(t.mapRemoves.shift());for(var o=0,a=Array.from(t.movedSet.values());o<a.length;o++){var s=a[o];ei(t.removes,s,t.mirror)&&!t.movedSet.has(s.parentNode)||i(s)}for(var u=0,c=Array.from(t.addedSet.values());u<c.length;u++){var l=c[u];ni(t.droppedSet,l)||ei(t.removes,l,t.mirror)?ni(t.movedSet,l)?i(l):t.droppedSet.add(l):i(l)}for(var d=null;n.length;){var f=null;if(d){var h=t.mirror.getId(d.value.parentNode),p=r(d.value);-1!==h&&-1!==p&&(f=d)}if(!f)for(var v=n.length-1;v>=0;v--){var m=n.get(v);if(m){var g=t.mirror.getId(m.value.parentNode);if(-1===r(m.value))continue;if(-1!==g){f=m;break}var y=m.value;if(y.parentNode&&y.parentNode.nodeType===Node.DOCUMENT_FRAGMENT_NODE){var b=y.parentNode.host;if(-1!==t.mirror.getId(b)){f=m;break}}}}if(!f){for(;n.head;)n.removeNode(n.head.value);break}d=f.previous,n.removeNode(f.value),i(f.value)}var w={texts:t.texts.map((function(e){return{id:t.mirror.getId(e.node),value:e.value}})).filter((function(e){return t.mirror.has(e.id)})),attributes:t.attributes.map((function(e){return{id:t.mirror.getId(e.node),attributes:e.attributes}})).filter((function(e){return t.mirror.has(e.id)})),removes:t.removes,adds:e};(w.texts.length||w.attributes.length||w.removes.length||w.adds.length)&&(t.texts=[],t.attributes=[],t.removes=[],t.addedSet=new Set,t.movedSet=new Set,t.droppedSet=new Set,t.movedMap={},t.mutationCb(w))}},this.processMutation=function(e){if(!nr(e.target,t.mirror))switch(e.type){case"characterData":var n=e.target.textContent;tr(e.target,t.blockClass,t.blockSelector,!1)||n===e.oldValue||t.texts.push({value:kt(e.target,t.maskTextClass,t.maskTextSelector)&&n?t.maskTextFn?t.maskTextFn(n):n.replace(/[\S]/g,"*"):n,node:e.target});break;case"attributes":var r=e.target,i=e.target.getAttribute(e.attributeName);if("value"===e.attributeName&&(i=ot({maskInputOptions:t.maskInputOptions,tagName:e.target.tagName,type:e.target.getAttribute("type"),value:i,maskInputFn:t.maskInputFn})),tr(e.target,t.blockClass,t.blockSelector,!1)||i===e.oldValue)return;var o=t.attributes.find((function(t){return t.node===e.target}));if("IFRAME"===r.tagName&&"src"===e.attributeName&&!t.keepIframeSrcFn(i)){if(r.contentDocument)return;e.attributeName="rr_src"}if(o||(o={node:e.target,attributes:{}},t.attributes.push(o)),"style"===e.attributeName){var a=t.doc.createElement("span");e.oldValue&&a.setAttribute("style",e.oldValue),void 0!==o.attributes.style&&null!==o.attributes.style||(o.attributes.style={});for(var s=o.attributes.style,u=0,c=Array.from(r.style);u<c.length;u++){var l=c[u],d=r.style.getPropertyValue(l),f=r.style.getPropertyPriority(l);d===a.style.getPropertyValue(l)&&f===a.style.getPropertyPriority(l)||(s[l]=""===f?d:[d,f])}for(var h=0,p=Array.from(a.style);h<p.length;h++){var v=p[h];""===r.style.getPropertyValue(v)&&(s[v]=!1)}}else o.attributes[e.attributeName]=Ct(t.doc,r.tagName,e.attributeName,i);break;case"childList":if(tr(e.target,t.blockClass,t.blockSelector,!0))return;e.addedNodes.forEach((function(n){return t.genAdds(n,e.target)})),e.removedNodes.forEach((function(n){var r=t.mirror.getId(n),i=$e(e.target)?t.mirror.getId(e.target.host):t.mirror.getId(e.target);tr(e.target,t.blockClass,t.blockSelector,!1)||nr(n,t.mirror)||!function(e,t){return-1!==t.getId(e)}(n,t.mirror)||(t.addedSet.has(n)?($r(t.addedSet,n),t.droppedSet.add(n)):t.addedSet.has(e.target)&&-1===r||rr(e.target,t.mirror)||(t.movedSet.has(n)&&t.movedMap[Xr(r,i)]?$r(t.movedSet,n):t.removes.push({parentId:i,id:r,isShadow:!(!$e(e.target)||!et(e.target))||void 0})),t.mapRemoves.push(n))}))}},this.genAdds=function(e,n){if(!t.processedNodeManager.inOtherBuffer(e,t)){if(t.mirror.hasNode(e)){if(nr(e,t.mirror))return;t.movedSet.add(e);var r=null;n&&t.mirror.hasNode(n)&&(r=t.mirror.getId(n)),r&&-1!==r&&(t.movedMap[Xr(t.mirror.getId(e),r)]=!0)}else t.addedSet.add(e),t.droppedSet.delete(e);tr(e,t.blockClass,t.blockSelector,!1)||(e.childNodes.forEach((function(e){return t.genAdds(e)})),dr(e)&&e.shadowRoot.childNodes.forEach((function(n){t.processedNodeManager.add(n,t),t.genAdds(n,e)})))}}}return p(e,[{key:"init",value:function(e){var t=this;["mutationCb","blockClass","blockSelector","maskTextClass","maskTextSelector","inlineStylesheet","maskInputOptions","maskTextFn","maskInputFn","keepIframeSrcFn","recordCanvas","inlineImages","slimDOMOptions","dataURLOptions","doc","mirror","iframeManager","stylesheetManager","shadowDomManager","canvasManager","processedNodeManager"].forEach((function(n){t[n]=e[n]}))}},{key:"freeze",value:function(){this.frozen=!0,this.canvasManager.freeze()}},{key:"unfreeze",value:function(){this.frozen=!1,this.canvasManager.unfreeze(),this.emit()}},{key:"isFrozen",value:function(){return this.frozen}},{key:"lock",value:function(){this.locked=!0,this.canvasManager.lock()}},{key:"unlock",value:function(){this.locked=!1,this.canvasManager.unlock(),this.emit()}},{key:"reset",value:function(){this.shadowDomManager.reset(),this.canvasManager.reset()}}]),e}();function $r(e,t){e.delete(t),t.childNodes.forEach((function(t){return $r(e,t)}))}function ei(e,t,n){return 0!==e.length&&ti(e,t,n)}function ti(e,t,n){var r=t.parentNode;if(!r)return!1;var i=n.getId(r);return!!e.some((function(e){return e.id===i}))||ti(e,r,n)}function ni(e,t){return 0!==e.size&&ri(e,t)}function ri(e,t){var n=t.parentNode;return!!n&&(!!e.has(n)||ri(e,n))}var ii=[],oi=new(function(){function e(){d(this,e),this.nodeMap=new WeakMap,this.periodicallyClear()}return p(e,[{key:"periodicallyClear",value:function(){var e=this;requestAnimationFrame((function(){e.clear(),e.periodicallyClear()}))}},{key:"inOtherBuffer",value:function(e,t){var n=this.nodeMap.get(e);return n&&Array.from(n).some((function(e){return e!==t}))}},{key:"add",value:function(e,t){this.nodeMap.set(e,(this.nodeMap.get(e)||new Set).add(t))}},{key:"clear",value:function(){this.nodeMap=new WeakMap}}]),e}());function ai(e){try{if("composedPath"in e){var t=e.composedPath();if(t.length)return t[0]}else if("path"in e&&e.path.length)return e.path[0];return e.target}catch(n){return e.target}}function si(e,t){var n,r,i=new Jr;ii.push(i),i.init(e);var o=window.MutationObserver||window.__rrMutationObserver,a=null===(r=null===(n=null===window||void 0===window?void 0:window.Zone)||void 0===n?void 0:n.__symbol__)||void 0===r?void 0:r.call(n,"MutationObserver");a&&window[a]&&(o=window[a]);var s=new o(i.processMutations.bind(i));return s.observe(t,{attributes:!0,attributeOldValue:!0,characterData:!0,characterDataOldValue:!0,childList:!0,subtree:!0}),s}function ui(e){var t=e.mouseInteractionCb,n=e.doc,r=e.mirror,i=e.blockClass,o=e.blockSelector,a=e.sampling;if(!1===a.mouseInteraction)return function(){};var s=!0===a.mouseInteraction||void 0===a.mouseInteraction?{}:a.mouseInteraction,u=[];return Object.keys(Ue).filter((function(e){return Number.isNaN(Number(e))&&!e.endsWith("_Departed")&&!1!==s[e]})).forEach((function(e){var a=e.toLowerCase(),s=function(e){return function(n){var a=ai(n);if(!tr(a,i,o,!0)){var s=ir(n)?n.changedTouches[0]:n;if(s){var u=r.getId(a),c=s.clientX,l=s.clientY;t({type:Ue[e],id:u,x:c,y:l})}}}}(e);u.push(qn(a,s,n))})),function(){u.forEach((function(e){return e()}))}}function ci(e){var t=e.scrollCb,n=e.doc,r=e.mirror,i=e.blockClass,o=e.blockSelector;return qn("scroll",Yn((function(e){var a=ai(e);if(a&&!tr(a,i,o,!0)){var s=r.getId(a);if(a===n&&n.defaultView){var u=Jn(n.defaultView);t({id:s,x:u.left,y:u.top})}else t({id:s,x:a.scrollLeft,y:a.scrollTop})}}),e.sampling.scroll||100),n)}function li(e,t){var n=Object.assign({},e);return t||delete n.userTriggered,n}var di=["INPUT","TEXTAREA","SELECT"],fi=new WeakMap;function hi(e){return function(e,t){if(gi("CSSGroupingRule")&&e.parentRule instanceof CSSGroupingRule||gi("CSSMediaRule")&&e.parentRule instanceof CSSMediaRule||gi("CSSSupportsRule")&&e.parentRule instanceof CSSSupportsRule||gi("CSSConditionRule")&&e.parentRule instanceof CSSConditionRule){var n=Array.from(e.parentRule.cssRules).indexOf(e);t.unshift(n)}else if(e.parentStyleSheet){var r=Array.from(e.parentStyleSheet.cssRules).indexOf(e);t.unshift(r)}return t}(e,[])}function pi(e,t,n){var r,i;return e?(e.ownerNode?r=t.getId(e.ownerNode):i=n.getId(e),{styleId:i,id:r}):{}}function vi(e,t){var n,r,i,o=e.mirror,a=e.stylesheetManager,s=null;s="#document"===t.nodeName?o.getId(t):o.getId(t.host);var u="#document"===t.nodeName?null===(n=t.defaultView)||void 0===n?void 0:n.Document:null===(i=null===(r=t.ownerDocument)||void 0===r?void 0:r.defaultView)||void 0===i?void 0:i.ShadowRoot,c=Object.getOwnPropertyDescriptor(null===u||void 0===u?void 0:u.prototype,"adoptedStyleSheets");return null!==s&&-1!==s&&u&&c?(Object.defineProperty(t,"adoptedStyleSheets",{configurable:c.configurable,enumerable:c.enumerable,get:function(){var e;return null===(e=c.get)||void 0===e?void 0:e.call(this)},set:function(e){var t,n=null===(t=c.set)||void 0===t?void 0:t.call(this,e);if(null!==s&&-1!==s)try{a.adoptStyleSheets(e,s)}catch(Dn){}return n}}),function(){Object.defineProperty(t,"adoptedStyleSheets",{configurable:c.configurable,enumerable:c.enumerable,get:c.get,set:c.set})}):function(){}}function mi(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.doc.defaultView;if(!n)return function(){};!function(e,t){var n=e.mutationCb,r=e.mousemoveCb,i=e.mouseInteractionCb,o=e.scrollCb,a=e.viewportResizeCb,s=e.inputCb,u=e.mediaInteractionCb,c=e.styleSheetRuleCb,l=e.styleDeclarationCb,d=e.canvasMutationCb,f=e.fontCb,h=e.selectionCb;e.mutationCb=function(){t.mutation&&t.mutation.apply(t,arguments),n.apply(void 0,arguments)},e.mousemoveCb=function(){t.mousemove&&t.mousemove.apply(t,arguments),r.apply(void 0,arguments)},e.mouseInteractionCb=function(){t.mouseInteraction&&t.mouseInteraction.apply(t,arguments),i.apply(void 0,arguments)},e.scrollCb=function(){t.scroll&&t.scroll.apply(t,arguments),o.apply(void 0,arguments)},e.viewportResizeCb=function(){t.viewportResize&&t.viewportResize.apply(t,arguments),a.apply(void 0,arguments)},e.inputCb=function(){t.input&&t.input.apply(t,arguments),s.apply(void 0,arguments)},e.mediaInteractionCb=function(){t.mediaInteaction&&t.mediaInteaction.apply(t,arguments),u.apply(void 0,arguments)},e.styleSheetRuleCb=function(){t.styleSheetRule&&t.styleSheetRule.apply(t,arguments),c.apply(void 0,arguments)},e.styleDeclarationCb=function(){t.styleDeclaration&&t.styleDeclaration.apply(t,arguments),l.apply(void 0,arguments)},e.canvasMutationCb=function(){t.canvasMutation&&t.canvasMutation.apply(t,arguments),d.apply(void 0,arguments)},e.fontCb=function(){t.font&&t.font.apply(t,arguments),f.apply(void 0,arguments)},e.selectionCb=function(){t.selection&&t.selection.apply(t,arguments),h.apply(void 0,arguments)}}(e,t);var r,i=si(e,e.doc),o=function(e){var t=e.mousemoveCb,n=e.sampling,r=e.doc,i=e.mirror;if(!1===n.mousemove)return function(){};var o,a="number"===typeof n.mousemove?n.mousemove:50,s="number"===typeof n.mousemoveCallback?n.mousemoveCallback:500,u=[],c=Yn((function(e){var n=Date.now()-o;t(u.map((function(e){return e.timeOffset-=n,e})),e),u=[],o=null}),s),l=Yn((function(e){var t=ai(e),n=ir(e)?e.changedTouches[0]:e,r=n.clientX,a=n.clientY;o||(o=Date.now()),u.push({x:r,y:a,id:i.getId(t),timeOffset:Date.now()-o}),c("undefined"!==typeof DragEvent&&e instanceof DragEvent?We.Drag:e instanceof MouseEvent?We.MouseMove:We.TouchMove)}),a,{trailing:!1}),d=[qn("mousemove",l,r),qn("touchmove",l,r),qn("drag",l,r)];return function(){d.forEach((function(e){return e()}))}}(e),a=ui(e),s=ci(e),u=function(e){var t=e.viewportResizeCb,n=-1,r=-1;return qn("resize",Yn((function(){var e=$n(),i=er();n===e&&r===i||(t({width:Number(i),height:Number(e)}),n=e,r=i)}),200),window)}(e),c=function(e){var t=e.inputCb,n=e.doc,r=e.mirror,i=e.blockClass,o=e.blockSelector,a=e.ignoreClass,s=e.maskInputOptions,u=e.maskInputFn,c=e.sampling,l=e.userTriggeredOnInput;function d(e){var t=ai(e),r=e.isTrusted;if(t&&"OPTION"===t.tagName&&(t=t.parentElement),t&&t.tagName&&!(di.indexOf(t.tagName)<0)&&!tr(t,i,o,!0)){var c=t.type;if(!t.classList.contains(a)){var d=t.value,h=!1;"radio"===c||"checkbox"===c?h=t.checked:(s[t.tagName.toLowerCase()]||s[c])&&(d=ot({maskInputOptions:s,tagName:t.tagName,type:c,value:d,maskInputFn:u})),f(t,li({text:d,isChecked:h,userTriggered:r},l));var p=t.name;"radio"===c&&p&&h&&n.querySelectorAll('input[type="radio"][name="'.concat(p,'"]')).forEach((function(e){e!==t&&f(e,li({text:e.value,isChecked:!h,userTriggered:!1},l))}))}}}function f(e,n){var i=fi.get(e);if(!i||i.text!==n.text||i.isChecked!==n.isChecked){fi.set(e,n);var o=r.getId(e);t(Object.assign(Object.assign({},n),{id:o}))}}var h=("last"===c.input?["change"]:["input","change"]).map((function(e){return qn(e,d,n)})),p=n.defaultView;if(!p)return function(){h.forEach((function(e){return e()}))};var v=p.Object.getOwnPropertyDescriptor(p.HTMLInputElement.prototype,"value"),m=[[p.HTMLInputElement.prototype,"value"],[p.HTMLInputElement.prototype,"checked"],[p.HTMLSelectElement.prototype,"value"],[p.HTMLTextAreaElement.prototype,"value"],[p.HTMLSelectElement.prototype,"selectedIndex"],[p.HTMLOptionElement.prototype,"selected"]];return v&&v.set&&h.push.apply(h,T(m.map((function(e){return Kn(e[0],e[1],{set:function(){d({target:this})}},!1,p)})))),function(){h.forEach((function(e){return e()}))}}(e),l=function(e){var t=e.mediaInteractionCb,n=e.blockClass,r=e.blockSelector,i=e.mirror,o=e.sampling,a=function(e){return Yn((function(o){var a=ai(o);if(a&&!tr(a,n,r,!0)){var s=a.currentTime,u=a.volume,c=a.muted,l=a.playbackRate;t({type:e,id:i.getId(a),currentTime:s,volume:u,muted:c,playbackRate:l})}}),o.media||500)},s=[qn("play",a(0)),qn("pause",a(1)),qn("seeked",a(2)),qn("volumechange",a(3)),qn("ratechange",a(4))];return function(){s.forEach((function(e){return e()}))}}(e),d=function(e,t){var n=e.styleSheetRuleCb,r=e.mirror,i=e.stylesheetManager,o=t.win;if(!o.CSSStyleSheet||!o.CSSStyleSheet.prototype)return function(){};var a=o.CSSStyleSheet.prototype.insertRule;o.CSSStyleSheet.prototype.insertRule=function(e,t){var o=pi(this,r,i.styleMirror),s=o.id,u=o.styleId;return(s&&-1!==s||u&&-1!==u)&&n({id:s,styleId:u,adds:[{rule:e,index:t}]}),a.apply(this,[e,t])};var s,u,c=o.CSSStyleSheet.prototype.deleteRule;o.CSSStyleSheet.prototype.deleteRule=function(e){var t=pi(this,r,i.styleMirror),o=t.id,a=t.styleId;return(o&&-1!==o||a&&-1!==a)&&n({id:o,styleId:a,removes:[{index:e}]}),c.apply(this,[e])},o.CSSStyleSheet.prototype.replace&&(s=o.CSSStyleSheet.prototype.replace,o.CSSStyleSheet.prototype.replace=function(e){var t=pi(this,r,i.styleMirror),o=t.id,a=t.styleId;return(o&&-1!==o||a&&-1!==a)&&n({id:o,styleId:a,replace:e}),s.apply(this,[e])}),o.CSSStyleSheet.prototype.replaceSync&&(u=o.CSSStyleSheet.prototype.replaceSync,o.CSSStyleSheet.prototype.replaceSync=function(e){var t=pi(this,r,i.styleMirror),o=t.id,a=t.styleId;return(o&&-1!==o||a&&-1!==a)&&n({id:o,styleId:a,replaceSync:e}),u.apply(this,[e])});var l={};yi("CSSGroupingRule")?l.CSSGroupingRule=o.CSSGroupingRule:(yi("CSSMediaRule")&&(l.CSSMediaRule=o.CSSMediaRule),yi("CSSConditionRule")&&(l.CSSConditionRule=o.CSSConditionRule),yi("CSSSupportsRule")&&(l.CSSSupportsRule=o.CSSSupportsRule));var d={};return Object.entries(l).forEach((function(e){var t=M(e,2),o=t[0],a=t[1];d[o]={insertRule:a.prototype.insertRule,deleteRule:a.prototype.deleteRule},a.prototype.insertRule=function(e,t){var a=pi(this.parentStyleSheet,r,i.styleMirror),s=a.id,u=a.styleId;return(s&&-1!==s||u&&-1!==u)&&n({id:s,styleId:u,adds:[{rule:e,index:[].concat(T(hi(this)),[t||0])}]}),d[o].insertRule.apply(this,[e,t])},a.prototype.deleteRule=function(e){var t=pi(this.parentStyleSheet,r,i.styleMirror),a=t.id,s=t.styleId;return(a&&-1!==a||s&&-1!==s)&&n({id:a,styleId:s,removes:[{index:[].concat(T(hi(this)),[e])}]}),d[o].deleteRule.apply(this,[e])}})),function(){o.CSSStyleSheet.prototype.insertRule=a,o.CSSStyleSheet.prototype.deleteRule=c,s&&(o.CSSStyleSheet.prototype.replace=s),u&&(o.CSSStyleSheet.prototype.replaceSync=u),Object.entries(l).forEach((function(e){var t=M(e,2),n=t[0],r=t[1];r.prototype.insertRule=d[n].insertRule,r.prototype.deleteRule=d[n].deleteRule}))}}(e,{win:n}),f=vi(e,e.doc),h=function(e,t){var n=e.styleDeclarationCb,r=e.mirror,i=e.ignoreCSSAttributes,o=e.stylesheetManager,a=t.win,s=a.CSSStyleDeclaration.prototype.setProperty;a.CSSStyleDeclaration.prototype.setProperty=function(e,t,a){var u;if(i.has(e))return s.apply(this,[e,t,a]);var c=pi(null===(u=this.parentRule)||void 0===u?void 0:u.parentStyleSheet,r,o.styleMirror),l=c.id,d=c.styleId;return(l&&-1!==l||d&&-1!==d)&&n({id:l,styleId:d,set:{property:e,value:t,priority:a},index:hi(this.parentRule)}),s.apply(this,[e,t,a])};var u=a.CSSStyleDeclaration.prototype.removeProperty;return a.CSSStyleDeclaration.prototype.removeProperty=function(e){var t;if(i.has(e))return u.apply(this,[e]);var a=pi(null===(t=this.parentRule)||void 0===t?void 0:t.parentStyleSheet,r,o.styleMirror),s=a.id,c=a.styleId;return(s&&-1!==s||c&&-1!==c)&&n({id:s,styleId:c,remove:{property:e},index:hi(this.parentRule)}),u.apply(this,[e])},function(){a.CSSStyleDeclaration.prototype.setProperty=s,a.CSSStyleDeclaration.prototype.removeProperty=u}}(e,{win:n}),p=e.collectFonts?function(e){var t=e.fontCb,n=e.doc,r=n.defaultView;if(!r)return function(){};var i=[],o=new WeakMap,a=r.FontFace;r.FontFace=function(e,t,n){var r=new a(e,t,n);return o.set(r,{family:e,buffer:"string"!==typeof t,descriptors:n,fontSource:"string"===typeof t?t:JSON.stringify(Array.from(new Uint8Array(t)))}),r};var s=Xn(n.fonts,"add",(function(e){return function(n){return setTimeout((function(){var e=o.get(n);e&&(t(e),o.delete(n))}),0),e.apply(this,[n])}}));return i.push((function(){r.FontFace=a})),i.push(s),function(){i.forEach((function(e){return e()}))}}(e):function(){},v=function(e){var t=e.doc,n=e.mirror,r=e.blockClass,i=e.blockSelector,o=e.selectionCb,a=!0,s=function(){var e=t.getSelection();if(!(!e||a&&(null===e||void 0===e?void 0:e.isCollapsed))){a=e.isCollapsed||!1;for(var s=[],u=e.rangeCount||0,c=0;c<u;c++){var l=e.getRangeAt(c),d=l.startContainer,f=l.startOffset,h=l.endContainer,p=l.endOffset;tr(d,r,i,!0)||tr(h,r,i,!0)||s.push({start:n.getId(d),startOffset:f,end:n.getId(h),endOffset:p})}o({ranges:s})}};return s(),qn("selectionchange",s)}(e),m=[],g=N(e.plugins);try{for(g.s();!(r=g.n()).done;){var y=r.value;m.push(y.observer(y.callback,n,y.options))}}catch(b){g.e(b)}finally{g.f()}return function(){ii.forEach((function(e){return e.reset()})),i.disconnect(),o(),a(),s(),u(),c(),l(),d(),f(),h(),p(),v(),m.forEach((function(e){return e()}))}}function gi(e){return"undefined"!==typeof window[e]}function yi(e){return Boolean("undefined"!==typeof window[e]&&window[e].prototype&&"insertRule"in window[e].prototype&&"deleteRule"in window[e].prototype)}var bi=function(){function e(t){d(this,e),this.generateIdFn=t,this.iframeIdToRemoteIdMap=new WeakMap,this.iframeRemoteIdToIdMap=new WeakMap}return p(e,[{key:"getId",value:function(e,t,n,r){var i=n||this.getIdToRemoteIdMap(e),o=r||this.getRemoteIdToIdMap(e),a=i.get(t);return a||(a=this.generateIdFn(),i.set(t,a),o.set(a,t)),a}},{key:"getIds",value:function(e,t){var n=this,r=this.getIdToRemoteIdMap(e),i=this.getRemoteIdToIdMap(e);return t.map((function(t){return n.getId(e,t,r,i)}))}},{key:"getRemoteId",value:function(e,t,n){var r=n||this.getRemoteIdToIdMap(e);if("number"!==typeof t)return t;var i=r.get(t);return i||-1}},{key:"getRemoteIds",value:function(e,t){var n=this,r=this.getRemoteIdToIdMap(e);return t.map((function(t){return n.getRemoteId(e,t,r)}))}},{key:"reset",value:function(e){if(!e)return this.iframeIdToRemoteIdMap=new WeakMap,void(this.iframeRemoteIdToIdMap=new WeakMap);this.iframeIdToRemoteIdMap.delete(e),this.iframeRemoteIdToIdMap.delete(e)}},{key:"getIdToRemoteIdMap",value:function(e){var t=this.iframeIdToRemoteIdMap.get(e);return t||(t=new Map,this.iframeIdToRemoteIdMap.set(e,t)),t}},{key:"getRemoteIdToIdMap",value:function(e){var t=this.iframeRemoteIdToIdMap.get(e);return t||(t=new Map,this.iframeRemoteIdToIdMap.set(e,t)),t}}]),e}(),wi=function(){function e(t){d(this,e),this.iframes=new WeakMap,this.crossOriginIframeMap=new WeakMap,this.crossOriginIframeMirror=new bi(ft),this.crossOriginIframeRootIdMap=new WeakMap,this.mutationCb=t.mutationCb,this.wrappedEmit=t.wrappedEmit,this.stylesheetManager=t.stylesheetManager,this.recordCrossOriginIframes=t.recordCrossOriginIframes,this.crossOriginIframeStyleMirror=new bi(this.stylesheetManager.styleMirror.generateId.bind(this.stylesheetManager.styleMirror)),this.mirror=t.mirror,this.recordCrossOriginIframes&&window.addEventListener("message",this.handleMessage.bind(this))}return p(e,[{key:"addIframe",value:function(e){this.iframes.set(e,!0),e.contentWindow&&this.crossOriginIframeMap.set(e.contentWindow,e)}},{key:"addLoadListener",value:function(e){this.loadListener=e}},{key:"attachIframe",value:function(e,t){var n;this.mutationCb({adds:[{parentId:this.mirror.getId(e),nextId:null,node:t}],removes:[],texts:[],attributes:[],isAttachIframe:!0}),null===(n=this.loadListener)||void 0===n||n.call(this,e),e.contentDocument&&e.contentDocument.adoptedStyleSheets&&e.contentDocument.adoptedStyleSheets.length>0&&this.stylesheetManager.adoptStyleSheets(e.contentDocument.adoptedStyleSheets,this.mirror.getId(e.contentDocument))}},{key:"handleMessage",value:function(e){var t=e;if("rrweb"===t.data.type&&t.origin===t.data.origin&&e.source){var n=this.crossOriginIframeMap.get(e.source);if(n){var r=this.transformCrossOriginEvent(n,t.data.event);r&&this.wrappedEmit(r,t.data.isCheckout)}}}},{key:"transformCrossOriginEvent",value:function(e,t){var n,r=this;switch(t.type){case Pe.FullSnapshot:this.crossOriginIframeMirror.reset(e),this.crossOriginIframeStyleMirror.reset(e),this.replaceIdOnNode(t.data.node,e);var i=t.data.node.id;return this.crossOriginIframeRootIdMap.set(e,i),this.patchRootIdOnNode(t.data.node,i),{timestamp:t.timestamp,type:Pe.IncrementalSnapshot,data:{source:We.Mutation,adds:[{parentId:this.mirror.getId(e),nextId:null,node:t.data.node}],removes:[],texts:[],attributes:[],isAttachIframe:!0}};case Pe.Meta:case Pe.Load:case Pe.DomContentLoaded:return!1;case Pe.Plugin:return t;case Pe.Custom:return this.replaceIds(t.data.payload,e,["id","parentId","previousId","nextId"]),t;case Pe.IncrementalSnapshot:switch(t.data.source){case We.Mutation:return t.data.adds.forEach((function(t){r.replaceIds(t,e,["parentId","nextId","previousId"]),r.replaceIdOnNode(t.node,e);var n=r.crossOriginIframeRootIdMap.get(e);n&&r.patchRootIdOnNode(t.node,n)})),t.data.removes.forEach((function(t){r.replaceIds(t,e,["parentId","id"])})),t.data.attributes.forEach((function(t){r.replaceIds(t,e,["id"])})),t.data.texts.forEach((function(t){r.replaceIds(t,e,["id"])})),t;case We.Drag:case We.TouchMove:case We.MouseMove:return t.data.positions.forEach((function(t){r.replaceIds(t,e,["id"])})),t;case We.ViewportResize:return!1;case We.MediaInteraction:case We.MouseInteraction:case We.Scroll:case We.CanvasMutation:case We.Input:return this.replaceIds(t.data,e,["id"]),t;case We.StyleSheetRule:case We.StyleDeclaration:return this.replaceIds(t.data,e,["id"]),this.replaceStyleIds(t.data,e,["styleId"]),t;case We.Font:return t;case We.Selection:return t.data.ranges.forEach((function(t){r.replaceIds(t,e,["start","end"])})),t;case We.AdoptedStyleSheet:return this.replaceIds(t.data,e,["id"]),this.replaceStyleIds(t.data,e,["styleIds"]),null===(n=t.data.styles)||void 0===n||n.forEach((function(t){r.replaceStyleIds(t,e,["styleId"])})),t}}}},{key:"replace",value:function(e,t,n,r){var i,o=N(r);try{for(o.s();!(i=o.n()).done;){var a=i.value;(Array.isArray(t[a])||"number"===typeof t[a])&&(Array.isArray(t[a])?t[a]=e.getIds(n,t[a]):t[a]=e.getId(n,t[a]))}}catch(s){o.e(s)}finally{o.f()}return t}},{key:"replaceIds",value:function(e,t,n){return this.replace(this.crossOriginIframeMirror,e,t,n)}},{key:"replaceStyleIds",value:function(e,t,n){return this.replace(this.crossOriginIframeStyleMirror,e,t,n)}},{key:"replaceIdOnNode",value:function(e,t){var n=this;this.replaceIds(e,t,["id","rootId"]),"childNodes"in e&&e.childNodes.forEach((function(e){n.replaceIdOnNode(e,t)}))}},{key:"patchRootIdOnNode",value:function(e,t){var n=this;e.type===qe.Document||e.rootId||(e.rootId=t),"childNodes"in e&&e.childNodes.forEach((function(e){n.patchRootIdOnNode(e,t)}))}}]),e}(),Ii=function(){function e(t){d(this,e),this.shadowDoms=new WeakSet,this.restoreHandlers=[],this.mutationCb=t.mutationCb,this.scrollCb=t.scrollCb,this.bypassOptions=t.bypassOptions,this.mirror=t.mirror,this.init()}return p(e,[{key:"init",value:function(){this.reset(),this.patchAttachShadow(Element,document)}},{key:"addShadowRoot",value:function(e,t){var n=this;if(et(e)&&!this.shadowDoms.has(e)){this.shadowDoms.add(e);var r=si(Object.assign(Object.assign({},this.bypassOptions),{doc:t,mutationCb:this.mutationCb,mirror:this.mirror,shadowDomManager:this}),e);this.restoreHandlers.push((function(){return r.disconnect()})),this.restoreHandlers.push(ci(Object.assign(Object.assign({},this.bypassOptions),{scrollCb:this.scrollCb,doc:e,mirror:this.mirror}))),setTimeout((function(){e.adoptedStyleSheets&&e.adoptedStyleSheets.length>0&&n.bypassOptions.stylesheetManager.adoptStyleSheets(e.adoptedStyleSheets,n.mirror.getId(e.host)),n.restoreHandlers.push(vi({mirror:n.mirror,stylesheetManager:n.bypassOptions.stylesheetManager},e))}),0)}}},{key:"observeAttachShadow",value:function(e){e.contentWindow&&e.contentDocument&&this.patchAttachShadow(e.contentWindow.Element,e.contentDocument)}},{key:"patchAttachShadow",value:function(e,t){var n=this;this.restoreHandlers.push(Xn(e.prototype,"attachShadow",(function(e){return function(r){var i=e.call(this,r);return this.shadowRoot&&gr(this)&&n.addShadowRoot(this.shadowRoot,t),i}})))}},{key:"reset",value:function(){this.restoreHandlers.forEach((function(e){try{e()}catch(Dn){}})),this.restoreHandlers=[],this.shadowDoms=new WeakSet}}]),e}(),Ci=new Map;var Si=function(e,t,n){if(e&&(xi(e,t)||"object"===typeof e)){var r=function(e,t){var n=Ci.get(e);return n||(n=new Map,Ci.set(e,n)),n.has(t)||n.set(t,[]),n.get(t)}(n,e.constructor.name),i=r.indexOf(e);return-1===i&&(i=r.length,r.push(e)),i}};function ki(e,t,n){if(e instanceof Array)return e.map((function(e){return ki(e,t,n)}));if(null===e)return e;if(e instanceof Float32Array||e instanceof Float64Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Uint8Array||e instanceof Uint16Array||e instanceof Int16Array||e instanceof Int8Array||e instanceof Uint8ClampedArray)return{rr_type:e.constructor.name,args:[Object.values(e)]};if(e instanceof ArrayBuffer)return{rr_type:e.constructor.name,base64:Cr(e)};if(e instanceof DataView)return{rr_type:e.constructor.name,args:[ki(e.buffer,t,n),e.byteOffset,e.byteLength]};if(e instanceof HTMLImageElement)return{rr_type:e.constructor.name,src:e.src};if(e instanceof HTMLCanvasElement){return{rr_type:"HTMLImageElement",src:e.toDataURL()}}return e instanceof ImageData?{rr_type:e.constructor.name,args:[ki(e.data,t,n),e.width,e.height]}:xi(e,t)||"object"===typeof e?{rr_type:e.constructor.name,index:Si(e,t,n)}:e}var Ei=function(e,t,n){return T(e).map((function(e){return ki(e,t,n)}))},xi=function(e,t){var n=["WebGLActiveInfo","WebGLBuffer","WebGLFramebuffer","WebGLProgram","WebGLRenderbuffer","WebGLShader","WebGLShaderPrecisionFormat","WebGLTexture","WebGLUniformLocation","WebGLVertexArrayObject","WebGLVertexArrayObjectOES"].filter((function(e){return"function"===typeof t[e]}));return Boolean(n.find((function(n){return e instanceof t[n]})))};function Ai(e,t,n){var r=[];try{var i=Xn(e.HTMLCanvasElement.prototype,"getContext",(function(e){return function(r){tr(this,t,n,!0)||"__context"in this||(this.__context=r);for(var i=arguments.length,o=new Array(i>1?i-1:0),a=1;a<i;a++)o[a-1]=arguments[a];return e.apply(this,[r].concat(o))}}));r.push(i)}catch(o){console.error("failed to patch HTMLCanvasElement.prototype.getContext")}return function(){r.forEach((function(e){return e()}))}}function Mi(e,t,n,r,i,o,a){var s,u=[],c=N(Object.getOwnPropertyNames(e));try{var l=function(){var o=s.value;if(["isContextLost","canvas","drawingBufferWidth","drawingBufferHeight"].includes(o))return"continue";try{if("function"!==typeof e[o])return"continue";var c=Xn(e,o,(function(e){return function(){for(var s=arguments.length,u=new Array(s),c=0;c<s;c++)u[c]=arguments[c];var l=e.apply(this,u);if(Si(l,a,this),!tr(this.canvas,r,i,!0)){var d=Ei([].concat(u),a,this),f={type:t,property:o,args:d};n(this.canvas,f)}return l}}));u.push(c)}catch(d){var l=Kn(e,o,{set:function(e){n(this.canvas,{type:t,property:o,args:[e],setter:!0})}});u.push(l)}};for(c.s();!(s=c.n()).done;)l()}catch(d){c.e(d)}finally{c.f()}return u}var Ti=null;try{var Ni="undefined"!==typeof module&&"function"===typeof module.require&&module.require("worker_threads")||"function"===typeof require&&require("worker_threads")||"function"===typeof require&&require("worker_threads");Ti=Ni.Worker}catch(Dn){}function _i(e,t,n){var r=void 0===t?null:t,i=function(e,t){return Buffer.from(e,"base64").toString(t?"utf16":"utf8")}(e,void 0!==n&&n),o=i.indexOf("\n",10)+1,a=i.substring(o)+(r?"//# sourceMappingURL="+r:"");return function(e){return new Ti(a,Object.assign({},e,{eval:!0}))}}function Ri(e,t,n){var r=void 0===t?null:t,i=function(e,t){var n=atob(e);if(t){for(var r=new Uint8Array(n.length),i=0,o=n.length;i<o;++i)r[i]=n.charCodeAt(i);return String.fromCharCode.apply(null,new Uint16Array(r.buffer))}return n}(e,void 0!==n&&n),o=i.indexOf("\n",10)+1,a=i.substring(o)+(r?"//# sourceMappingURL="+r:""),s=new Blob([a],{type:"application/javascript"});return URL.createObjectURL(s)}var Oi="[object process]"===Object.prototype.toString.call("undefined"!==typeof process?process:0);var Di,Li,Fi,Vi,Bi,ji,Pi=(Di="Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwooZnVuY3Rpb24gKCkgewogICAgJ3VzZSBzdHJpY3QnOwoKICAgIC8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KICAgIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLg0KDQogICAgUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55DQogICAgcHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLg0KDQogICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEgNCiAgICBSRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkNCiAgICBBTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsDQogICAgSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NDQogICAgTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1INCiAgICBPVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SDQogICAgUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS4NCiAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLw0KDQogICAgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikgew0KICAgICAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH0NCiAgICAgICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7DQogICAgICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9DQogICAgICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvclsidGhyb3ciXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9DQogICAgICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfQ0KICAgICAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpOw0KICAgICAgICB9KTsNCiAgICB9CgogICAgLyoKICAgICAqIGJhc2U2NC1hcnJheWJ1ZmZlciAxLjAuMSA8aHR0cHM6Ly9naXRodWIuY29tL25pa2xhc3ZoL2Jhc2U2NC1hcnJheWJ1ZmZlcj4KICAgICAqIENvcHlyaWdodCAoYykgMjAyMSBOaWtsYXMgdm9uIEhlcnR6ZW4gPGh0dHBzOi8vaGVydHplbi5jb20+CiAgICAgKiBSZWxlYXNlZCB1bmRlciBNSVQgTGljZW5zZQogICAgICovCiAgICB2YXIgY2hhcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyc7CiAgICAvLyBVc2UgYSBsb29rdXAgdGFibGUgdG8gZmluZCB0aGUgaW5kZXguCiAgICB2YXIgbG9va3VwID0gdHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gW10gOiBuZXcgVWludDhBcnJheSgyNTYpOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFycy5sZW5ndGg7IGkrKykgewogICAgICAgIGxvb2t1cFtjaGFycy5jaGFyQ29kZUF0KGkpXSA9IGk7CiAgICB9CiAgICB2YXIgZW5jb2RlID0gZnVuY3Rpb24gKGFycmF5YnVmZmVyKSB7CiAgICAgICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpLCBpLCBsZW4gPSBieXRlcy5sZW5ndGgsIGJhc2U2NCA9ICcnOwogICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMykgewogICAgICAgICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaV0gPj4gMl07CiAgICAgICAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2ldICYgMykgPDwgNCkgfCAoYnl0ZXNbaSArIDFdID4+IDQpXTsKICAgICAgICAgICAgYmFzZTY0ICs9IGNoYXJzWygoYnl0ZXNbaSArIDFdICYgMTUpIDw8IDIpIHwgKGJ5dGVzW2kgKyAyXSA+PiA2KV07CiAgICAgICAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpICsgMl0gJiA2M107CiAgICAgICAgfQogICAgICAgIGlmIChsZW4gJSAzID09PSAyKSB7CiAgICAgICAgICAgIGJhc2U2NCA9IGJhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDEpICsgJz0nOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChsZW4gJSAzID09PSAxKSB7CiAgICAgICAgICAgIGJhc2U2NCA9IGJhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDIpICsgJz09JzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGJhc2U2NDsKICAgIH07CgogICAgY29uc3QgbGFzdEJsb2JNYXAgPSBuZXcgTWFwKCk7DQogICAgY29uc3QgdHJhbnNwYXJlbnRCbG9iTWFwID0gbmV3IE1hcCgpOw0KICAgIGZ1bmN0aW9uIGdldFRyYW5zcGFyZW50QmxvYkZvcih3aWR0aCwgaGVpZ2h0LCBkYXRhVVJMT3B0aW9ucykgew0KICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgew0KICAgICAgICAgICAgY29uc3QgaWQgPSBgJHt3aWR0aH0tJHtoZWlnaHR9YDsNCiAgICAgICAgICAgIGlmICgnT2Zmc2NyZWVuQ2FudmFzJyBpbiBnbG9iYWxUaGlzKSB7DQogICAgICAgICAgICAgICAgaWYgKHRyYW5zcGFyZW50QmxvYk1hcC5oYXMoaWQpKQ0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNwYXJlbnRCbG9iTWFwLmdldChpZCk7DQogICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2NyZWVuID0gbmV3IE9mZnNjcmVlbkNhbnZhcyh3aWR0aCwgaGVpZ2h0KTsNCiAgICAgICAgICAgICAgICBvZmZzY3JlZW4uZ2V0Q29udGV4dCgnMmQnKTsNCiAgICAgICAgICAgICAgICBjb25zdCBibG9iID0geWllbGQgb2Zmc2NyZWVuLmNvbnZlcnRUb0Jsb2IoZGF0YVVSTE9wdGlvbnMpOw0KICAgICAgICAgICAgICAgIGNvbnN0IGFycmF5QnVmZmVyID0geWllbGQgYmxvYi5hcnJheUJ1ZmZlcigpOw0KICAgICAgICAgICAgICAgIGNvbnN0IGJhc2U2NCA9IGVuY29kZShhcnJheUJ1ZmZlcik7DQogICAgICAgICAgICAgICAgdHJhbnNwYXJlbnRCbG9iTWFwLnNldChpZCwgYmFzZTY0KTsNCiAgICAgICAgICAgICAgICByZXR1cm4gYmFzZTY0Ow0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICcnOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQogICAgY29uc3Qgd29ya2VyID0gc2VsZjsNCiAgICB3b3JrZXIub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsNCiAgICAgICAgICAgIGlmICgnT2Zmc2NyZWVuQ2FudmFzJyBpbiBnbG9iYWxUaGlzKSB7DQogICAgICAgICAgICAgICAgY29uc3QgeyBpZCwgYml0bWFwLCB3aWR0aCwgaGVpZ2h0LCBkYXRhVVJMT3B0aW9ucyB9ID0gZS5kYXRhOw0KICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zcGFyZW50QmFzZTY0ID0gZ2V0VHJhbnNwYXJlbnRCbG9iRm9yKHdpZHRoLCBoZWlnaHQsIGRhdGFVUkxPcHRpb25zKTsNCiAgICAgICAgICAgICAgICBjb25zdCBvZmZzY3JlZW4gPSBuZXcgT2Zmc2NyZWVuQ2FudmFzKHdpZHRoLCBoZWlnaHQpOw0KICAgICAgICAgICAgICAgIGNvbnN0IGN0eCA9IG9mZnNjcmVlbi5nZXRDb250ZXh0KCcyZCcpOw0KICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoYml0bWFwLCAwLCAwKTsNCiAgICAgICAgICAgICAgICBiaXRtYXAuY2xvc2UoKTsNCiAgICAgICAgICAgICAgICBjb25zdCBibG9iID0geWllbGQgb2Zmc2NyZWVuLmNvbnZlcnRUb0Jsb2IoZGF0YVVSTE9wdGlvbnMpOw0KICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBibG9iLnR5cGU7DQogICAgICAgICAgICAgICAgY29uc3QgYXJyYXlCdWZmZXIgPSB5aWVsZCBibG9iLmFycmF5QnVmZmVyKCk7DQogICAgICAgICAgICAgICAgY29uc3QgYmFzZTY0ID0gZW5jb2RlKGFycmF5QnVmZmVyKTsNCiAgICAgICAgICAgICAgICBpZiAoIWxhc3RCbG9iTWFwLmhhcyhpZCkgJiYgKHlpZWxkIHRyYW5zcGFyZW50QmFzZTY0KSA9PT0gYmFzZTY0KSB7DQogICAgICAgICAgICAgICAgICAgIGxhc3RCbG9iTWFwLnNldChpZCwgYmFzZTY0KTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdvcmtlci5wb3N0TWVzc2FnZSh7IGlkIH0pOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAobGFzdEJsb2JNYXAuZ2V0KGlkKSA9PT0gYmFzZTY0KQ0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gd29ya2VyLnBvc3RNZXNzYWdlKHsgaWQgfSk7DQogICAgICAgICAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHsNCiAgICAgICAgICAgICAgICAgICAgaWQsDQogICAgICAgICAgICAgICAgICAgIHR5cGUsDQogICAgICAgICAgICAgICAgICAgIGJhc2U2NCwNCiAgICAgICAgICAgICAgICAgICAgd2lkdGgsDQogICAgICAgICAgICAgICAgICAgIGhlaWdodCwNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICBsYXN0QmxvYk1hcC5zZXQoaWQsIGJhc2U2NCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gd29ya2VyLnBvc3RNZXNzYWdlKHsgaWQ6IGUuZGF0YS5pZCB9KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgfTsKCn0pKCk7Cgo=",Li=null,Fi=!1,Oi?_i(Di,Li,Fi):function(e,t,n){var r;return function(i){return r=r||Ri(e,t,n),new Worker(r,i)}}(Di,Li,Fi)),Wi=function(){function e(t){var n=this;d(this,e),this.pendingCanvasMutations=new Map,this.rafStamps={latestId:0,invokeId:null},this.frozen=!1,this.locked=!1,this.processMutation=function(e,t){!(n.rafStamps.invokeId&&n.rafStamps.latestId!==n.rafStamps.invokeId)&&n.rafStamps.invokeId||(n.rafStamps.invokeId=n.rafStamps.latestId),n.pendingCanvasMutations.has(e)||n.pendingCanvasMutations.set(e,[]),n.pendingCanvasMutations.get(e).push(t)};var r=t.sampling,i=void 0===r?"all":r,o=t.win,a=t.blockClass,s=t.blockSelector,u=t.recordCanvas,c=t.dataURLOptions;this.mutationCb=t.mutationCb,this.mirror=t.mirror,u&&"all"===i&&this.initCanvasMutationObserver(o,a,s),u&&"number"===typeof i&&this.initCanvasFPSObserver(i,o,a,s,{dataURLOptions:c})}return p(e,[{key:"reset",value:function(){this.pendingCanvasMutations.clear(),this.resetObservers&&this.resetObservers()}},{key:"freeze",value:function(){this.frozen=!0}},{key:"unfreeze",value:function(){this.frozen=!1}},{key:"lock",value:function(){this.locked=!0}},{key:"unlock",value:function(){this.locked=!1}},{key:"initCanvasFPSObserver",value:function(e,t,n,i,o){var a=this,s=Ai(t,n,i),u=new Map,c=new Pi;c.onmessage=function(e){var t=e.data.id;if(u.set(t,!1),"base64"in e.data){var n=e.data,r=n.base64,i=n.type,o=n.width,s=n.height;a.mutationCb({id:t,type:Ge["2D"],commands:[{property:"clearRect",args:[0,0,o,s]},{property:"drawImage",args:[{rr_type:"ImageBitmap",args:[{rr_type:"Blob",data:[{rr_type:"ArrayBuffer",base64:r}],type:i}]},0,0]}]})}};var l,d=1e3/e,f=0;l=requestAnimationFrame((function e(s){f&&s-f<d||(f=s,function(){var e=[];return t.document.querySelectorAll("canvas").forEach((function(t){tr(t,n,i,!0)||e.push(t)})),e}().forEach((function(e){return Xe(a,void 0,void 0,r().mark((function t(){var n,i,a,s;return r().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(i=this.mirror.getId(e),!u.get(i)){t.next=3;break}return t.abrupt("return");case 3:return u.set(i,!0),["webgl","webgl2"].includes(e.__context)&&(a=e.getContext(e.__context),!1===(null===(n=null===a||void 0===a?void 0:a.getContextAttributes())||void 0===n?void 0:n.preserveDrawingBuffer)&&(null===a||void 0===a||a.clear(a.COLOR_BUFFER_BIT))),t.next=7,createImageBitmap(e);case 7:s=t.sent,c.postMessage({id:i,bitmap:s,width:e.width,height:e.height,dataURLOptions:o.dataURLOptions},[s]);case 9:case"end":return t.stop()}}),t,this)})))}))),l=requestAnimationFrame(e)})),this.resetObservers=function(){s(),cancelAnimationFrame(l)}}},{key:"initCanvasMutationObserver",value:function(e,t,n){this.startRAFTimestamping(),this.startPendingCanvasMutationFlusher();var r=Ai(e,t,n),i=function(e,t,n,r){var i,o=[],a=N(Object.getOwnPropertyNames(t.CanvasRenderingContext2D.prototype));try{var s=function(){var a=i.value;try{if("function"!==typeof t.CanvasRenderingContext2D.prototype[a])return"continue";var s=Xn(t.CanvasRenderingContext2D.prototype,a,(function(i){return function(){for(var o=this,s=arguments.length,u=new Array(s),c=0;c<s;c++)u[c]=arguments[c];return tr(this.canvas,n,r,!0)||setTimeout((function(){var n=Ei([].concat(u),t,o);e(o.canvas,{type:Ge["2D"],property:a,args:n})}),0),i.apply(this,u)}}));o.push(s)}catch(c){var u=Kn(t.CanvasRenderingContext2D.prototype,a,{set:function(t){e(this.canvas,{type:Ge["2D"],property:a,args:[t],setter:!0})}});o.push(u)}};for(a.s();!(i=a.n()).done;)s()}catch(u){a.e(u)}finally{a.f()}return function(){o.forEach((function(e){return e()}))}}(this.processMutation.bind(this),e,t,n),o=function(e,t,n,r,i){var o=[];return o.push.apply(o,T(Mi(t.WebGLRenderingContext.prototype,Ge.WebGL,e,n,r,0,t))),"undefined"!==typeof t.WebGL2RenderingContext&&o.push.apply(o,T(Mi(t.WebGL2RenderingContext.prototype,Ge.WebGL2,e,n,r,0,t))),function(){o.forEach((function(e){return e()}))}}(this.processMutation.bind(this),e,t,n,this.mirror);this.resetObservers=function(){r(),i(),o()}}},{key:"startPendingCanvasMutationFlusher",value:function(){var e=this;requestAnimationFrame((function(){return e.flushPendingCanvasMutations()}))}},{key:"startRAFTimestamping",value:function(){var e=this;requestAnimationFrame((function t(n){e.rafStamps.latestId=n,requestAnimationFrame(t)}))}},{key:"flushPendingCanvasMutations",value:function(){var e=this;this.pendingCanvasMutations.forEach((function(t,n){var r=e.mirror.getId(n);e.flushPendingCanvasMutationFor(n,r)})),requestAnimationFrame((function(){return e.flushPendingCanvasMutations()}))}},{key:"flushPendingCanvasMutationFor",value:function(e,t){if(!this.frozen&&!this.locked){var n=this.pendingCanvasMutations.get(e);if(n&&-1!==t){var r=n.map((function(e){var t=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"===typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}(e,["type"]);return t})),i=n[0].type;this.mutationCb({id:t,type:i,commands:r}),this.pendingCanvasMutations.delete(e)}}}}]),e}(),Ui=function(){function e(t){d(this,e),this.trackedLinkElements=new WeakSet,this.styleMirror=new pr,this.mutationCb=t.mutationCb,this.adoptedStyleSheetCb=t.adoptedStyleSheetCb}return p(e,[{key:"attachLinkElement",value:function(e,t){"_cssText"in t.attributes&&this.mutationCb({adds:[],removes:[],texts:[],attributes:[{id:t.id,attributes:t.attributes}]}),this.trackLinkElement(e)}},{key:"trackLinkElement",value:function(e){this.trackedLinkElements.has(e)||(this.trackedLinkElements.add(e),this.trackStylesheetInLinkElement(e))}},{key:"adoptStyleSheets",value:function(e,t){if(0!==e.length){var n,r={id:t,styleIds:[]},i=[],o=N(e);try{for(o.s();!(n=o.n()).done;){var a=n.value,s=void 0;if(this.styleMirror.has(a))s=this.styleMirror.getId(a);else{s=this.styleMirror.add(a);var u=Array.from(a.rules||CSSRule);i.push({styleId:s,rules:u.map((function(e,t){return{rule:nt(e),index:t}}))})}r.styleIds.push(s)}}catch(c){o.e(c)}finally{o.f()}i.length>0&&(r.styles=i),this.adoptedStyleSheetCb(r)}}},{key:"reset",value:function(){this.styleMirror.reset(),this.trackedLinkElements=new WeakSet}},{key:"trackStylesheetInLinkElement",value:function(e){}}]),e}();function Gi(e){return Object.assign(Object.assign({},e),{timestamp:Date.now()})}var Hi=!1,zi=it();function qi(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.emit,n=e.checkoutEveryNms,r=e.checkoutEveryNth,i=e.blockClass,o=void 0===i?"rr-block":i,a=e.blockSelector,s=void 0===a?null:a,u=e.ignoreClass,c=void 0===u?"rr-ignore":u,l=e.maskTextClass,d=void 0===l?"rr-mask":l,f=e.maskTextSelector,h=void 0===f?null:f,p=e.inlineStylesheet,v=void 0===p||p,m=e.maskAllInputs,g=e.maskInputOptions,y=e.slimDOMOptions,b=e.maskInputFn,w=e.maskTextFn,I=e.hooks,C=e.packFn,S=e.sampling,k=void 0===S?{}:S,E=e.dataURLOptions,x=void 0===E?{}:E,A=e.mousemoveWait,M=e.recordCanvas,T=void 0!==M&&M,_=e.recordCrossOriginIframes,R=void 0!==_&&_,O=e.recordAfter,D=void 0===O?"DOMContentLoaded"===e.recordAfter?e.recordAfter:"load":O,L=e.userTriggeredOnInput,F=void 0!==L&&L,V=e.collectFonts,B=void 0!==V&&V,j=e.inlineImages,P=void 0!==j&&j,W=e.plugins,U=e.keepIframeSrcFn,G=void 0===U?function(){return!1}:U,H=e.ignoreCSSAttributes,z=void 0===H?new Set([]):H,q=!R||window.parent===window,Z=!1;if(!q)try{window.parent.document,Z=!1}catch(Dn){Z=!0}if(q&&!t)throw new Error("emit function is required");void 0!==A&&void 0===k.mousemove&&(k.mousemove=A),zi.reset();var Q,Y=!0===m?{color:!0,date:!0,"datetime-local":!0,email:!0,month:!0,number:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0,textarea:!0,select:!0,password:!0}:void 0!==g?g:{password:!0},K=!0===y||"all"===y?{script:!0,comment:!0,headFavicon:!0,headWhitespace:!0,headMetaSocial:!0,headMetaRobots:!0,headMetaHttpEquiv:!0,headMetaVerification:!0,headMetaAuthorship:"all"===y,headMetaDescKeywords:"all"===y}:y||{};or();var X=0,J=function(e){var t,n=N(W||[]);try{for(n.s();!(t=n.n()).done;){var r=t.value;r.eventProcessor&&(e=r.eventProcessor(e))}}catch(i){n.e(i)}finally{n.f()}return C&&!Z&&(e=C(e)),e};Vi=function(e,i){var o;if(!(null===(o=ii[0])||void 0===o?void 0:o.isFrozen())||e.type===Pe.FullSnapshot||e.type===Pe.IncrementalSnapshot&&e.data.source===We.Mutation||ii.forEach((function(e){return e.unfreeze()})),q)null===t||void 0===t||t(J(e),i);else if(Z){var a={type:"rrweb",event:J(e),origin:window.location.origin,isCheckout:i};window.parent.postMessage(a,"*")}if(e.type===Pe.FullSnapshot)Q=e,X=0;else if(e.type===Pe.IncrementalSnapshot){if(e.data.source===We.Mutation&&e.data.isAttachIframe)return;X++;var s=r&&X>=r,u=n&&e.timestamp-Q.timestamp>n;(s||u)&&Bi(!0)}};var $,ee=function(e){Vi(Gi({type:Pe.IncrementalSnapshot,data:Object.assign({source:We.Mutation},e)}))},te=function(e){return Vi(Gi({type:Pe.IncrementalSnapshot,data:Object.assign({source:We.Scroll},e)}))},ne=function(e){return Vi(Gi({type:Pe.IncrementalSnapshot,data:Object.assign({source:We.CanvasMutation},e)}))},re=new Ui({mutationCb:ee,adoptedStyleSheetCb:function(e){return Vi(Gi({type:Pe.IncrementalSnapshot,data:Object.assign({source:We.AdoptedStyleSheet},e)}))}}),ie=new wi({mirror:zi,mutationCb:ee,stylesheetManager:re,recordCrossOriginIframes:R,wrappedEmit:Vi}),oe=N(W||[]);try{for(oe.s();!($=oe.n()).done;){var ae=$.value;ae.getMirror&&ae.getMirror({nodeMirror:zi,crossOriginIframeMirror:ie.crossOriginIframeMirror,crossOriginIframeStyleMirror:ie.crossOriginIframeStyleMirror})}}catch(de){oe.e(de)}finally{oe.f()}ji=new Wi({recordCanvas:T,mutationCb:ne,win:window,blockClass:o,blockSelector:s,mirror:zi,sampling:k.canvas,dataURLOptions:x});var se=new Ii({mutationCb:ee,scrollCb:te,bypassOptions:{blockClass:o,blockSelector:s,maskTextClass:d,maskTextSelector:h,inlineStylesheet:v,maskInputOptions:Y,dataURLOptions:x,maskTextFn:w,maskInputFn:b,recordCanvas:T,inlineImages:P,sampling:k,slimDOMOptions:K,iframeManager:ie,stylesheetManager:re,canvasManager:ji,keepIframeSrcFn:G,processedNodeManager:oi},mirror:zi});Bi=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];Vi(Gi({type:Pe.Meta,data:{href:window.location.href,width:er(),height:$n()}}),e),re.reset(),se.init(),ii.forEach((function(e){return e.lock()}));var t=function(e,t){var n=t||{},r=n.mirror,i=void 0===r?new rt:r,o=n.blockClass,a=void 0===o?"rr-block":o,s=n.blockSelector,u=void 0===s?null:s,c=n.maskTextClass,l=void 0===c?"rr-mask":c,d=n.maskTextSelector,f=void 0===d?null:d,h=n.inlineStylesheet,p=void 0===h||h,v=n.inlineImages,m=void 0!==v&&v,g=n.recordCanvas,y=void 0!==g&&g,b=n.maskAllInputs,w=void 0!==b&&b,I=n.maskTextFn,C=n.maskInputFn,S=n.slimDOM,k=void 0!==S&&S,E=n.dataURLOptions,x=n.preserveWhiteSpace,A=n.onSerialize,M=n.onIframeLoad,T=n.iframeLoadTimeout,N=n.onStylesheetLoad,_=n.stylesheetLoadTimeout,R=n.keepIframeSrcFn;return At(e,{doc:e,mirror:i,blockClass:a,blockSelector:u,maskTextClass:l,maskTextSelector:f,skipChild:!1,inlineStylesheet:p,maskInputOptions:!0===w?{color:!0,date:!0,"datetime-local":!0,email:!0,month:!0,number:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0,textarea:!0,select:!0,password:!0}:!1===w?{password:!0}:w,maskTextFn:I,maskInputFn:C,slimDOMOptions:!0===k||"all"===k?{script:!0,comment:!0,headFavicon:!0,headWhitespace:!0,headMetaDescKeywords:"all"===k,headMetaSocial:!0,headMetaRobots:!0,headMetaHttpEquiv:!0,headMetaAuthorship:!0,headMetaVerification:!0}:!1===k?{}:k,dataURLOptions:E,inlineImages:m,recordCanvas:y,preserveWhiteSpace:x,onSerialize:A,onIframeLoad:M,iframeLoadTimeout:T,onStylesheetLoad:N,stylesheetLoadTimeout:_,keepIframeSrcFn:void 0===R?function(){return!1}:R,newlyAddedElement:!1})}(document,{mirror:zi,blockClass:o,blockSelector:s,maskTextClass:d,maskTextSelector:h,inlineStylesheet:v,maskAllInputs:Y,maskTextFn:w,slimDOM:K,dataURLOptions:x,recordCanvas:T,inlineImages:P,onSerialize:function(e){ur(e,zi)&&ie.addIframe(e),cr(e,zi)&&re.trackLinkElement(e),dr(e)&&se.addShadowRoot(e.shadowRoot,document)},onIframeLoad:function(e,t){ie.attachIframe(e,t),se.observeAttachShadow(e)},onStylesheetLoad:function(e,t){re.attachLinkElement(e,t)},keepIframeSrcFn:G});if(!t)return console.warn("Failed to snapshot the document");Vi(Gi({type:Pe.FullSnapshot,data:{node:t,initialOffset:Jn(window)}})),ii.forEach((function(e){return e.unlock()})),document.adoptedStyleSheets&&document.adoptedStyleSheets.length>0&&re.adoptStyleSheets(document.adoptedStyleSheets,zi.getId(document))};try{var ue=[],ce=function(e){var t;return mi({mutationCb:ee,mousemoveCb:function(e,t){return Vi(Gi({type:Pe.IncrementalSnapshot,data:{source:t,positions:e}}))},mouseInteractionCb:function(e){return Vi(Gi({type:Pe.IncrementalSnapshot,data:Object.assign({source:We.MouseInteraction},e)}))},scrollCb:te,viewportResizeCb:function(e){return Vi(Gi({type:Pe.IncrementalSnapshot,data:Object.assign({source:We.ViewportResize},e)}))},inputCb:function(e){return Vi(Gi({type:Pe.IncrementalSnapshot,data:Object.assign({source:We.Input},e)}))},mediaInteractionCb:function(e){return Vi(Gi({type:Pe.IncrementalSnapshot,data:Object.assign({source:We.MediaInteraction},e)}))},styleSheetRuleCb:function(e){return Vi(Gi({type:Pe.IncrementalSnapshot,data:Object.assign({source:We.StyleSheetRule},e)}))},styleDeclarationCb:function(e){return Vi(Gi({type:Pe.IncrementalSnapshot,data:Object.assign({source:We.StyleDeclaration},e)}))},canvasMutationCb:ne,fontCb:function(e){return Vi(Gi({type:Pe.IncrementalSnapshot,data:Object.assign({source:We.Font},e)}))},selectionCb:function(e){Vi(Gi({type:Pe.IncrementalSnapshot,data:Object.assign({source:We.Selection},e)}))},blockClass:o,ignoreClass:c,maskTextClass:d,maskTextSelector:h,maskInputOptions:Y,inlineStylesheet:v,sampling:k,recordCanvas:T,inlineImages:P,userTriggeredOnInput:F,collectFonts:B,doc:e,maskInputFn:b,maskTextFn:w,keepIframeSrcFn:G,blockSelector:s,slimDOMOptions:K,dataURLOptions:x,mirror:zi,iframeManager:ie,stylesheetManager:re,shadowDomManager:se,processedNodeManager:oi,canvasManager:ji,ignoreCSSAttributes:z,plugins:(null===(t=null===W||void 0===W?void 0:W.filter((function(e){return e.observer})))||void 0===t?void 0:t.map((function(e){return{observer:e.observer,options:e.options,callback:function(t){return Vi(Gi({type:Pe.Plugin,data:{plugin:e.name,payload:t}}))}}})))||[]},I)};ie.addLoadListener((function(e){try{ue.push(ce(e.contentDocument))}catch(t){console.warn(t)}}));var le=function(){Bi(),ue.push(ce(document)),Hi=!0};return"interactive"===document.readyState||"complete"===document.readyState?le():(ue.push(qn("DOMContentLoaded",(function(){Vi(Gi({type:Pe.DomContentLoaded,data:{}})),"DOMContentLoaded"===D&&le()}))),ue.push(qn("load",(function(){Vi(Gi({type:Pe.Load,data:{}})),"load"===D&&le()}),window))),function(){ue.forEach((function(e){return e()})),Hi=!1}}catch(fe){console.warn(fe)}}qi.addCustomEvent=function(e,t){if(!Hi)throw new Error("please add custom event after start recording");Vi(Gi({type:Pe.Custom,data:{tag:e,payload:t}}))},qi.freezePage=function(){ii.forEach((function(e){return e.freeze()}))},qi.takeFullSnapshot=function(e){if(!Hi)throw new Error("please take full snapshot after start recording");Bi(e)},qi.mirror=zi;var Zi=p((function e(t){var n=this;d(this,e),this.logNativeMutationObserver=!1,this.stopRRWebRecording=function(){},this.eventHandler=void 0,this.currentURL=void 0,this.start=function(){n.stopRRWebRecording=qi({emit:n.eventHandler,sampling:{mousemove:!1},userTriggeredOnInput:!0}),n.logNativeMutationObserver&&n.selfObserve(),n.startURLObserver()},this.stop=function(){n.stopRRWebRecording()},this.startURLObserver=function(){window.addEventListener("popstate",(function(e){n.onURLChange()})),window.addEventListener("locationchange",(function(e){n.onURLChange()})),window.addEventListener("hashchange",(function(e){n.onURLChange()}));var e=n,t=window.history.pushState;window.history.pushState=function(){return e.onURLChange(),t.apply(window.history,arguments)};var r=window.history.replaceState;window.history.replaceState=function(){return e.onURLChange(),r.apply(window.history,arguments)}},this.onURLChange=function(){setTimeout((function(){var e=window.location.href;e!==n.currentURL&&(n.currentURL=e,qi.addCustomEvent("url-change",{url:e}))}))},this.selfObserve=function(){var e=document.getElementsByTagName("body");new MutationObserver((function(e,t){var n,r=N(e);try{for(r.s();!(n=r.n()).done;){var i=n.value;"childList"===i.type?console.log("A child node has been added or removed.",i):"attributes"===i.type&&console.log("The ".concat(i.attributeName," attribute was modified."),i)}}catch(o){r.e(o)}finally{r.f()}})).observe(e[0],{attributes:!0,childList:!0,subtree:!0})},this.getNodeById=function(e){return qi.mirror.getNode(e)},this.getMeta=function(e){return qi.mirror.getMeta(e)},this.eventHandler=t,this.currentURL=window.location.href}));function Qi(e){var t,n;return null!==(t=e._debugSource)&&void 0!==t&&t.fileName?null===(n=e._debugSource)||void 0===n?void 0:n.fileName:""}function Yi(e,t){if("Unknown"===e)return!1;if("string"!==typeof e)return!1;if(e[0]!==e[0].toUpperCase())return!1;if(t.type.$$typeof===Symbol.for("react.context")||t.type.$$typeof===Symbol.for("react.forward_ref")||t.type.$$typeof===Symbol.for("react.memo")||t.type.$$typeof===Symbol.for("react.profiler")||t.type.$$typeof===Symbol.for("react.suspense"))return!1;var n=Qi(t);return!/.*\/node_modules\//.test(n)&&e!==n&&!/^(?!.*src).*$/.test(n)}function Ki(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!e)return["",{}];var n=e.type,r=n?n.name||n:"Unknown",i="";if(Yi(r,e)){i+="<".concat(r,">");var o=Qi(e);t[r]=o}if(e.child){var a=M(Ki(e.child,t),2),s=a[0],u=a[1];i+=s,t=C(C({},t),u)}if(Yi(r,e)&&(i+="</".concat(r,">")),e.sibling){var c=M(Ki(e.sibling,t),2),l=c[0],d=c[1];i+=l,t=C(C({},t),d)}return[i,t]}function Xi(e){var t,n=null===(t=e._reactRootContainer)||void 0===t?void 0:t._internalRoot.current;return n||console.log("No react tree in element",e),Ki(n)}var Ji=function(e){ye(n,e);var t=Ie(n);function n(){var e,r,i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};d(this,n);var o=null!==(e=i.elementSelector)&&void 0!==e?e:new Ce;return(r=t.call(this,o)).testIdCounter=0,r.testIdSelector=void 0,r.currentESRASelector=void 0,r.lastHighlights=[],r.assertionGenerator=void 0,r.options={highlightElement:!0,elementSelector:void 0},r.initialized=!1,r.htmlReducer=void 0,r.options=C(C(C({},r.options),i),{},{elementSelector:o}),r.htmlReducer=new Be,r}return p(n,[{key:"init",value:function(){var e,t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{limitChildren:[],testIdSelector:void 0},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{assertionGenerator:!0},i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{maxAssertionsPerDomTree:2,maxAssertions:10};if(!this.initialized){this.initialized=!0,this.testIdSelector=n.testIdSelector;var o=new Zi((function(e){return t.eventProcessor.processEvent(e)}));r.assertionGenerator&&(this.assertionGenerator=new Qr({sessionMirror:o,elementSelectorGenerator:this.elementSelector,assertionGeneratorOptions:i})),o.start(),r.assertionGenerator&&this.setEventHandlers(this.assertionGenerator),pe.limitChildren=null!==(e=null===n||void 0===n?void 0:n.limitChildren)&&void 0!==e?e:[]}}},{key:"getLastSelectionLogs",value:function(){return this.currentESRASelector?this.currentESRASelector.getLastSelectionLogs():{}}},{key:"getBestMatchingElementSimilarityScore",value:function(e){return this.currentESRASelector=new pe(e),this.currentESRASelector.selectOne().score}},{key:"extractESRAMetadata",value:function(){var e=o(r().mark((function e(t){return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new de(document).extract(t).toMetadata());case 1:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()},{key:"getSelectionDataForSelector",value:function(){var e=o(r().mark((function e(t){var n,i,o;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,this.elementSelector.selector(t);case 3:if(n=e.sent){e.next=7;break}return console.warn("could not find element for selector: "+t),e.abrupt("return",null);case 7:return e.next=9,ke(n,this.testIdSelector);case 9:return i=e.sent,e.next=12,this.extractESRAMetadata(n);case 12:return o=e.sent,e.abrupt("return",{generatedLocator:i,esraMetadata:o});case 16:return e.prev=16,e.t0=e.catch(0),console.log("getMetadataForSelector exception",e.t0),e.abrupt("return");case 20:case"end":return e.stop()}}),e,this,[[0,16]])})));return function(t){return e.apply(this,arguments)}}()},{key:"getMatchingElementSelectionData",value:function(){var e=o(r().mark((function e(t){var n,i,o,a,s,u,c,l,d,f,h=arguments;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i=(n=h.length>1&&void 0!==h[1]?h[1]:{minSelectionScore:.3}).minSelectionScore,o=n.cachedSelector,a=n.staticMetadata,s=h.length>2&&void 0!==h[2]&&h[2],e.prev=2,!o){e.next=8;break}return console.log("Trying to locate using cached selector",o),e.next=7,this.elementSelector.selector(o);case 7:u=e.sent;case 8:if(u||(console.log("Trying to locate using ESRA",t),Z(a)&&console.log("and static data",a),this.currentESRASelector=new pe(t,a),(d=this.currentESRASelector.selectOne()).score>=i?(u=d.candidate,c=d.score,d.esraMetadata,l=d.clickOffset):console.log("Best matching element was below threshold",d)),console.log(u?["Located with score ".concat(c),u]:"Element not located"),u){e.next=12;break}return e.abrupt("return");case 12:return s&&new _(u).scrollIntoView(),this.highlightElement(u),e.next=16,this.makeMatchingElementSelectionData(u,c);case 16:return f=e.sent,l&&(f.clickOffset=l),e.abrupt("return",f);case 21:return e.prev=21,e.t0=e.catch(2),console.log("getMatchingElementSelectionData exception",e.t0),e.abrupt("return");case 26:case"end":return e.stop()}}),e,this,[[2,21]])})));return function(t){return e.apply(this,arguments)}}()},{key:"getAllInteractableElementsForLastSelectQuery",value:function(){var e=this,t=this.currentESRASelector.getFinalCandidates();return Promise.all(t.map(function(){var t=o(r().mark((function t(n){return r().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=n.esraMetadata,t.next=3,e.makeMatchingElementSelectionData(n.candidate,n.score);case 3:return t.t1=t.sent,t.abrupt("return",{esraMetadata:t.t0,selectionData:t.t1});case 5:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()))}},{key:"getInteractableElementsRaw",value:function(){var e=o(r().mark((function e(){return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",F());case 1:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}()},{key:"getInteractableElements",value:function(){var e=o(r().mark((function e(){var t,n,i=this;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=F(),n=new de(document),e.abrupt("return",Promise.all(t.map(function(){var e=o(r().mark((function e(t){var o,a;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o=n.extract(t).toMetadata(),e.next=3,i.makeMatchingElementSelectionData(t);case 3:return a=e.sent,e.abrupt("return",{esraMetadata:o,selectionData:a});case 5:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}())));case 3:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}()},{key:"getCurrentESRASelector",value:function(){return this.currentESRASelector}},{key:"startMonitoringForAssertions",value:function(){return this.assertionGenerator.startMonitoring()}},{key:"generateAssertions",value:function(){return this.assertionGenerator.generateAssertions()}},{key:"stopMonitoringAndGenerateAssertions",value:function(){return this.assertionGenerator.stopMonitoringAndGenerateAssertions()}},{key:"stopMonitoring",value:function(){this.assertionGenerator.stopMonitoring()}},{key:"reduceHTML",value:function(){var e=o(r().mark((function e(t){var n,i,o,a,s=arguments;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=s.length>1&&void 0!==s[1]?s[1]:{},i=s.length>2&&void 0!==s[2]?s[2]:document,e.next=4,this.htmlReducer.reduceHTML(t,i,n);case 4:return o=e.sent,n.extractESRAForInterpretationRequiredElements&&(a=this.htmlReducer.getInteractableElements(),o.elementsForNodeInterpretation=a.reduce((function(e,t){var n,r=t.checksumId,i=t.element;if(!(i instanceof HTMLElement))return e;if(null!==(n=i.innerText)&&void 0!==n&&n.trim().length)return e;var o=new de(document).extract(i).toMetadata();return[].concat(T(e),[{checksumId:r,esraMetadata:o}])}),[])),e.abrupt("return",o);case 7:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"displayInterpretationForElements",value:function(e){var t=this;this.clearHighlights(),this.htmlReducer.getInteractableElements().forEach((function(n){var r=n.checksumId,i=n.element,o=e[r];o&&(i.isConnected?t.highlightElement(i,void 0,void 0,o,!1):console.log("Element ".concat(r," is not connected to the DOM, skipping display")))}))}},{key:"getSelectorForChecksumId",value:function(e){return this.htmlReducer.getSelectorForChecksumId(e)}},{key:"isInput",value:function(e){var t=j(e);if(t.length)return["input","textarea"].includes(t[0].tagName.toLowerCase())}},{key:"getReactTree",value:function(e){return Xi(e)}},{key:"isHidden",value:function(e){return G(e)}},{key:"clearHighlights",value:function(){console.log("clearing highlights"),this.lastHighlights.length&&(this.lastHighlights.forEach((function(e){return e.remove()})),this.lastHighlights=[])}},{key:"highlightElement",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"2px dashed rgba(255,0,0,.75)",n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0,i=!(arguments.length>4&&void 0!==arguments[4])||arguments[4];if(this.options.highlightElement&&(i&&this.clearHighlights(),e)){var o=e.getBoundingClientRect(),a=document.createElement("div");if(a.style.outline=t,a.style.position="absolute",a.style.left=o.left+"px",a.style.top=o.top+"px",a.style.width=o.right-o.left+"px",a.style.height=o.bottom-o.top+"px",a.style.pointerEvents="none",a.style.zIndex="2147483647",a.className="checksum-dom-cache-ignore",n){var s=document.createElement("div");if(s.style.position="absolute",s.style.left=+n.x-16+"px",s.style.top=+n.y-16+"px",s.style.color="#004DFF",s.className="checksum-dom-cache-ignore mouse-cross",s.style.zIndex="2147483648",!document.head.querySelector("style[role=mouse-location]")){var u=document.head.appendChild(document.createElement("style"));u.setAttribute("role","mouse-location"),u.innerHTML=".mouse-cross:before, .mouse-cross:after {position: absolute;left: 15px;content: ' ';height: 33px;width: 3px;background-color: #004DFF;}.mouse-cross:before {transform: rotate(0deg);}.mouse-cross:after {transform: rotate(-90deg);}"}document.body.appendChild(s),this.lastHighlights.push(s)}if(r){var c=document.createElement("div");c.className="checksum-dom-cache-ignore",c.innerText=r,c.style.display="none",c.style.fontSize="12px",c.style.width="120px",c.style.position="absolute",c.style.background="#000000a1",c.style.color="white",c.style.padding="5px",c.style.pointerEvents="none",c.style.userSelect="none",a.appendChild(c),a.style.pointerEvents="auto",a.addEventListener("mouseover",(function(){c.style.display="block"})),a.addEventListener("mouseout",(function(){c.style.display="none"}))}document.body.appendChild(a),this.lastHighlights.push(a)}}},{key:"getNodeSelector",value:function(e){return(new je).getSelector(e)}},{key:"makeMatchingElementSelectionData",value:function(){var e=o(r().mark((function e(t,n,i){var a,s,u,c,l,d,f,h,p,v,m,g;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,a=this.setAndGetTestId(t),s=this.getVisibleParent(t),u=this.setAndGetTestId(s),c=this.getElementAtCenterOfElement(t),l=this.setAndGetTestId(c),d={element:a,visibleElement:u===a?void 0:u,atPointElement:l===a||l===u?void 0:l},e.next=9,this.elementSelector.getSelector(t,{testIdSelector:this.testIdSelector});case 9:if(e.t0=e.sent,!d.visibleElement){e.next=16;break}return e.next=13,this.elementSelector.getSelector(s,{testIdSelector:this.testIdSelector});case 13:e.t1=e.sent,e.next=17;break;case 16:e.t1=void 0;case 17:if(e.t2=e.t1,!d.atPointElement){e.next=24;break}return e.next=21,this.elementSelector.getSelector(c,{testIdSelector:this.testIdSelector});case 21:e.t3=e.sent,e.next=25;break;case 24:e.t3=void 0;case 25:return e.t4=e.t3,f={element:e.t0,visibleElement:e.t2,atPointElement:e.t4},p={element:(h=function(e){return{tag:e.tagName.toLowerCase()}})(t),visibleElement:d.visibleElement?h(s):void 0,atPointElement:d.atPointElement?h(c):void 0},v=function(){var e=o(r().mark((function e(n){var o;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n!==t||!i){e.next=2;break}return e.abrupt("return",i);case 2:return o=new de(document),e.abrupt("return",o.extract(n).toMetadata());case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),e.next=32,v(t);case 32:if(e.t5=e.sent,!d.visibleElement){e.next=39;break}return e.next=36,v(s);case 36:e.t6=e.sent,e.next=40;break;case 39:e.t6=void 0;case 40:if(e.t7=e.t6,!d.atPointElement){e.next=47;break}return e.next=44,v(c);case 44:e.t8=e.sent,e.next=48;break;case 47:e.t8=void 0;case 48:return e.t9=e.t8,m={element:e.t5,visibleElement:e.t7,atPointElement:e.t9},e.next=52,ke(t,this.testIdSelector);case 52:return g=e.sent,e.abrupt("return",{testIds:d,selectors:f,elementData:p,score:n,esraMetadata:m,generatedLocator:g});case 56:return e.prev=56,e.t10=e.catch(0),console.log("[makeMatchingElementSelectionData] exception",e.t10),e.abrupt("return",{testIds:{element:void 0},selectors:{element:void 0},elementData:{element:void 0},esraMetadata:{element:void 0},generatedLocator:void 0});case 60:case"end":return e.stop()}}),e,this,[[0,56]])})));return function(t,n,r){return e.apply(this,arguments)}}()},{key:"getElementAtCenterOfElement",value:function(e){var t=e.getBoundingClientRect(),n=t.x,r=t.y,i=e.ownerDocument.elementFromPoint(n,r);return i instanceof HTMLElement?i:void 0}},{key:"setAndGetTestId",value:function(e){if(e){var t=e.getAttribute("data-checksum-testid");if(t)return t;var n=(this.testIdCounter++).toString();return e.setAttribute("data-checksum-testid",n),n}}},{key:"getVisibleParent",value:function(e){return e instanceof HTMLElement?null!==e.offsetParent?e:this.getVisibleParent(U(e)):e}}]),n}(Hr),$i=function(e){ye(n,e);var t=Ie(n);function n(){return d(this,n),t.apply(this,arguments)}return p(n)}(ze),eo=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=n.addToWindow,i=void 0!==r&&r,o=n.appName,a=void 0===o?void 0:o,s=n.apiPrefix,u=void 0===s?"":s;d(this,e),this.appName=void 0,this.apiPrefix=void 0,this.eventProcessor=void 0,this.sessionRecorder=void 0,this.elementSelector=void 0,this.handleEvent=function(e){return t.eventProcessor.processEvent(e)},this.sessionRecorder=new Zi(this.handleEvent),this.eventProcessor=new Ke({eventHandlers:new $i}),this.appName=a,this.apiPrefix=u,i&&(window.checksumRecorder=this)}return p(e,[{key:"start",value:function(){this.sessionRecorder.start()}},{key:"stop",value:function(){this.sessionRecorder.stop()}},{key:"getEvents",value:function(){return this.eventProcessor.getEvents()}},{key:"getEventsJSON",value:function(){return JSON.stringify(this.getEvents())}},{key:"saveFile",value:function(){var e=o(r().mark((function e(){var t,n=arguments;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t=!(n.length>0&&void 0!==n[0])||n[0],this.appName){e.next=4;break}return console.error("saveFile without app name"),e.abrupt("return");case 4:return e.next=6,fetch("".concat(this.apiPrefix,"/digestion/addSession/").concat(this.appName,"?digest=").concat(t?"true":"false"),{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:this.getEventsJSON()});case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}}),e,this)})));return function(){return e.apply(this,arguments)}}()},{key:"stopAndSave",value:function(){var e=o(r().mark((function e(){var t,n=arguments;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=!(n.length>0&&void 0!==n[0])||n[0],this.stop(),e.abrupt("return",this.saveFile(t));case 3:case"end":return e.stop()}}),e,this)})));return function(){return e.apply(this,arguments)}}()}]),e}(),to=function(){function e(){d(this,e),this.goals=void 0,this.goals={}}return p(e,[{key:"init",value:function(){var e=o(r().mark((function e(){return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}()},{key:"recordGoalFinished",value:function(e){var t;console.log("Goal reached: ".concat(e)),this.goals[e]||(this.goals[e]=0),this.goals[e]+=1,null===(t=window.checksumai)||void 0===t||t.capture("goal_reached",{goalName:e})}},{key:"getGoals",value:function(){return this.goals}}]),e}();window.checksum||(window.checksum={testGenerator:new Ji,testRunner:new Ji({highlightElement:!1}),sessionDigester:new zr,recorder:new eo({addToWindow:!0,appName:"internal_agent_test_page",apiPrefix:"http://localhost:3000"}),goalTracker:new to});var no=!!c().app,ro=c().type||no?a.App:void 0;function io(){return(io=o(r().mark((function e(){return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:e.t0=ro||l.appType,e.next=e.t0===a.App?3:e.t0===a.Script?4:5;break;case 3:case 4:return e.abrupt("break",5);case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}"true"===c().injectESRA&&(window.esraExtractor=new de(document),window.esraSelector=function(e){return new pe(e)},window.esraMetadata=y),function(){io.apply(this,arguments)}()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,